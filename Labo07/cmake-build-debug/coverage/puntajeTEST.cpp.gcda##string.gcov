        -:    0:Source:/Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/string
        -:    0:Graph:/Users/ezequielpc/Desktop/Ciencias de la computacion/Primer Año/Algoritmos y Estructuras de Datos I/Labo07/cmake-build-debug/CMakeFiles/Labo-testing.dir/test/puntajeTEST.cpp.gcno
        -:    0:Data:/Users/ezequielpc/Desktop/Ciencias de la computacion/Primer Año/Algoritmos y Estructuras de Datos I/Labo07/cmake-build-debug/CMakeFiles/Labo-testing.dir/test/puntajeTEST.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// -*- C++ -*-
        -:    2://===--------------------------- string -----------------------------------===//
        -:    3://
        -:    4:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    5:// See https://llvm.org/LICENSE.txt for license information.
        -:    6:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    7://
        -:    8://===----------------------------------------------------------------------===//
        -:    9:
        -:   10:#ifndef _LIBCPP_STRING
        -:   11:#define _LIBCPP_STRING
        -:   12:
        -:   13:/*
        -:   14:    string synopsis
        -:   15:
        -:   16:namespace std
        -:   17:{
        -:   18:
        -:   19:template <class stateT>
        -:   20:class fpos
        -:   21:{
        -:   22:private:
        -:   23:    stateT st;
        -:   24:public:
        -:   25:    fpos(streamoff = streamoff());
        -:   26:
        -:   27:    operator streamoff() const;
        -:   28:
        -:   29:    stateT state() const;
        -:   30:    void state(stateT);
        -:   31:
        -:   32:    fpos& operator+=(streamoff);
        -:   33:    fpos  operator+ (streamoff) const;
        -:   34:    fpos& operator-=(streamoff);
        -:   35:    fpos  operator- (streamoff) const;
        -:   36:};
        -:   37:
        -:   38:template <class stateT> streamoff operator-(const fpos<stateT>& x, const fpos<stateT>& y);
        -:   39:
        -:   40:template <class stateT> bool operator==(const fpos<stateT>& x, const fpos<stateT>& y);
        -:   41:template <class stateT> bool operator!=(const fpos<stateT>& x, const fpos<stateT>& y);
        -:   42:
        -:   43:template <class charT>
        -:   44:struct char_traits
        -:   45:{
        -:   46:    typedef charT     char_type;
        -:   47:    typedef ...       int_type;
        -:   48:    typedef streamoff off_type;
        -:   49:    typedef streampos pos_type;
        -:   50:    typedef mbstate_t state_type;
        -:   51:
        -:   52:    static void assign(char_type& c1, const char_type& c2) noexcept;
        -:   53:    static constexpr bool eq(char_type c1, char_type c2) noexcept;
        -:   54:    static constexpr bool lt(char_type c1, char_type c2) noexcept;
        -:   55:
        -:   56:    static int              compare(const char_type* s1, const char_type* s2, size_t n);
        -:   57:    static size_t           length(const char_type* s);
        -:   58:    static const char_type* find(const char_type* s, size_t n, const char_type& a);
        -:   59:    static char_type*       move(char_type* s1, const char_type* s2, size_t n);
        -:   60:    static char_type*       copy(char_type* s1, const char_type* s2, size_t n);
        -:   61:    static char_type*       assign(char_type* s, size_t n, char_type a);
        -:   62:
        -:   63:    static constexpr int_type  not_eof(int_type c) noexcept;
        -:   64:    static constexpr char_type to_char_type(int_type c) noexcept;
        -:   65:    static constexpr int_type  to_int_type(char_type c) noexcept;
        -:   66:    static constexpr bool      eq_int_type(int_type c1, int_type c2) noexcept;
        -:   67:    static constexpr int_type  eof() noexcept;
        -:   68:};
        -:   69:
        -:   70:template <> struct char_traits<char>;
        -:   71:template <> struct char_traits<wchar_t>;
        -:   72:template <> struct char_traits<char8_t>;  // C++20
        -:   73:template <> struct char_traits<char16_t>;
        -:   74:template <> struct char_traits<char32_t>;
        -:   75:
        -:   76:template<class charT, class traits = char_traits<charT>, class Allocator = allocator<charT> >
        -:   77:class basic_string
        -:   78:{
        -:   79:public:
        -:   80:// types:
        -:   81:    typedef traits traits_type;
        -:   82:    typedef typename traits_type::char_type value_type;
        -:   83:    typedef Allocator allocator_type;
        -:   84:    typedef typename allocator_type::size_type size_type;
        -:   85:    typedef typename allocator_type::difference_type difference_type;
        -:   86:    typedef typename allocator_type::reference reference;
        -:   87:    typedef typename allocator_type::const_reference const_reference;
        -:   88:    typedef typename allocator_type::pointer pointer;
        -:   89:    typedef typename allocator_type::const_pointer const_pointer;
        -:   90:    typedef implementation-defined iterator;
        -:   91:    typedef implementation-defined const_iterator;
        -:   92:    typedef std::reverse_iterator<iterator> reverse_iterator;
        -:   93:    typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
        -:   94:
        -:   95:    static const size_type npos = -1;
        -:   96:
        -:   97:    basic_string()
        -:   98:        noexcept(is_nothrow_default_constructible<allocator_type>::value);
        -:   99:    explicit basic_string(const allocator_type& a);
        -:  100:    basic_string(const basic_string& str);
        -:  101:    basic_string(basic_string&& str)
        -:  102:        noexcept(is_nothrow_move_constructible<allocator_type>::value);
        -:  103:    basic_string(const basic_string& str, size_type pos,
        -:  104:                 const allocator_type& a = allocator_type());
        -:  105:    basic_string(const basic_string& str, size_type pos, size_type n,
        -:  106:                 const Allocator& a = Allocator());
        -:  107:    template<class T>
        -:  108:        basic_string(const T& t, size_type pos, size_type n, const Allocator& a = Allocator()); // C++17
        -:  109:    template <class T>
        -:  110:        explicit basic_string(const T& t, const Allocator& a = Allocator()); // C++17
        -:  111:    basic_string(const value_type* s, const allocator_type& a = allocator_type());
        -:  112:    basic_string(const value_type* s, size_type n, const allocator_type& a = allocator_type());
        -:  113:    basic_string(nullptr_t) = delete; // C++2b
        -:  114:    basic_string(size_type n, value_type c, const allocator_type& a = allocator_type());
        -:  115:    template<class InputIterator>
        -:  116:        basic_string(InputIterator begin, InputIterator end,
        -:  117:                     const allocator_type& a = allocator_type());
        -:  118:    basic_string(initializer_list<value_type>, const Allocator& = Allocator());
        -:  119:    basic_string(const basic_string&, const Allocator&);
        -:  120:    basic_string(basic_string&&, const Allocator&);
        -:  121:
        -:  122:    ~basic_string();
        -:  123:
        -:  124:    operator basic_string_view<charT, traits>() const noexcept;
        -:  125:
        -:  126:    basic_string& operator=(const basic_string& str);
        -:  127:    template <class T>
        -:  128:        basic_string& operator=(const T& t); // C++17
        -:  129:    basic_string& operator=(basic_string&& str)
        -:  130:        noexcept(
        -:  131:             allocator_type::propagate_on_container_move_assignment::value ||
        -:  132:             allocator_type::is_always_equal::value ); // C++17
        -:  133:    basic_string& operator=(const value_type* s);
        -:  134:    basic_string& operator=(nullptr_t) = delete; // C++2b
        -:  135:    basic_string& operator=(value_type c);
        -:  136:    basic_string& operator=(initializer_list<value_type>);
        -:  137:
        -:  138:    iterator       begin() noexcept;
        -:  139:    const_iterator begin() const noexcept;
        -:  140:    iterator       end() noexcept;
        -:  141:    const_iterator end() const noexcept;
        -:  142:
        -:  143:    reverse_iterator       rbegin() noexcept;
        -:  144:    const_reverse_iterator rbegin() const noexcept;
        -:  145:    reverse_iterator       rend() noexcept;
        -:  146:    const_reverse_iterator rend() const noexcept;
        -:  147:
        -:  148:    const_iterator         cbegin() const noexcept;
        -:  149:    const_iterator         cend() const noexcept;
        -:  150:    const_reverse_iterator crbegin() const noexcept;
        -:  151:    const_reverse_iterator crend() const noexcept;
        -:  152:
        -:  153:    size_type size() const noexcept;
        -:  154:    size_type length() const noexcept;
        -:  155:    size_type max_size() const noexcept;
        -:  156:    size_type capacity() const noexcept;
        -:  157:
        -:  158:    void resize(size_type n, value_type c);
        -:  159:    void resize(size_type n);
        -:  160:
        -:  161:    void reserve(size_type res_arg);
        -:  162:    void reserve(); // deprecated in C++20
        -:  163:    void shrink_to_fit();
        -:  164:    void clear() noexcept;
        -:  165:    bool empty() const noexcept;
        -:  166:
        -:  167:    const_reference operator[](size_type pos) const;
        -:  168:    reference       operator[](size_type pos);
        -:  169:
        -:  170:    const_reference at(size_type n) const;
        -:  171:    reference       at(size_type n);
        -:  172:
        -:  173:    basic_string& operator+=(const basic_string& str);
        -:  174:    template <class T>
        -:  175:        basic_string& operator+=(const T& t);              // C++17
        -:  176:    basic_string& operator+=(const value_type* s);
        -:  177:    basic_string& operator+=(value_type c);
        -:  178:    basic_string& operator+=(initializer_list<value_type>);
        -:  179:
        -:  180:    basic_string& append(const basic_string& str);
        -:  181:    template <class T>
        -:  182:        basic_string& append(const T& t);                 // C++17
        -:  183:    basic_string& append(const basic_string& str, size_type pos, size_type n=npos); //C++14
        -:  184:    template <class T>
        -:  185:        basic_string& append(const T& t, size_type pos, size_type n=npos); // C++17
        -:  186:    basic_string& append(const value_type* s, size_type n);
        -:  187:    basic_string& append(const value_type* s);
        -:  188:    basic_string& append(size_type n, value_type c);
        -:  189:    template<class InputIterator>
        -:  190:        basic_string& append(InputIterator first, InputIterator last);
        -:  191:    basic_string& append(initializer_list<value_type>);
        -:  192:
        -:  193:    void push_back(value_type c);
        -:  194:    void pop_back();
        -:  195:    reference       front();
        -:  196:    const_reference front() const;
        -:  197:    reference       back();
        -:  198:    const_reference back() const;
        -:  199:
        -:  200:    basic_string& assign(const basic_string& str);
        -:  201:    template <class T>
        -:  202:        basic_string& assign(const T& t);  // C++17
        -:  203:    basic_string& assign(basic_string&& str);
        -:  204:    basic_string& assign(const basic_string& str, size_type pos, size_type n=npos); // C++14
        -:  205:    template <class T>
        -:  206:        basic_string& assign(const T& t, size_type pos, size_type n=npos); // C++17
        -:  207:    basic_string& assign(const value_type* s, size_type n);
        -:  208:    basic_string& assign(const value_type* s);
        -:  209:    basic_string& assign(size_type n, value_type c);
        -:  210:    template<class InputIterator>
        -:  211:        basic_string& assign(InputIterator first, InputIterator last);
        -:  212:    basic_string& assign(initializer_list<value_type>);
        -:  213:
        -:  214:    basic_string& insert(size_type pos1, const basic_string& str);
        -:  215:    template <class T>
        -:  216:        basic_string& insert(size_type pos1, const T& t);
        -:  217:    basic_string& insert(size_type pos1, const basic_string& str,
        -:  218:                         size_type pos2, size_type n);
        -:  219:    template <class T>
        -:  220:        basic_string& insert(size_type pos1, const T& t, size_type pos2, size_type n); // C++17
        -:  221:    basic_string& insert(size_type pos, const value_type* s, size_type n=npos); //C++14
        -:  222:    basic_string& insert(size_type pos, const value_type* s);
        -:  223:    basic_string& insert(size_type pos, size_type n, value_type c);
        -:  224:    iterator      insert(const_iterator p, value_type c);
        -:  225:    iterator      insert(const_iterator p, size_type n, value_type c);
        -:  226:    template<class InputIterator>
        -:  227:        iterator insert(const_iterator p, InputIterator first, InputIterator last);
        -:  228:    iterator      insert(const_iterator p, initializer_list<value_type>);
        -:  229:
        -:  230:    basic_string& erase(size_type pos = 0, size_type n = npos);
        -:  231:    iterator      erase(const_iterator position);
        -:  232:    iterator      erase(const_iterator first, const_iterator last);
        -:  233:
        -:  234:    basic_string& replace(size_type pos1, size_type n1, const basic_string& str);
        -:  235:    template <class T>
        -:  236:    basic_string& replace(size_type pos1, size_type n1, const T& t);  // C++17
        -:  237:    basic_string& replace(size_type pos1, size_type n1, const basic_string& str,
        -:  238:                          size_type pos2, size_type n2=npos); // C++14
        -:  239:    template <class T>
        -:  240:        basic_string& replace(size_type pos1, size_type n1, const T& t,
        -:  241:                              size_type pos2, size_type n); // C++17
        -:  242:    basic_string& replace(size_type pos, size_type n1, const value_type* s, size_type n2);
        -:  243:    basic_string& replace(size_type pos, size_type n1, const value_type* s);
        -:  244:    basic_string& replace(size_type pos, size_type n1, size_type n2, value_type c);
        -:  245:    basic_string& replace(const_iterator i1, const_iterator i2, const basic_string& str);
        -:  246:    template <class T>
        -:  247:        basic_string& replace(const_iterator i1, const_iterator i2, const T& t);  // C++17
        -:  248:    basic_string& replace(const_iterator i1, const_iterator i2, const value_type* s, size_type n);
        -:  249:    basic_string& replace(const_iterator i1, const_iterator i2, const value_type* s);
        -:  250:    basic_string& replace(const_iterator i1, const_iterator i2, size_type n, value_type c);
        -:  251:    template<class InputIterator>
        -:  252:        basic_string& replace(const_iterator i1, const_iterator i2, InputIterator j1, InputIterator j2);
        -:  253:    basic_string& replace(const_iterator i1, const_iterator i2, initializer_list<value_type>);
        -:  254:
        -:  255:    size_type copy(value_type* s, size_type n, size_type pos = 0) const;
        -:  256:    basic_string substr(size_type pos = 0, size_type n = npos) const;
        -:  257:
        -:  258:    void swap(basic_string& str)
        -:  259:        noexcept(allocator_traits<allocator_type>::propagate_on_container_swap::value ||
        -:  260:                 allocator_traits<allocator_type>::is_always_equal::value);  // C++17
        -:  261:
        -:  262:    const value_type* c_str() const noexcept;
        -:  263:    const value_type* data() const noexcept;
        -:  264:          value_type* data()       noexcept;   // C++17
        -:  265:
        -:  266:    allocator_type get_allocator() const noexcept;
        -:  267:
        -:  268:    size_type find(const basic_string& str, size_type pos = 0) const noexcept;
        -:  269:    template <class T>
        -:  270:        size_type find(const T& t, size_type pos = 0) const noexcept; // C++17, noexcept as an extension
        -:  271:    size_type find(const value_type* s, size_type pos, size_type n) const noexcept;
        -:  272:    size_type find(const value_type* s, size_type pos = 0) const noexcept;
        -:  273:    size_type find(value_type c, size_type pos = 0) const noexcept;
        -:  274:
        -:  275:    size_type rfind(const basic_string& str, size_type pos = npos) const noexcept;
        -:  276:    template <class T>
        -:  277:        size_type rfind(const T& t, size_type pos = npos) const noexcept; // C++17, noexcept as an extension
        -:  278:    size_type rfind(const value_type* s, size_type pos, size_type n) const noexcept;
        -:  279:    size_type rfind(const value_type* s, size_type pos = npos) const noexcept;
        -:  280:    size_type rfind(value_type c, size_type pos = npos) const noexcept;
        -:  281:
        -:  282:    size_type find_first_of(const basic_string& str, size_type pos = 0) const noexcept;
        -:  283:    template <class T>
        -:  284:        size_type find_first_of(const T& t, size_type pos = 0) const noexcept; // C++17, noexcept as an extension
        -:  285:    size_type find_first_of(const value_type* s, size_type pos, size_type n) const noexcept;
        -:  286:    size_type find_first_of(const value_type* s, size_type pos = 0) const noexcept;
        -:  287:    size_type find_first_of(value_type c, size_type pos = 0) const noexcept;
        -:  288:
        -:  289:    size_type find_last_of(const basic_string& str, size_type pos = npos) const noexcept;
        -:  290:    template <class T>
        -:  291:        size_type find_last_of(const T& t, size_type pos = npos) const noexcept noexcept; // C++17, noexcept as an extension
        -:  292:    size_type find_last_of(const value_type* s, size_type pos, size_type n) const noexcept;
        -:  293:    size_type find_last_of(const value_type* s, size_type pos = npos) const noexcept;
        -:  294:    size_type find_last_of(value_type c, size_type pos = npos) const noexcept;
        -:  295:
        -:  296:    size_type find_first_not_of(const basic_string& str, size_type pos = 0) const noexcept;
        -:  297:    template <class T>
        -:  298:        size_type find_first_not_of(const T& t, size_type pos = 0) const noexcept; // C++17, noexcept as an extension
        -:  299:    size_type find_first_not_of(const value_type* s, size_type pos, size_type n) const noexcept;
        -:  300:    size_type find_first_not_of(const value_type* s, size_type pos = 0) const noexcept;
        -:  301:    size_type find_first_not_of(value_type c, size_type pos = 0) const noexcept;
        -:  302:
        -:  303:    size_type find_last_not_of(const basic_string& str, size_type pos = npos) const noexcept;
        -:  304:    template <class T>
        -:  305:        size_type find_last_not_of(const T& t, size_type pos = npos) const noexcept; // C++17, noexcept as an extension
        -:  306:    size_type find_last_not_of(const value_type* s, size_type pos, size_type n) const noexcept;
        -:  307:    size_type find_last_not_of(const value_type* s, size_type pos = npos) const noexcept;
        -:  308:    size_type find_last_not_of(value_type c, size_type pos = npos) const noexcept;
        -:  309:
        -:  310:    int compare(const basic_string& str) const noexcept;
        -:  311:    template <class T>
        -:  312:        int compare(const T& t) const noexcept;  // C++17, noexcept as an extension
        -:  313:    int compare(size_type pos1, size_type n1, const basic_string& str) const;
        -:  314:    template <class T>
        -:  315:        int compare(size_type pos1, size_type n1, const T& t) const;  // C++17
        -:  316:    int compare(size_type pos1, size_type n1, const basic_string& str,
        -:  317:                size_type pos2, size_type n2=npos) const; // C++14
        -:  318:    template <class T>
        -:  319:        int compare(size_type pos1, size_type n1, const T& t,
        -:  320:                    size_type pos2, size_type n2=npos) const; // C++17
        -:  321:    int compare(const value_type* s) const noexcept;
        -:  322:    int compare(size_type pos1, size_type n1, const value_type* s) const;
        -:  323:    int compare(size_type pos1, size_type n1, const value_type* s, size_type n2) const;
        -:  324:
        -:  325:    bool starts_with(basic_string_view<charT, traits> sv) const noexcept; // C++20
        -:  326:    bool starts_with(charT c) const noexcept;                             // C++20
        -:  327:    bool starts_with(const charT* s) const;                               // C++20
        -:  328:    bool ends_with(basic_string_view<charT, traits> sv) const noexcept;   // C++20
        -:  329:    bool ends_with(charT c) const noexcept;                               // C++20
        -:  330:    bool ends_with(const charT* s) const;                                 // C++20
        -:  331:
        -:  332:    constexpr bool contains(basic_string_view<charT, traits> sv) const noexcept; // C++2b
        -:  333:    constexpr bool contains(charT c) const noexcept;                             // C++2b
        -:  334:    constexpr bool contains(const charT* s) const;                               // C++2b
        -:  335:
        -:  336:    bool __invariants() const;
        -:  337:};
        -:  338:
        -:  339:template<class InputIterator,
        -:  340:         class Allocator = allocator<typename iterator_traits<InputIterator>::value_type>>
        -:  341:basic_string(InputIterator, InputIterator, Allocator = Allocator())
        -:  342:   -> basic_string<typename iterator_traits<InputIterator>::value_type,
        -:  343:                  char_traits<typename iterator_traits<InputIterator>::value_type>,
        -:  344:                  Allocator>;   // C++17
        -:  345:
        -:  346:template<class charT, class traits, class Allocator>
        -:  347:basic_string<charT, traits, Allocator>
        -:  348:operator+(const basic_string<charT, traits, Allocator>& lhs,
        -:  349:          const basic_string<charT, traits, Allocator>& rhs);
        -:  350:
        -:  351:template<class charT, class traits, class Allocator>
        -:  352:basic_string<charT, traits, Allocator>
        -:  353:operator+(const charT* lhs , const basic_string<charT,traits,Allocator>&rhs);
        -:  354:
        -:  355:template<class charT, class traits, class Allocator>
        -:  356:basic_string<charT, traits, Allocator>
        -:  357:operator+(charT lhs, const basic_string<charT,traits,Allocator>& rhs);
        -:  358:
        -:  359:template<class charT, class traits, class Allocator>
        -:  360:basic_string<charT, traits, Allocator>
        -:  361:operator+(const basic_string<charT, traits, Allocator>& lhs, const charT* rhs);
        -:  362:
        -:  363:template<class charT, class traits, class Allocator>
        -:  364:basic_string<charT, traits, Allocator>
        -:  365:operator+(const basic_string<charT, traits, Allocator>& lhs, charT rhs);
        -:  366:
        -:  367:template<class charT, class traits, class Allocator>
        -:  368:bool operator==(const basic_string<charT, traits, Allocator>& lhs,
        -:  369:                const basic_string<charT, traits, Allocator>& rhs) noexcept;
        -:  370:
        -:  371:template<class charT, class traits, class Allocator>
        -:  372:bool operator==(const charT* lhs, const basic_string<charT, traits, Allocator>& rhs) noexcept;
        -:  373:
        -:  374:template<class charT, class traits, class Allocator>
        -:  375:bool operator==(const basic_string<charT,traits,Allocator>& lhs, const charT* rhs) noexcept;
        -:  376:
        -:  377:template<class charT, class traits, class Allocator>
        -:  378:bool operator!=(const basic_string<charT,traits,Allocator>& lhs,
        -:  379:                const basic_string<charT, traits, Allocator>& rhs) noexcept;
        -:  380:
        -:  381:template<class charT, class traits, class Allocator>
        -:  382:bool operator!=(const charT* lhs, const basic_string<charT, traits, Allocator>& rhs) noexcept;
        -:  383:
        -:  384:template<class charT, class traits, class Allocator>
        -:  385:bool operator!=(const basic_string<charT, traits, Allocator>& lhs, const charT* rhs) noexcept;
        -:  386:
        -:  387:template<class charT, class traits, class Allocator>
        -:  388:bool operator< (const basic_string<charT, traits, Allocator>& lhs,
        -:  389:                const basic_string<charT, traits, Allocator>& rhs) noexcept;
        -:  390:
        -:  391:template<class charT, class traits, class Allocator>
        -:  392:bool operator< (const basic_string<charT, traits, Allocator>& lhs, const charT* rhs) noexcept;
        -:  393:
        -:  394:template<class charT, class traits, class Allocator>
        -:  395:bool operator< (const charT* lhs, const basic_string<charT, traits, Allocator>& rhs) noexcept;
        -:  396:
        -:  397:template<class charT, class traits, class Allocator>
        -:  398:bool operator> (const basic_string<charT, traits, Allocator>& lhs,
        -:  399:                const basic_string<charT, traits, Allocator>& rhs) noexcept;
        -:  400:
        -:  401:template<class charT, class traits, class Allocator>
        -:  402:bool operator> (const basic_string<charT, traits, Allocator>& lhs, const charT* rhs) noexcept;
        -:  403:
        -:  404:template<class charT, class traits, class Allocator>
        -:  405:bool operator> (const charT* lhs, const basic_string<charT, traits, Allocator>& rhs) noexcept;
        -:  406:
        -:  407:template<class charT, class traits, class Allocator>
        -:  408:bool operator<=(const basic_string<charT, traits, Allocator>& lhs,
        -:  409:                const basic_string<charT, traits, Allocator>& rhs) noexcept;
        -:  410:
        -:  411:template<class charT, class traits, class Allocator>
        -:  412:bool operator<=(const basic_string<charT, traits, Allocator>& lhs, const charT* rhs) noexcept;
        -:  413:
        -:  414:template<class charT, class traits, class Allocator>
        -:  415:bool operator<=(const charT* lhs, const basic_string<charT, traits, Allocator>& rhs) noexcept;
        -:  416:
        -:  417:template<class charT, class traits, class Allocator>
        -:  418:bool operator>=(const basic_string<charT, traits, Allocator>& lhs,
        -:  419:                const basic_string<charT, traits, Allocator>& rhs) noexcept;
        -:  420:
        -:  421:template<class charT, class traits, class Allocator>
        -:  422:bool operator>=(const basic_string<charT, traits, Allocator>& lhs, const charT* rhs) noexcept;
        -:  423:
        -:  424:template<class charT, class traits, class Allocator>
        -:  425:bool operator>=(const charT* lhs, const basic_string<charT, traits, Allocator>& rhs) noexcept;
        -:  426:
        -:  427:template<class charT, class traits, class Allocator>
        -:  428:void swap(basic_string<charT, traits, Allocator>& lhs,
        -:  429:          basic_string<charT, traits, Allocator>& rhs)
        -:  430:            noexcept(noexcept(lhs.swap(rhs)));
        -:  431:
        -:  432:template<class charT, class traits, class Allocator>
        -:  433:basic_istream<charT, traits>&
        -:  434:operator>>(basic_istream<charT, traits>& is, basic_string<charT, traits, Allocator>& str);
        -:  435:
        -:  436:template<class charT, class traits, class Allocator>
        -:  437:basic_ostream<charT, traits>&
        -:  438:operator<<(basic_ostream<charT, traits>& os, const basic_string<charT, traits, Allocator>& str);
        -:  439:
        -:  440:template<class charT, class traits, class Allocator>
        -:  441:basic_istream<charT, traits>&
        -:  442:getline(basic_istream<charT, traits>& is, basic_string<charT, traits, Allocator>& str,
        -:  443:        charT delim);
        -:  444:
        -:  445:template<class charT, class traits, class Allocator>
        -:  446:basic_istream<charT, traits>&
        -:  447:getline(basic_istream<charT, traits>& is, basic_string<charT, traits, Allocator>& str);
        -:  448:
        -:  449:template<class charT, class traits, class Allocator, class U>
        -:  450:typename basic_string<charT, traits, Allocator>::size_type
        -:  451:erase(basic_string<charT, traits, Allocator>& c, const U& value);    // C++20
        -:  452:template<class charT, class traits, class Allocator, class Predicate>
        -:  453:typename basic_string<charT, traits, Allocator>::size_type
        -:  454:erase_if(basic_string<charT, traits, Allocator>& c, Predicate pred); // C++20
        -:  455:
        -:  456:typedef basic_string<char>    string;
        -:  457:typedef basic_string<wchar_t> wstring;
        -:  458:typedef basic_string<char8_t> u8string; // C++20
        -:  459:typedef basic_string<char16_t> u16string;
        -:  460:typedef basic_string<char32_t> u32string;
        -:  461:
        -:  462:int                stoi  (const string& str, size_t* idx = nullptr, int base = 10);
        -:  463:long               stol  (const string& str, size_t* idx = nullptr, int base = 10);
        -:  464:unsigned long      stoul (const string& str, size_t* idx = nullptr, int base = 10);
        -:  465:long long          stoll (const string& str, size_t* idx = nullptr, int base = 10);
        -:  466:unsigned long long stoull(const string& str, size_t* idx = nullptr, int base = 10);
        -:  467:
        -:  468:float       stof (const string& str, size_t* idx = nullptr);
        -:  469:double      stod (const string& str, size_t* idx = nullptr);
        -:  470:long double stold(const string& str, size_t* idx = nullptr);
        -:  471:
        -:  472:string to_string(int val);
        -:  473:string to_string(unsigned val);
        -:  474:string to_string(long val);
        -:  475:string to_string(unsigned long val);
        -:  476:string to_string(long long val);
        -:  477:string to_string(unsigned long long val);
        -:  478:string to_string(float val);
        -:  479:string to_string(double val);
        -:  480:string to_string(long double val);
        -:  481:
        -:  482:int                stoi  (const wstring& str, size_t* idx = nullptr, int base = 10);
        -:  483:long               stol  (const wstring& str, size_t* idx = nullptr, int base = 10);
        -:  484:unsigned long      stoul (const wstring& str, size_t* idx = nullptr, int base = 10);
        -:  485:long long          stoll (const wstring& str, size_t* idx = nullptr, int base = 10);
        -:  486:unsigned long long stoull(const wstring& str, size_t* idx = nullptr, int base = 10);
        -:  487:
        -:  488:float       stof (const wstring& str, size_t* idx = nullptr);
        -:  489:double      stod (const wstring& str, size_t* idx = nullptr);
        -:  490:long double stold(const wstring& str, size_t* idx = nullptr);
        -:  491:
        -:  492:wstring to_wstring(int val);
        -:  493:wstring to_wstring(unsigned val);
        -:  494:wstring to_wstring(long val);
        -:  495:wstring to_wstring(unsigned long val);
        -:  496:wstring to_wstring(long long val);
        -:  497:wstring to_wstring(unsigned long long val);
        -:  498:wstring to_wstring(float val);
        -:  499:wstring to_wstring(double val);
        -:  500:wstring to_wstring(long double val);
        -:  501:
        -:  502:template <> struct hash<string>;
        -:  503:template <> struct hash<u8string>; // C++20
        -:  504:template <> struct hash<u16string>;
        -:  505:template <> struct hash<u32string>;
        -:  506:template <> struct hash<wstring>;
        -:  507:
        -:  508:basic_string<char>     operator "" s( const char *str,     size_t len ); // C++14
        -:  509:basic_string<wchar_t>  operator "" s( const wchar_t *str,  size_t len ); // C++14
        -:  510:basic_string<char8_t>  operator "" s( const char8_t *str,  size_t len ); // C++20
        -:  511:basic_string<char16_t> operator "" s( const char16_t *str, size_t len ); // C++14
        -:  512:basic_string<char32_t> operator "" s( const char32_t *str, size_t len ); // C++14
        -:  513:
        -:  514:}  // std
        -:  515:
        -:  516:*/
        -:  517:
        -:  518:#include <__config>
        -:  519:#include <__debug>
        -:  520:#include <__functional_base>
        -:  521:#include <__iterator/wrap_iter.h>
        -:  522:#include <algorithm>
        -:  523:#include <compare>
        -:  524:#include <cstdio>  // EOF
        -:  525:#include <cstdlib>
        -:  526:#include <cstring>
        -:  527:#include <initializer_list>
        -:  528:#include <iosfwd>
        -:  529:#include <iterator>
        -:  530:#include <memory>
        -:  531:#include <stdexcept>
        -:  532:#include <string_view>
        -:  533:#include <type_traits>
        -:  534:#include <utility>
        -:  535:#include <version>
        -:  536:
        -:  537:#ifndef _LIBCPP_HAS_NO_WIDE_CHARACTERS
        -:  538:#   include <cwchar>
        -:  539:#endif
        -:  540:
        -:  541:#ifndef _LIBCPP_HAS_NO_UNICODE_CHARS
        -:  542:# include <cstdint>
        -:  543:#endif
        -:  544:
        -:  545:#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)
        -:  546:#pragma GCC system_header
        -:  547:#endif
        -:  548:
        -:  549:_LIBCPP_PUSH_MACROS
        -:  550:#include <__undef_macros>
        -:  551:
        -:  552:
        -:  553:_LIBCPP_BEGIN_NAMESPACE_STD
        -:  554:
        -:  555:// fpos
        -:  556:
        -:  557:template <class _StateT>
        -:  558:class _LIBCPP_TEMPLATE_VIS fpos
        -:  559:{
        -:  560:private:
        -:  561:    _StateT __st_;
        -:  562:    streamoff __off_;
        -:  563:public:
        -:  564:    _LIBCPP_INLINE_VISIBILITY fpos(streamoff __off = streamoff()) : __st_(), __off_(__off) {}
        -:  565:
        -:  566:    _LIBCPP_INLINE_VISIBILITY operator streamoff() const {return __off_;}
        -:  567:
        -:  568:    _LIBCPP_INLINE_VISIBILITY _StateT state() const {return __st_;}
        -:  569:    _LIBCPP_INLINE_VISIBILITY void state(_StateT __st) {__st_ = __st;}
        -:  570:
        -:  571:    _LIBCPP_INLINE_VISIBILITY fpos& operator+=(streamoff __off) {__off_ += __off; return *this;}
        -:  572:    _LIBCPP_INLINE_VISIBILITY fpos  operator+ (streamoff __off) const {fpos __t(*this); __t += __off; return __t;}
        -:  573:    _LIBCPP_INLINE_VISIBILITY fpos& operator-=(streamoff __off) {__off_ -= __off; return *this;}
        -:  574:    _LIBCPP_INLINE_VISIBILITY fpos  operator- (streamoff __off) const {fpos __t(*this); __t -= __off; return __t;}
        -:  575:};
        -:  576:
        -:  577:template <class _StateT>
        -:  578:inline _LIBCPP_INLINE_VISIBILITY
        -:  579:streamoff operator-(const fpos<_StateT>& __x, const fpos<_StateT>& __y)
        -:  580:    {return streamoff(__x) - streamoff(__y);}
        -:  581:
        -:  582:template <class _StateT>
        -:  583:inline _LIBCPP_INLINE_VISIBILITY
        -:  584:bool operator==(const fpos<_StateT>& __x, const fpos<_StateT>& __y)
        -:  585:    {return streamoff(__x) == streamoff(__y);}
        -:  586:
        -:  587:template <class _StateT>
        -:  588:inline _LIBCPP_INLINE_VISIBILITY
        -:  589:bool operator!=(const fpos<_StateT>& __x, const fpos<_StateT>& __y)
        -:  590:    {return streamoff(__x) != streamoff(__y);}
        -:  591:
        -:  592:// basic_string
        -:  593:
        -:  594:template<class _CharT, class _Traits, class _Allocator>
        -:  595:basic_string<_CharT, _Traits, _Allocator>
        -:  596:operator+(const basic_string<_CharT, _Traits, _Allocator>& __x,
        -:  597:          const basic_string<_CharT, _Traits, _Allocator>& __y);
        -:  598:
        -:  599:template<class _CharT, class _Traits, class _Allocator>
        -:  600:basic_string<_CharT, _Traits, _Allocator>
        -:  601:operator+(const _CharT* __x, const basic_string<_CharT,_Traits,_Allocator>& __y);
        -:  602:
        -:  603:template<class _CharT, class _Traits, class _Allocator>
        -:  604:basic_string<_CharT, _Traits, _Allocator>
        -:  605:operator+(_CharT __x, const basic_string<_CharT,_Traits,_Allocator>& __y);
        -:  606:
        -:  607:template<class _CharT, class _Traits, class _Allocator>
        -:  608:inline _LIBCPP_INLINE_VISIBILITY
        -:  609:basic_string<_CharT, _Traits, _Allocator>
        -:  610:operator+(const basic_string<_CharT, _Traits, _Allocator>& __x, const _CharT* __y);
        -:  611:
        -:  612:template<class _CharT, class _Traits, class _Allocator>
        -:  613:basic_string<_CharT, _Traits, _Allocator>
        -:  614:operator+(const basic_string<_CharT, _Traits, _Allocator>& __x, _CharT __y);
        -:  615:
        -:  616:_LIBCPP_EXTERN_TEMPLATE(_LIBCPP_FUNC_VIS string operator+<char, char_traits<char>, allocator<char> >(char const*, string const&))
        -:  617:
        -:  618:template <bool>
        -:  619:class _LIBCPP_TEMPLATE_VIS __basic_string_common
        -:  620:{
        -:  621:protected:
        -:  622:    _LIBCPP_NORETURN void __throw_length_error() const;
        -:  623:    _LIBCPP_NORETURN void __throw_out_of_range() const;
        -:  624:};
        -:  625:
        -:  626:template <bool __b>
        -:  627:void
        -:  628:__basic_string_common<__b>::__throw_length_error() const
        -:  629:{
        -:  630:    _VSTD::__throw_length_error("basic_string");
        -:  631:}
        -:  632:
        -:  633:template <bool __b>
        -:  634:void
        -:  635:__basic_string_common<__b>::__throw_out_of_range() const
        -:  636:{
        -:  637:    _VSTD::__throw_out_of_range("basic_string");
        -:  638:}
        -:  639:
        -:  640:_LIBCPP_EXTERN_TEMPLATE(class _LIBCPP_EXTERN_TEMPLATE_TYPE_VIS __basic_string_common<true>)
        -:  641:
        -:  642:template <class _Iter>
        -:  643:struct __string_is_trivial_iterator : public false_type {};
        -:  644:
        -:  645:template <class _Tp>
        -:  646:struct __string_is_trivial_iterator<_Tp*>
        -:  647:    : public is_arithmetic<_Tp> {};
        -:  648:
        -:  649:template <class _Iter>
        -:  650:struct __string_is_trivial_iterator<__wrap_iter<_Iter> >
        -:  651:    : public __string_is_trivial_iterator<_Iter> {};
        -:  652:
        -:  653:template <class _CharT, class _Traits, class _Tp>
        -:  654:struct __can_be_converted_to_string_view : public _BoolConstant<
        -:  655:      is_convertible<const _Tp&, basic_string_view<_CharT, _Traits> >::value &&
        -:  656:     !is_convertible<const _Tp&, const _CharT*>::value
        -:  657:    > {};
        -:  658:
        -:  659:#ifdef _LIBCPP_ABI_ALTERNATE_STRING_LAYOUT
        -:  660:
        -:  661:template <class _CharT, size_t = sizeof(_CharT)>
        -:  662:struct __padding
        -:  663:{
        -:  664:    unsigned char __xx[sizeof(_CharT)-1];
        -:  665:};
        -:  666:
        -:  667:template <class _CharT>
        -:  668:struct __padding<_CharT, 1>
        -:  669:{
        -:  670:};
        -:  671:
        -:  672:#endif // _LIBCPP_ABI_ALTERNATE_STRING_LAYOUT
        -:  673:
        -:  674:#ifndef _LIBCPP_HAS_NO_CHAR8_T
        -:  675:typedef basic_string<char8_t> u8string;
        -:  676:#endif
        -:  677:
        -:  678:#ifndef _LIBCPP_HAS_NO_UNICODE_CHARS
        -:  679:typedef basic_string<char16_t> u16string;
        -:  680:typedef basic_string<char32_t> u32string;
        -:  681:#endif // _LIBCPP_HAS_NO_UNICODE_CHARS
        -:  682:
        -:  683:template<class _CharT, class _Traits, class _Allocator>
        -:  684:class
        -:  685:    _LIBCPP_TEMPLATE_VIS
        -:  686:#ifndef _LIBCPP_HAS_NO_CHAR8_T
        -:  687:    _LIBCPP_PREFERRED_NAME(u8string)
        -:  688:#endif
        -:  689:#ifndef _LIBCPP_HAS_NO_UNICODE_CHARS
        -:  690:    _LIBCPP_PREFERRED_NAME(u16string)
        -:  691:    _LIBCPP_PREFERRED_NAME(u32string)
        -:  692:#endif
        -:  693:    basic_string
        -:  694:    : private __basic_string_common<true>
        -:  695:{
        -:  696:public:
        -:  697:    typedef basic_string                                 __self;
        -:  698:    typedef basic_string_view<_CharT, _Traits>           __self_view;
        -:  699:    typedef _Traits                                      traits_type;
        -:  700:    typedef _CharT                                       value_type;
        -:  701:    typedef _Allocator                                   allocator_type;
        -:  702:    typedef allocator_traits<allocator_type>             __alloc_traits;
        -:  703:    typedef typename __alloc_traits::size_type           size_type;
        -:  704:    typedef typename __alloc_traits::difference_type     difference_type;
        -:  705:    typedef value_type&                                  reference;
        -:  706:    typedef const value_type&                            const_reference;
        -:  707:    typedef typename __alloc_traits::pointer             pointer;
        -:  708:    typedef typename __alloc_traits::const_pointer       const_pointer;
        -:  709:
        -:  710:    static_assert((!is_array<value_type>::value), "Character type of basic_string must not be an array");
        -:  711:    static_assert(( is_standard_layout<value_type>::value), "Character type of basic_string must be standard-layout");
        -:  712:    static_assert(( is_trivial<value_type>::value), "Character type of basic_string must be trivial");
        -:  713:    static_assert(( is_same<_CharT, typename traits_type::char_type>::value),
        -:  714:                  "traits_type::char_type must be the same type as CharT");
        -:  715:    static_assert(( is_same<typename allocator_type::value_type, value_type>::value),
        -:  716:                  "Allocator::value_type must be same type as value_type");
        -:  717:
        -:  718:    typedef __wrap_iter<pointer>                         iterator;
        -:  719:    typedef __wrap_iter<const_pointer>                   const_iterator;
        -:  720:    typedef _VSTD::reverse_iterator<iterator>             reverse_iterator;
        -:  721:    typedef _VSTD::reverse_iterator<const_iterator>       const_reverse_iterator;
        -:  722:
        -:  723:private:
        -:  724:
        -:  725:#ifdef _LIBCPP_ABI_ALTERNATE_STRING_LAYOUT
        -:  726:
        -:  727:    struct __long
        -:  728:    {
        -:  729:        pointer   __data_;
        -:  730:        size_type __size_;
        -:  731:        size_type __cap_;
        -:  732:    };
        -:  733:
        -:  734:#ifdef _LIBCPP_BIG_ENDIAN
        -:  735:    static const size_type __short_mask = 0x01;
        -:  736:    static const size_type __long_mask  = 0x1ul;
        -:  737:#else  // _LIBCPP_BIG_ENDIAN
        -:  738:    static const size_type __short_mask = 0x80;
        -:  739:    static const size_type __long_mask  = ~(size_type(~0) >> 1);
        -:  740:#endif // _LIBCPP_BIG_ENDIAN
        -:  741:
        -:  742:    enum {__min_cap = (sizeof(__long) - 1)/sizeof(value_type) > 2 ?
        -:  743:                      (sizeof(__long) - 1)/sizeof(value_type) : 2};
        -:  744:
        -:  745:    struct __short
        -:  746:    {
        -:  747:        value_type __data_[__min_cap];
        -:  748:        struct
        -:  749:            : __padding<value_type>
        -:  750:        {
        -:  751:            unsigned char __size_;
        -:  752:        };
        -:  753:    };
        -:  754:
        -:  755:#else
        -:  756:
        -:  757:    struct __long
        -:  758:    {
        -:  759:        size_type __cap_;
        -:  760:        size_type __size_;
        -:  761:        pointer   __data_;
        -:  762:    };
        -:  763:
        -:  764:#ifdef _LIBCPP_BIG_ENDIAN
        -:  765:    static const size_type __short_mask = 0x80;
        -:  766:    static const size_type __long_mask  = ~(size_type(~0) >> 1);
        -:  767:#else  // _LIBCPP_BIG_ENDIAN
        -:  768:    static const size_type __short_mask = 0x01;
        -:  769:    static const size_type __long_mask  = 0x1ul;
        -:  770:#endif // _LIBCPP_BIG_ENDIAN
        -:  771:
        -:  772:    enum {__min_cap = (sizeof(__long) - 1)/sizeof(value_type) > 2 ?
        -:  773:                      (sizeof(__long) - 1)/sizeof(value_type) : 2};
        -:  774:
        -:  775:    struct __short
        -:  776:    {
        -:  777:        union
        -:  778:        {
        -:  779:            unsigned char __size_;
        -:  780:            value_type __lx;
        -:  781:        };
        -:  782:        value_type __data_[__min_cap];
        -:  783:    };
        -:  784:
        -:  785:#endif // _LIBCPP_ABI_ALTERNATE_STRING_LAYOUT
        -:  786:
        -:  787:    union __ulx{__long __lx; __short __lxx;};
        -:  788:
        -:  789:    enum {__n_words = sizeof(__ulx) / sizeof(size_type)};
        -:  790:
        -:  791:    struct __raw
        -:  792:    {
        -:  793:        size_type __words[__n_words];
        -:  794:    };
        -:  795:
        -:  796:    struct __rep
        -:  797:    {
        -:  798:        union
        -:  799:        {
        -:  800:            __long  __l;
        -:  801:            __short __s;
        -:  802:            __raw   __r;
        -:  803:        };
        -:  804:    };
        -:  805:
        -:  806:    __compressed_pair<__rep, allocator_type> __r_;
        -:  807:
        -:  808:public:
        -:  809:    _LIBCPP_TEMPLATE_DATA_VIS
        -:  810:    static const size_type npos = -1;
        -:  811:
        -:  812:    _LIBCPP_INLINE_VISIBILITY basic_string()
        -:  813:        _NOEXCEPT_(is_nothrow_default_constructible<allocator_type>::value);
        -:  814:
        -:  815:    _LIBCPP_INLINE_VISIBILITY explicit basic_string(const allocator_type& __a)
        -:  816:#if _LIBCPP_STD_VER <= 14
        -:  817:        _NOEXCEPT_(is_nothrow_copy_constructible<allocator_type>::value);
        -:  818:#else
        -:  819:        _NOEXCEPT;
        -:  820:#endif
        -:  821:
        -:  822:    basic_string(const basic_string& __str);
        -:  823:    basic_string(const basic_string& __str, const allocator_type& __a);
        -:  824:
        -:  825:#ifndef _LIBCPP_CXX03_LANG
        -:  826:    _LIBCPP_INLINE_VISIBILITY
        -:  827:    basic_string(basic_string&& __str)
        -:  828:#if _LIBCPP_STD_VER <= 14
        -:  829:        _NOEXCEPT_(is_nothrow_move_constructible<allocator_type>::value);
        -:  830:#else
        -:  831:        _NOEXCEPT;
        -:  832:#endif
        -:  833:
        -:  834:    _LIBCPP_INLINE_VISIBILITY
        -:  835:    basic_string(basic_string&& __str, const allocator_type& __a);
        -:  836:#endif // _LIBCPP_CXX03_LANG
        -:  837:
        -:  838:    template <class = _EnableIf<__is_allocator<_Allocator>::value, nullptr_t> >
        -:  839:    _LIBCPP_INLINE_VISIBILITY
function _ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1IDnEEPKc called 4 returned 100% blocks executed 100%
function _ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2IDnEEPKc called 4 returned 100% blocks executed 100%
        8:  840:    basic_string(const _CharT* __s) : __r_(__default_init_tag(), __default_init_tag()) {
        -:  841:      _LIBCPP_ASSERT(__s != nullptr, "basic_string(const char*) detected nullptr");
        4:  842:      __init(__s, traits_type::length(__s));
        -:  843:#   if _LIBCPP_DEBUG_LEVEL == 2
        -:  844:      __get_db()->__insert_c(this);
        -:  845:#   endif
        8:  846:    }
        4:  846-block  0
        4:  846-block  1
        -:  847:
        -:  848:    template <class = _EnableIf<__is_allocator<_Allocator>::value, nullptr_t> >
        -:  849:        _LIBCPP_INLINE_VISIBILITY
        -:  850:        basic_string(const _CharT* __s, const _Allocator& __a);
        -:  851:
        -:  852:#if _LIBCPP_STD_VER > 20
        -:  853:    basic_string(nullptr_t) = delete;
        -:  854:#endif
        -:  855:
        -:  856:    _LIBCPP_INLINE_VISIBILITY
        -:  857:    basic_string(const _CharT* __s, size_type __n);
        -:  858:    _LIBCPP_INLINE_VISIBILITY
        -:  859:    basic_string(const _CharT* __s, size_type __n, const _Allocator& __a);
        -:  860:    _LIBCPP_INLINE_VISIBILITY
        -:  861:    basic_string(size_type __n, _CharT __c);
        -:  862:
        -:  863:    template <class = _EnableIf<__is_allocator<_Allocator>::value, nullptr_t> >
        -:  864:        _LIBCPP_INLINE_VISIBILITY
        -:  865:        basic_string(size_type __n, _CharT __c, const _Allocator& __a);
        -:  866:
        -:  867:    basic_string(const basic_string& __str, size_type __pos, size_type __n,
        -:  868:                 const _Allocator& __a = _Allocator());
        -:  869:    _LIBCPP_INLINE_VISIBILITY
        -:  870:    basic_string(const basic_string& __str, size_type __pos,
        -:  871:                 const _Allocator& __a = _Allocator());
        -:  872:
        -:  873:    template<class _Tp, class = _EnableIf<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value && !__is_same_uncvref<_Tp, basic_string>::value> >
        -:  874:        _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS
        -:  875:        basic_string(const _Tp& __t, size_type __pos, size_type __n,
        -:  876:                     const allocator_type& __a = allocator_type());
        -:  877:
        -:  878:    template<class _Tp, class = _EnableIf<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value &&
        -:  879:                                          !__is_same_uncvref<_Tp, basic_string>::value> >
        -:  880:        _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS
        -:  881:        explicit basic_string(const _Tp& __t);
        -:  882:
        -:  883:    template<class _Tp, class = _EnableIf<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value && !__is_same_uncvref<_Tp, basic_string>::value> >
        -:  884:        _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS
        -:  885:        explicit basic_string(const _Tp& __t, const allocator_type& __a);
        -:  886:
        -:  887:    template<class _InputIterator, class = _EnableIf<__is_cpp17_input_iterator<_InputIterator>::value> >
        -:  888:        _LIBCPP_INLINE_VISIBILITY
        -:  889:        basic_string(_InputIterator __first, _InputIterator __last);
        -:  890:    template<class _InputIterator, class = _EnableIf<__is_cpp17_input_iterator<_InputIterator>::value> >
        -:  891:        _LIBCPP_INLINE_VISIBILITY
        -:  892:        basic_string(_InputIterator __first, _InputIterator __last, const allocator_type& __a);
        -:  893:#ifndef _LIBCPP_CXX03_LANG
        -:  894:    _LIBCPP_INLINE_VISIBILITY
        -:  895:    basic_string(initializer_list<_CharT> __il);
        -:  896:    _LIBCPP_INLINE_VISIBILITY
        -:  897:    basic_string(initializer_list<_CharT> __il, const _Allocator& __a);
        -:  898:#endif // _LIBCPP_CXX03_LANG
        -:  899:
        -:  900:    inline ~basic_string();
        -:  901:
        -:  902:    _LIBCPP_INLINE_VISIBILITY
        -:  903:    operator __self_view() const _NOEXCEPT { return __self_view(data(), size()); }
        -:  904:
        -:  905:    basic_string& operator=(const basic_string& __str);
        -:  906:
        -:  907:    template <class _Tp, class = _EnableIf<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value && !__is_same_uncvref<_Tp, basic_string>::value> >
        -:  908:    basic_string& operator=(const _Tp& __t)
        -:  909:        {__self_view __sv = __t; return assign(__sv);}
        -:  910:
        -:  911:#ifndef _LIBCPP_CXX03_LANG
        -:  912:    _LIBCPP_INLINE_VISIBILITY
        -:  913:    basic_string& operator=(basic_string&& __str)
        -:  914:        _NOEXCEPT_((__noexcept_move_assign_container<_Allocator, __alloc_traits>::value));
        -:  915:     _LIBCPP_INLINE_VISIBILITY
        -:  916:    basic_string& operator=(initializer_list<value_type> __il) {return assign(__il.begin(), __il.size());}
        -:  917:#endif
        -:  918:    _LIBCPP_INLINE_VISIBILITY basic_string& operator=(const value_type* __s) {return assign(__s);}
        -:  919:#if _LIBCPP_STD_VER > 20
        -:  920:    basic_string& operator=(nullptr_t) = delete;
        -:  921:#endif
        -:  922:    basic_string& operator=(value_type __c);
        -:  923:
        -:  924:#if _LIBCPP_DEBUG_LEVEL == 2
        -:  925:    _LIBCPP_INLINE_VISIBILITY
        -:  926:    iterator begin() _NOEXCEPT
        -:  927:        {return iterator(this, __get_pointer());}
        -:  928:    _LIBCPP_INLINE_VISIBILITY
        -:  929:    const_iterator begin() const _NOEXCEPT
        -:  930:        {return const_iterator(this, __get_pointer());}
        -:  931:    _LIBCPP_INLINE_VISIBILITY
        -:  932:    iterator end() _NOEXCEPT
        -:  933:        {return iterator(this, __get_pointer() + size());}
        -:  934:    _LIBCPP_INLINE_VISIBILITY
        -:  935:    const_iterator end() const _NOEXCEPT
        -:  936:        {return const_iterator(this, __get_pointer() + size());}
        -:  937:#else
        -:  938:    _LIBCPP_INLINE_VISIBILITY
        -:  939:    iterator begin() _NOEXCEPT
        -:  940:        {return iterator(__get_pointer());}
        -:  941:    _LIBCPP_INLINE_VISIBILITY
        -:  942:    const_iterator begin() const _NOEXCEPT
        -:  943:        {return const_iterator(__get_pointer());}
        -:  944:    _LIBCPP_INLINE_VISIBILITY
        -:  945:    iterator end() _NOEXCEPT
        -:  946:        {return iterator(__get_pointer() + size());}
        -:  947:    _LIBCPP_INLINE_VISIBILITY
        -:  948:    const_iterator end() const _NOEXCEPT
        -:  949:        {return const_iterator(__get_pointer() + size());}
        -:  950:#endif // _LIBCPP_DEBUG_LEVEL == 2
        -:  951:    _LIBCPP_INLINE_VISIBILITY
        -:  952:    reverse_iterator rbegin() _NOEXCEPT
        -:  953:        {return reverse_iterator(end());}
        -:  954:    _LIBCPP_INLINE_VISIBILITY
        -:  955:    const_reverse_iterator rbegin() const _NOEXCEPT
        -:  956:        {return const_reverse_iterator(end());}
        -:  957:    _LIBCPP_INLINE_VISIBILITY
        -:  958:    reverse_iterator rend() _NOEXCEPT
        -:  959:        {return reverse_iterator(begin());}
        -:  960:    _LIBCPP_INLINE_VISIBILITY
        -:  961:    const_reverse_iterator rend() const _NOEXCEPT
        -:  962:        {return const_reverse_iterator(begin());}
        -:  963:
        -:  964:    _LIBCPP_INLINE_VISIBILITY
        -:  965:    const_iterator cbegin() const _NOEXCEPT
        -:  966:        {return begin();}
        -:  967:    _LIBCPP_INLINE_VISIBILITY
        -:  968:    const_iterator cend() const _NOEXCEPT
        -:  969:        {return end();}
        -:  970:    _LIBCPP_INLINE_VISIBILITY
        -:  971:    const_reverse_iterator crbegin() const _NOEXCEPT
        -:  972:        {return rbegin();}
        -:  973:    _LIBCPP_INLINE_VISIBILITY
        -:  974:    const_reverse_iterator crend() const _NOEXCEPT
        -:  975:        {return rend();}
        -:  976:
        -:  977:    _LIBCPP_INLINE_VISIBILITY size_type size() const _NOEXCEPT
        -:  978:        {return __is_long() ? __get_long_size() : __get_short_size();}
        -:  979:    _LIBCPP_INLINE_VISIBILITY size_type length() const _NOEXCEPT {return size();}
        -:  980:    _LIBCPP_INLINE_VISIBILITY size_type max_size() const _NOEXCEPT;
        -:  981:    _LIBCPP_INLINE_VISIBILITY size_type capacity() const _NOEXCEPT
        -:  982:        {return (__is_long() ? __get_long_cap()
        -:  983:                             : static_cast<size_type>(__min_cap)) - 1;}
        -:  984:
        -:  985:    void resize(size_type __n, value_type __c);
        -:  986:    _LIBCPP_INLINE_VISIBILITY void resize(size_type __n) {resize(__n, value_type());}
        -:  987:
        -:  988:    void reserve(size_type __requested_capacity);
        -:  989:    _LIBCPP_INLINE_VISIBILITY void __resize_default_init(size_type __n);
        -:  990:
        -:  991:    _LIBCPP_DEPRECATED_IN_CXX20 _LIBCPP_INLINE_VISIBILITY
        -:  992:    void reserve() _NOEXCEPT {shrink_to_fit();}
        -:  993:    _LIBCPP_INLINE_VISIBILITY
        -:  994:    void shrink_to_fit() _NOEXCEPT;
        -:  995:    _LIBCPP_INLINE_VISIBILITY
        -:  996:    void clear() _NOEXCEPT;
        -:  997:    _LIBCPP_NODISCARD_AFTER_CXX17 _LIBCPP_INLINE_VISIBILITY
        -:  998:    bool empty() const _NOEXCEPT {return size() == 0;}
        -:  999:
        -: 1000:    _LIBCPP_INLINE_VISIBILITY const_reference operator[](size_type __pos) const _NOEXCEPT;
        -: 1001:    _LIBCPP_INLINE_VISIBILITY reference       operator[](size_type __pos)       _NOEXCEPT;
        -: 1002:
        -: 1003:    const_reference at(size_type __n) const;
        -: 1004:    reference       at(size_type __n);
        -: 1005:
        -: 1006:    _LIBCPP_INLINE_VISIBILITY basic_string& operator+=(const basic_string& __str) {return append(__str);}
        -: 1007:
        -: 1008:    template <class _Tp>
        -: 1009:    _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS
        -: 1010:    _EnableIf
        -: 1011:        <
        -: 1012:            __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value
        -: 1013:            && !__is_same_uncvref<_Tp, basic_string >::value,
        -: 1014:            basic_string&
        -: 1015:        >
        -: 1016:                                            operator+=(const _Tp& __t)            {__self_view __sv = __t; return append(__sv);}
        -: 1017:    _LIBCPP_INLINE_VISIBILITY basic_string& operator+=(const value_type* __s)     {return append(__s);}
        -: 1018:    _LIBCPP_INLINE_VISIBILITY basic_string& operator+=(value_type __c)            {push_back(__c); return *this;}
        -: 1019:#ifndef _LIBCPP_CXX03_LANG
        -: 1020:    _LIBCPP_INLINE_VISIBILITY basic_string& operator+=(initializer_list<value_type> __il) {return append(__il);}
        -: 1021:#endif // _LIBCPP_CXX03_LANG
        -: 1022:
        -: 1023:    _LIBCPP_INLINE_VISIBILITY
        -: 1024:    basic_string& append(const basic_string& __str);
        -: 1025:
        -: 1026:    template <class _Tp>
        -: 1027:    _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS
        -: 1028:    _EnableIf<
        -: 1029:            __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value
        -: 1030:            && !__is_same_uncvref<_Tp, basic_string>::value,
        -: 1031:            basic_string&
        -: 1032:        >
        -: 1033:                  append(const _Tp& __t) { __self_view __sv = __t; return append(__sv.data(), __sv.size()); }
        -: 1034:    basic_string& append(const basic_string& __str, size_type __pos, size_type __n=npos);
        -: 1035:
        -: 1036:    template <class _Tp>
        -: 1037:    _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS
        -: 1038:    _EnableIf
        -: 1039:        <
        -: 1040:            __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value
        -: 1041:            && !__is_same_uncvref<_Tp, basic_string>::value,
        -: 1042:            basic_string&
        -: 1043:        >
        -: 1044:                  append(const _Tp& __t, size_type __pos, size_type __n=npos);
        -: 1045:    basic_string& append(const value_type* __s, size_type __n);
        -: 1046:    basic_string& append(const value_type* __s);
        -: 1047:    basic_string& append(size_type __n, value_type __c);
        -: 1048:
        -: 1049:    _LIBCPP_INLINE_VISIBILITY
        -: 1050:    void __append_default_init(size_type __n);
        -: 1051:
        -: 1052:    template<class _InputIterator>
        -: 1053:    _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS
        -: 1054:    _EnableIf
        -: 1055:        <
        -: 1056:            __is_exactly_cpp17_input_iterator<_InputIterator>::value,
        -: 1057:            basic_string&
        -: 1058:        >
        -: 1059:    _LIBCPP_INLINE_VISIBILITY
        -: 1060:    append(_InputIterator __first, _InputIterator __last) {
        -: 1061:      const basic_string __temp(__first, __last, __alloc());
        -: 1062:      append(__temp.data(), __temp.size());
        -: 1063:      return *this;
        -: 1064:    }
        -: 1065:    template<class _ForwardIterator>
        -: 1066:    _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS
        -: 1067:    _EnableIf
        -: 1068:        <
        -: 1069:            __is_cpp17_forward_iterator<_ForwardIterator>::value,
        -: 1070:            basic_string&
        -: 1071:        >
        -: 1072:    _LIBCPP_INLINE_VISIBILITY
        -: 1073:    append(_ForwardIterator __first, _ForwardIterator __last);
        -: 1074:
        -: 1075:#ifndef _LIBCPP_CXX03_LANG
        -: 1076:    _LIBCPP_INLINE_VISIBILITY
        -: 1077:    basic_string& append(initializer_list<value_type> __il) {return append(__il.begin(), __il.size());}
        -: 1078:#endif // _LIBCPP_CXX03_LANG
        -: 1079:
        -: 1080:    void push_back(value_type __c);
        -: 1081:    _LIBCPP_INLINE_VISIBILITY
        -: 1082:    void pop_back();
        -: 1083:    _LIBCPP_INLINE_VISIBILITY reference       front() _NOEXCEPT;
        -: 1084:    _LIBCPP_INLINE_VISIBILITY const_reference front() const _NOEXCEPT;
        -: 1085:    _LIBCPP_INLINE_VISIBILITY reference       back() _NOEXCEPT;
        -: 1086:    _LIBCPP_INLINE_VISIBILITY const_reference back() const _NOEXCEPT;
        -: 1087:
        -: 1088:    template <class _Tp>
        -: 1089:    _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS
        -: 1090:    _EnableIf
        -: 1091:        <
        -: 1092:            __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value,
        -: 1093:            basic_string&
        -: 1094:        >
        -: 1095:                 assign(const _Tp & __t) { __self_view __sv = __t; return assign(__sv.data(), __sv.size()); }
        -: 1096:    _LIBCPP_INLINE_VISIBILITY
        -: 1097:    basic_string& assign(const basic_string& __str) { return *this = __str; }
        -: 1098:#ifndef _LIBCPP_CXX03_LANG
        -: 1099:    _LIBCPP_INLINE_VISIBILITY
        -: 1100:    basic_string& assign(basic_string&& __str)
        -: 1101:        _NOEXCEPT_((__noexcept_move_assign_container<_Allocator, __alloc_traits>::value))
        -: 1102:        {*this = _VSTD::move(__str); return *this;}
        -: 1103:#endif
        -: 1104:    basic_string& assign(const basic_string& __str, size_type __pos, size_type __n=npos);
        -: 1105:    template <class _Tp>
        -: 1106:    _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS
        -: 1107:    _EnableIf
        -: 1108:        <
        -: 1109:            __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value
        -: 1110:            && !__is_same_uncvref<_Tp, basic_string>::value,
        -: 1111:            basic_string&
        -: 1112:        >
        -: 1113:                  assign(const _Tp & __t, size_type __pos, size_type __n=npos);
        -: 1114:    basic_string& assign(const value_type* __s, size_type __n);
        -: 1115:    basic_string& assign(const value_type* __s);
        -: 1116:    basic_string& assign(size_type __n, value_type __c);
        -: 1117:    template<class _InputIterator>
        -: 1118:    _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS
        -: 1119:    _EnableIf
        -: 1120:        <
        -: 1121:            __is_exactly_cpp17_input_iterator<_InputIterator>::value,
        -: 1122:            basic_string&
        -: 1123:        >
        -: 1124:        assign(_InputIterator __first, _InputIterator __last);
        -: 1125:    template<class _ForwardIterator>
        -: 1126:    _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS
        -: 1127:    _EnableIf
        -: 1128:        <
        -: 1129:            __is_cpp17_forward_iterator<_ForwardIterator>::value,
        -: 1130:            basic_string&
        -: 1131:        >
        -: 1132:        assign(_ForwardIterator __first, _ForwardIterator __last);
        -: 1133:#ifndef _LIBCPP_CXX03_LANG
        -: 1134:    _LIBCPP_INLINE_VISIBILITY
        -: 1135:    basic_string& assign(initializer_list<value_type> __il) {return assign(__il.begin(), __il.size());}
        -: 1136:#endif // _LIBCPP_CXX03_LANG
        -: 1137:
        -: 1138:    _LIBCPP_INLINE_VISIBILITY
        -: 1139:    basic_string& insert(size_type __pos1, const basic_string& __str);
        -: 1140:
        -: 1141:    template <class _Tp>
        -: 1142:    _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS
        -: 1143:    _EnableIf
        -: 1144:        <
        -: 1145:            __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value,
        -: 1146:            basic_string&
        -: 1147:        >
        -: 1148:                 insert(size_type __pos1, const _Tp& __t)
        -: 1149:    { __self_view __sv = __t; return insert(__pos1, __sv.data(), __sv.size()); }
        -: 1150:
        -: 1151:    template <class _Tp>
        -: 1152:    _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS
        -: 1153:    _EnableIf
        -: 1154:        <
        -: 1155:            __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value && !__is_same_uncvref<_Tp, basic_string>::value,
        -: 1156:            basic_string&
        -: 1157:        >
        -: 1158:                  insert(size_type __pos1, const _Tp& __t, size_type __pos2, size_type __n=npos);
        -: 1159:    basic_string& insert(size_type __pos1, const basic_string& __str, size_type __pos2, size_type __n=npos);
        -: 1160:    basic_string& insert(size_type __pos, const value_type* __s, size_type __n);
        -: 1161:    basic_string& insert(size_type __pos, const value_type* __s);
        -: 1162:    basic_string& insert(size_type __pos, size_type __n, value_type __c);
        -: 1163:    iterator      insert(const_iterator __pos, value_type __c);
        -: 1164:    _LIBCPP_INLINE_VISIBILITY
        -: 1165:    iterator      insert(const_iterator __pos, size_type __n, value_type __c);
        -: 1166:    template<class _InputIterator>
        -: 1167:    _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS
        -: 1168:    _EnableIf
        -: 1169:        <
        -: 1170:            __is_exactly_cpp17_input_iterator<_InputIterator>::value,
        -: 1171:            iterator
        -: 1172:        >
        -: 1173:        insert(const_iterator __pos, _InputIterator __first, _InputIterator __last);
        -: 1174:    template<class _ForwardIterator>
        -: 1175:    _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS
        -: 1176:    _EnableIf
        -: 1177:        <
        -: 1178:            __is_cpp17_forward_iterator<_ForwardIterator>::value,
        -: 1179:            iterator
        -: 1180:        >
        -: 1181:        insert(const_iterator __pos, _ForwardIterator __first, _ForwardIterator __last);
        -: 1182:#ifndef _LIBCPP_CXX03_LANG
        -: 1183:    _LIBCPP_INLINE_VISIBILITY
        -: 1184:    iterator insert(const_iterator __pos, initializer_list<value_type> __il)
        -: 1185:                    {return insert(__pos, __il.begin(), __il.end());}
        -: 1186:#endif // _LIBCPP_CXX03_LANG
        -: 1187:
        -: 1188:    basic_string& erase(size_type __pos = 0, size_type __n = npos);
        -: 1189:    _LIBCPP_INLINE_VISIBILITY
        -: 1190:    iterator      erase(const_iterator __pos);
        -: 1191:    _LIBCPP_INLINE_VISIBILITY
        -: 1192:    iterator      erase(const_iterator __first, const_iterator __last);
        -: 1193:
        -: 1194:    _LIBCPP_INLINE_VISIBILITY
        -: 1195:    basic_string& replace(size_type __pos1, size_type __n1, const basic_string& __str);
        -: 1196:
        -: 1197:    template <class _Tp>
        -: 1198:    _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS
        -: 1199:    _EnableIf
        -: 1200:        <
        -: 1201:            __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value,
        -: 1202:            basic_string&
        -: 1203:        >
        -: 1204:                  replace(size_type __pos1, size_type __n1, const _Tp& __t) { __self_view __sv = __t; return replace(__pos1, __n1, __sv.data(), __sv.size()); }
        -: 1205:    basic_string& replace(size_type __pos1, size_type __n1, const basic_string& __str, size_type __pos2, size_type __n2=npos);
        -: 1206:    template <class _Tp>
        -: 1207:    _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS
        -: 1208:    _EnableIf
        -: 1209:        <
        -: 1210:            __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value  && !__is_same_uncvref<_Tp, basic_string>::value,
        -: 1211:            basic_string&
        -: 1212:        >
        -: 1213:                  replace(size_type __pos1, size_type __n1, const _Tp& __t, size_type __pos2, size_type __n2=npos);
        -: 1214:    basic_string& replace(size_type __pos, size_type __n1, const value_type* __s, size_type __n2);
        -: 1215:    basic_string& replace(size_type __pos, size_type __n1, const value_type* __s);
        -: 1216:    basic_string& replace(size_type __pos, size_type __n1, size_type __n2, value_type __c);
        -: 1217:    _LIBCPP_INLINE_VISIBILITY
        -: 1218:    basic_string& replace(const_iterator __i1, const_iterator __i2, const basic_string& __str);
        -: 1219:
        -: 1220:    template <class _Tp>
        -: 1221:    _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS
        -: 1222:    _EnableIf
        -: 1223:        <
        -: 1224:            __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value,
        -: 1225:            basic_string&
        -: 1226:        >
        -: 1227:                  replace(const_iterator __i1, const_iterator __i2, const _Tp& __t) { __self_view __sv = __t; return replace(__i1 - begin(), __i2 - __i1, __sv); }
        -: 1228:
        -: 1229:    _LIBCPP_INLINE_VISIBILITY
        -: 1230:    basic_string& replace(const_iterator __i1, const_iterator __i2, const value_type* __s, size_type __n);
        -: 1231:    _LIBCPP_INLINE_VISIBILITY
        -: 1232:    basic_string& replace(const_iterator __i1, const_iterator __i2, const value_type* __s);
        -: 1233:    _LIBCPP_INLINE_VISIBILITY
        -: 1234:    basic_string& replace(const_iterator __i1, const_iterator __i2, size_type __n, value_type __c);
        -: 1235:    template<class _InputIterator>
        -: 1236:    _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS
        -: 1237:    _EnableIf
        -: 1238:        <
        -: 1239:            __is_cpp17_input_iterator<_InputIterator>::value,
        -: 1240:            basic_string&
        -: 1241:        >
        -: 1242:        replace(const_iterator __i1, const_iterator __i2, _InputIterator __j1, _InputIterator __j2);
        -: 1243:#ifndef _LIBCPP_CXX03_LANG
        -: 1244:    _LIBCPP_INLINE_VISIBILITY
        -: 1245:    basic_string& replace(const_iterator __i1, const_iterator __i2, initializer_list<value_type> __il)
        -: 1246:        {return replace(__i1, __i2, __il.begin(), __il.end());}
        -: 1247:#endif // _LIBCPP_CXX03_LANG
        -: 1248:
        -: 1249:    size_type copy(value_type* __s, size_type __n, size_type __pos = 0) const;
        -: 1250:    _LIBCPP_INLINE_VISIBILITY
        -: 1251:    basic_string substr(size_type __pos = 0, size_type __n = npos) const;
        -: 1252:
        -: 1253:    _LIBCPP_INLINE_VISIBILITY
        -: 1254:    void swap(basic_string& __str)
        -: 1255:#if _LIBCPP_STD_VER >= 14
        -: 1256:        _NOEXCEPT;
        -: 1257:#else
        -: 1258:        _NOEXCEPT_(!__alloc_traits::propagate_on_container_swap::value ||
        -: 1259:                    __is_nothrow_swappable<allocator_type>::value);
        -: 1260:#endif
        -: 1261:
        -: 1262:    _LIBCPP_INLINE_VISIBILITY
function _ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5c_strEv called 0 returned 0% blocks executed 0%
    #####: 1263:    const value_type* c_str() const _NOEXCEPT {return data();}
    $$$$$: 1263-block  0
        -: 1264:    _LIBCPP_INLINE_VISIBILITY
function _ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4dataEv called 0 returned 0% blocks executed 0%
    #####: 1265:    const value_type* data() const _NOEXCEPT  {return _VSTD::__to_address(__get_pointer());}
    $$$$$: 1265-block  0
        -: 1266:#if _LIBCPP_STD_VER > 14 || defined(_LIBCPP_BUILDING_LIBRARY)
        -: 1267:    _LIBCPP_INLINE_VISIBILITY
        -: 1268:    value_type* data()             _NOEXCEPT  {return _VSTD::__to_address(__get_pointer());}
        -: 1269:#endif
        -: 1270:
        -: 1271:    _LIBCPP_INLINE_VISIBILITY
        -: 1272:    allocator_type get_allocator() const _NOEXCEPT {return __alloc();}
        -: 1273:
        -: 1274:    _LIBCPP_INLINE_VISIBILITY
        -: 1275:    size_type find(const basic_string& __str, size_type __pos = 0) const _NOEXCEPT;
        -: 1276:
        -: 1277:    template <class _Tp>
        -: 1278:    _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS
        -: 1279:    _EnableIf
        -: 1280:        <
        -: 1281:            __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value,
        -: 1282:            size_type
        -: 1283:        >
        -: 1284:              find(const _Tp& __t, size_type __pos = 0) const _NOEXCEPT;
        -: 1285:    size_type find(const value_type* __s, size_type __pos, size_type __n) const _NOEXCEPT;
        -: 1286:    _LIBCPP_INLINE_VISIBILITY
        -: 1287:    size_type find(const value_type* __s, size_type __pos = 0) const _NOEXCEPT;
        -: 1288:    size_type find(value_type __c, size_type __pos = 0) const _NOEXCEPT;
        -: 1289:
        -: 1290:    _LIBCPP_INLINE_VISIBILITY
        -: 1291:    size_type rfind(const basic_string& __str, size_type __pos = npos) const _NOEXCEPT;
        -: 1292:
        -: 1293:    template <class _Tp>
        -: 1294:    _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS
        -: 1295:    _EnableIf
        -: 1296:        <
        -: 1297:            __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value,
        -: 1298:            size_type
        -: 1299:        >
        -: 1300:              rfind(const _Tp& __t, size_type __pos = npos) const _NOEXCEPT;
        -: 1301:    size_type rfind(const value_type* __s, size_type __pos, size_type __n) const _NOEXCEPT;
        -: 1302:    _LIBCPP_INLINE_VISIBILITY
        -: 1303:    size_type rfind(const value_type* __s, size_type __pos = npos) const _NOEXCEPT;
        -: 1304:    size_type rfind(value_type __c, size_type __pos = npos) const _NOEXCEPT;
        -: 1305:
        -: 1306:    _LIBCPP_INLINE_VISIBILITY
        -: 1307:    size_type find_first_of(const basic_string& __str, size_type __pos = 0) const _NOEXCEPT;
        -: 1308:
        -: 1309:    template <class _Tp>
        -: 1310:    _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS
        -: 1311:    _EnableIf
        -: 1312:        <
        -: 1313:            __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value,
        -: 1314:            size_type
        -: 1315:        >
        -: 1316:              find_first_of(const _Tp& __t, size_type __pos = 0) const _NOEXCEPT;
        -: 1317:    size_type find_first_of(const value_type* __s, size_type __pos, size_type __n) const _NOEXCEPT;
        -: 1318:    _LIBCPP_INLINE_VISIBILITY
        -: 1319:    size_type find_first_of(const value_type* __s, size_type __pos = 0) const _NOEXCEPT;
        -: 1320:    _LIBCPP_INLINE_VISIBILITY
        -: 1321:    size_type find_first_of(value_type __c, size_type __pos = 0) const _NOEXCEPT;
        -: 1322:
        -: 1323:    _LIBCPP_INLINE_VISIBILITY
        -: 1324:    size_type find_last_of(const basic_string& __str, size_type __pos = npos) const _NOEXCEPT;
        -: 1325:
        -: 1326:    template <class _Tp>
        -: 1327:    _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS
        -: 1328:    _EnableIf
        -: 1329:        <
        -: 1330:            __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value,
        -: 1331:            size_type
        -: 1332:        >
        -: 1333:              find_last_of(const _Tp& __t, size_type __pos = npos) const _NOEXCEPT;
        -: 1334:    size_type find_last_of(const value_type* __s, size_type __pos, size_type __n) const _NOEXCEPT;
        -: 1335:    _LIBCPP_INLINE_VISIBILITY
        -: 1336:    size_type find_last_of(const value_type* __s, size_type __pos = npos) const _NOEXCEPT;
        -: 1337:    _LIBCPP_INLINE_VISIBILITY
        -: 1338:    size_type find_last_of(value_type __c, size_type __pos = npos) const _NOEXCEPT;
        -: 1339:
        -: 1340:    _LIBCPP_INLINE_VISIBILITY
        -: 1341:    size_type find_first_not_of(const basic_string& __str, size_type __pos = 0) const _NOEXCEPT;
        -: 1342:
        -: 1343:    template <class _Tp>
        -: 1344:    _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS
        -: 1345:    _EnableIf
        -: 1346:        <
        -: 1347:            __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value,
        -: 1348:            size_type
        -: 1349:        >
        -: 1350:              find_first_not_of(const _Tp &__t, size_type __pos = 0) const _NOEXCEPT;
        -: 1351:    size_type find_first_not_of(const value_type* __s, size_type __pos, size_type __n) const _NOEXCEPT;
        -: 1352:    _LIBCPP_INLINE_VISIBILITY
        -: 1353:    size_type find_first_not_of(const value_type* __s, size_type __pos = 0) const _NOEXCEPT;
        -: 1354:    _LIBCPP_INLINE_VISIBILITY
        -: 1355:    size_type find_first_not_of(value_type __c, size_type __pos = 0) const _NOEXCEPT;
        -: 1356:
        -: 1357:    _LIBCPP_INLINE_VISIBILITY
        -: 1358:    size_type find_last_not_of(const basic_string& __str, size_type __pos = npos) const _NOEXCEPT;
        -: 1359:
        -: 1360:    template <class _Tp>
        -: 1361:    _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS
        -: 1362:    _EnableIf
        -: 1363:        <
        -: 1364:            __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value,
        -: 1365:            size_type
        -: 1366:        >
        -: 1367:              find_last_not_of(const _Tp& __t, size_type __pos = npos) const _NOEXCEPT;
        -: 1368:    size_type find_last_not_of(const value_type* __s, size_type __pos, size_type __n) const _NOEXCEPT;
        -: 1369:    _LIBCPP_INLINE_VISIBILITY
        -: 1370:    size_type find_last_not_of(const value_type* __s, size_type __pos = npos) const _NOEXCEPT;
        -: 1371:    _LIBCPP_INLINE_VISIBILITY
        -: 1372:    size_type find_last_not_of(value_type __c, size_type __pos = npos) const _NOEXCEPT;
        -: 1373:
        -: 1374:    _LIBCPP_INLINE_VISIBILITY
        -: 1375:    int compare(const basic_string& __str) const _NOEXCEPT;
        -: 1376:
        -: 1377:    template <class _Tp>
        -: 1378:    _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS
        -: 1379:    _EnableIf
        -: 1380:        <
        -: 1381:            __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value,
        -: 1382:            int
        -: 1383:        >
        -: 1384:        compare(const _Tp &__t) const _NOEXCEPT;
        -: 1385:
        -: 1386:    template <class _Tp>
        -: 1387:    _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS
        -: 1388:    _EnableIf
        -: 1389:        <
        -: 1390:            __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value,
        -: 1391:            int
        -: 1392:        >
        -: 1393:         compare(size_type __pos1, size_type __n1, const _Tp& __t) const;
        -: 1394:
        -: 1395:    _LIBCPP_INLINE_VISIBILITY
        -: 1396:    int compare(size_type __pos1, size_type __n1, const basic_string& __str) const;
        -: 1397:    int compare(size_type __pos1, size_type __n1, const basic_string& __str, size_type __pos2, size_type __n2=npos) const;
        -: 1398:
        -: 1399:    template <class _Tp>
        -: 1400:    inline _LIBCPP_INLINE_VISIBILITY
        -: 1401:        _EnableIf
        -: 1402:        <
        -: 1403:            __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value  && !__is_same_uncvref<_Tp, basic_string>::value,
        -: 1404:            int
        -: 1405:        >
        -: 1406:        compare(size_type __pos1, size_type __n1, const _Tp& __t, size_type __pos2, size_type __n2=npos) const;
        -: 1407:    int compare(const value_type* __s) const _NOEXCEPT;
        -: 1408:    int compare(size_type __pos1, size_type __n1, const value_type* __s) const;
        -: 1409:    int compare(size_type __pos1, size_type __n1, const value_type* __s, size_type __n2) const;
        -: 1410:
        -: 1411:#if _LIBCPP_STD_VER > 17
        -: 1412:    _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY
        -: 1413:    bool starts_with(__self_view __sv) const _NOEXCEPT
        -: 1414:    { return __self_view(data(), size()).starts_with(__sv); }
        -: 1415:
        -: 1416:    _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY
        -: 1417:    bool starts_with(value_type __c) const _NOEXCEPT
        -: 1418:    { return !empty() && _Traits::eq(front(), __c); }
        -: 1419:
        -: 1420:    _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY
        -: 1421:    bool starts_with(const value_type* __s) const _NOEXCEPT
        -: 1422:    { return starts_with(__self_view(__s)); }
        -: 1423:
        -: 1424:    _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY
        -: 1425:    bool ends_with(__self_view __sv) const _NOEXCEPT
        -: 1426:    { return __self_view(data(), size()).ends_with( __sv); }
        -: 1427:
        -: 1428:    _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY
        -: 1429:    bool ends_with(value_type __c) const _NOEXCEPT
        -: 1430:    { return !empty() && _Traits::eq(back(), __c); }
        -: 1431:
        -: 1432:    _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY
        -: 1433:    bool ends_with(const value_type* __s) const _NOEXCEPT
        -: 1434:    { return ends_with(__self_view(__s)); }
        -: 1435:#endif
        -: 1436:
        -: 1437:#if _LIBCPP_STD_VER > 20
        -: 1438:    constexpr _LIBCPP_INLINE_VISIBILITY
        -: 1439:    bool contains(__self_view __sv) const noexcept
        -: 1440:    { return __self_view(data(), size()).contains(__sv); }
        -: 1441:
        -: 1442:    constexpr _LIBCPP_INLINE_VISIBILITY
        -: 1443:    bool contains(value_type __c) const noexcept
        -: 1444:    { return __self_view(data(), size()).contains(__c); }
        -: 1445:
        -: 1446:    constexpr _LIBCPP_INLINE_VISIBILITY
        -: 1447:    bool contains(const value_type* __s) const
        -: 1448:    { return __self_view(data(), size()).contains(__s); }
        -: 1449:#endif
        -: 1450:
        -: 1451:    _LIBCPP_INLINE_VISIBILITY bool __invariants() const;
        -: 1452:
        -: 1453:    _LIBCPP_INLINE_VISIBILITY void __clear_and_shrink() _NOEXCEPT;
        -: 1454:
        -: 1455:    _LIBCPP_INLINE_VISIBILITY void __shrink_or_extend(size_type __target_capacity);
        -: 1456:
        -: 1457:    _LIBCPP_INLINE_VISIBILITY
function _ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__is_longEv called 0 returned 0% blocks executed 0%
    #####: 1458:    bool __is_long() const _NOEXCEPT
    #####: 1459:        {return bool(__r_.first().__s.__size_ & __short_mask);}
    $$$$$: 1459-block  0
        -: 1460:
        -: 1461:#if _LIBCPP_DEBUG_LEVEL == 2
        -: 1462:
        -: 1463:    bool __dereferenceable(const const_iterator* __i) const;
        -: 1464:    bool __decrementable(const const_iterator* __i) const;
        -: 1465:    bool __addable(const const_iterator* __i, ptrdiff_t __n) const;
        -: 1466:    bool __subscriptable(const const_iterator* __i, ptrdiff_t __n) const;
        -: 1467:
        -: 1468:#endif // _LIBCPP_DEBUG_LEVEL == 2
        -: 1469:
        -: 1470:private:
        -: 1471:    _LIBCPP_CONSTEXPR _LIBCPP_HIDE_FROM_ABI static bool __fits_in_sso(size_type __sz) {
        -: 1472:        // SSO is disabled during constant evaluation because `__is_long` isn't constexpr friendly
        -: 1473:        return !__libcpp_is_constant_evaluated() && (__sz < __min_cap);
        -: 1474:    }
        -: 1475:
        -: 1476:    template <class _ForwardIterator>
        -: 1477:    _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX11
        -: 1478:    iterator __insert_from_safe_copy(size_type __n, size_type __ip, _ForwardIterator __first, _ForwardIterator __last) {
        -: 1479:        size_type __sz = size();
        -: 1480:        size_type __cap = capacity();
        -: 1481:        value_type* __p;
        -: 1482:        if (__cap - __sz >= __n)
        -: 1483:        {
        -: 1484:            __p = std::__to_address(__get_pointer());
        -: 1485:            size_type __n_move = __sz - __ip;
        -: 1486:            if (__n_move != 0)
        -: 1487:                traits_type::move(__p + __ip + __n, __p + __ip, __n_move);
        -: 1488:        }
        -: 1489:        else
        -: 1490:        {
        -: 1491:            __grow_by(__cap, __sz + __n - __cap, __sz, __ip, 0, __n);
        -: 1492:            __p = std::__to_address(__get_long_pointer());
        -: 1493:        }
        -: 1494:        __sz += __n;
        -: 1495:        __set_size(__sz);
        -: 1496:        traits_type::assign(__p[__sz], value_type());
        -: 1497:        for (__p += __ip; __first != __last; ++__p, ++__first)
        -: 1498:            traits_type::assign(*__p, *__first);
        -: 1499:
        -: 1500:        return begin() + __ip;
        -: 1501:    }
        -: 1502:
        -: 1503:    _LIBCPP_HIDE_FROM_ABI allocator_type& __alloc() _NOEXCEPT { return __r_.second(); }
        -: 1504:    _LIBCPP_HIDE_FROM_ABI const allocator_type& __alloc() const _NOEXCEPT { return __r_.second(); }
        -: 1505:
        -: 1506:#ifdef _LIBCPP_ABI_ALTERNATE_STRING_LAYOUT
        -: 1507:
        -: 1508:    _LIBCPP_INLINE_VISIBILITY
        -: 1509:    void __set_short_size(size_type __s) _NOEXCEPT
        -: 1510:#   ifdef _LIBCPP_BIG_ENDIAN
        -: 1511:        {__r_.first().__s.__size_ = (unsigned char)(__s << 1);}
        -: 1512:#   else
        -: 1513:        {__r_.first().__s.__size_ = (unsigned char)(__s);}
        -: 1514:#   endif
        -: 1515:
        -: 1516:    _LIBCPP_INLINE_VISIBILITY
        -: 1517:    size_type __get_short_size() const _NOEXCEPT
        -: 1518:#   ifdef _LIBCPP_BIG_ENDIAN
        -: 1519:        {return __r_.first().__s.__size_ >> 1;}
        -: 1520:#   else
        -: 1521:        {return __r_.first().__s.__size_;}
        -: 1522:#   endif
        -: 1523:
        -: 1524:#else  // _LIBCPP_ABI_ALTERNATE_STRING_LAYOUT
        -: 1525:
        -: 1526:    _LIBCPP_INLINE_VISIBILITY
        -: 1527:    void __set_short_size(size_type __s) _NOEXCEPT
        -: 1528:#   ifdef _LIBCPP_BIG_ENDIAN
        -: 1529:        {__r_.first().__s.__size_ = (unsigned char)(__s);}
        -: 1530:#   else
        -: 1531:        {__r_.first().__s.__size_ = (unsigned char)(__s << 1);}
        -: 1532:#   endif
        -: 1533:
        -: 1534:    _LIBCPP_INLINE_VISIBILITY
        -: 1535:    size_type __get_short_size() const _NOEXCEPT
        -: 1536:#   ifdef _LIBCPP_BIG_ENDIAN
        -: 1537:        {return __r_.first().__s.__size_;}
        -: 1538:#   else
        -: 1539:        {return __r_.first().__s.__size_ >> 1;}
        -: 1540:#   endif
        -: 1541:
        -: 1542:#endif // _LIBCPP_ABI_ALTERNATE_STRING_LAYOUT
        -: 1543:
        -: 1544:    _LIBCPP_INLINE_VISIBILITY
        -: 1545:    void __set_long_size(size_type __s) _NOEXCEPT
        -: 1546:        {__r_.first().__l.__size_ = __s;}
        -: 1547:    _LIBCPP_INLINE_VISIBILITY
        -: 1548:    size_type __get_long_size() const _NOEXCEPT
        -: 1549:        {return __r_.first().__l.__size_;}
        -: 1550:    _LIBCPP_INLINE_VISIBILITY
        -: 1551:    void __set_size(size_type __s) _NOEXCEPT
        -: 1552:        {if (__is_long()) __set_long_size(__s); else __set_short_size(__s);}
        -: 1553:
        -: 1554:    _LIBCPP_INLINE_VISIBILITY
        -: 1555:    void __set_long_cap(size_type __s) _NOEXCEPT
        -: 1556:        {__r_.first().__l.__cap_  = __long_mask | __s;}
        -: 1557:    _LIBCPP_INLINE_VISIBILITY
        -: 1558:    size_type __get_long_cap() const _NOEXCEPT
        -: 1559:        {return __r_.first().__l.__cap_ & size_type(~__long_mask);}
        -: 1560:
        -: 1561:    _LIBCPP_INLINE_VISIBILITY
        -: 1562:    void __set_long_pointer(pointer __p) _NOEXCEPT
        -: 1563:        {__r_.first().__l.__data_ = __p;}
        -: 1564:    _LIBCPP_INLINE_VISIBILITY
        -: 1565:    pointer __get_long_pointer() _NOEXCEPT
        -: 1566:        {return __r_.first().__l.__data_;}
        -: 1567:    _LIBCPP_INLINE_VISIBILITY
function _ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE18__get_long_pointerEv called 0 returned 0% blocks executed 0%
    #####: 1568:    const_pointer __get_long_pointer() const _NOEXCEPT
    #####: 1569:        {return __r_.first().__l.__data_;}
    $$$$$: 1569-block  0
        -: 1570:    _LIBCPP_INLINE_VISIBILITY
        -: 1571:    pointer __get_short_pointer() _NOEXCEPT
        -: 1572:        {return pointer_traits<pointer>::pointer_to(__r_.first().__s.__data_[0]);}
        -: 1573:    _LIBCPP_INLINE_VISIBILITY
function _ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE19__get_short_pointerEv called 0 returned 0% blocks executed 0%
    #####: 1574:    const_pointer __get_short_pointer() const _NOEXCEPT
    #####: 1575:        {return pointer_traits<const_pointer>::pointer_to(__r_.first().__s.__data_[0]);}
    $$$$$: 1575-block  0
        -: 1576:    _LIBCPP_INLINE_VISIBILITY
        -: 1577:    pointer __get_pointer() _NOEXCEPT
        -: 1578:        {return __is_long() ? __get_long_pointer() : __get_short_pointer();}
        -: 1579:    _LIBCPP_INLINE_VISIBILITY
function _ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE13__get_pointerEv called 0 returned 0% blocks executed 0%
    #####: 1580:    const_pointer __get_pointer() const _NOEXCEPT
    #####: 1581:        {return __is_long() ? __get_long_pointer() : __get_short_pointer();}
    $$$$$: 1581-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1581-block  1
    $$$$$: 1581-block  2
    $$$$$: 1581-block  3
        -: 1582:
        -: 1583:    _LIBCPP_INLINE_VISIBILITY
function _ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__zeroEv called 0 returned 0% blocks executed 0%
    #####: 1584:    void __zero() _NOEXCEPT
        -: 1585:        {
    #####: 1586:            size_type (&__a)[__n_words] = __r_.first().__r.__words;
    #####: 1587:            for (unsigned __i = 0; __i < __n_words; ++__i)
    $$$$$: 1587-block  0
    $$$$$: 1587-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1587-block  2
    #####: 1588:                __a[__i] = 0;
    $$$$$: 1588-block  0
    #####: 1589:        }
    $$$$$: 1589-block  0
        -: 1590:
        -: 1591:    template <size_type __a> static
        -: 1592:        _LIBCPP_INLINE_VISIBILITY
        -: 1593:        size_type __align_it(size_type __s) _NOEXCEPT
        -: 1594:            {return (__s + (__a-1)) & ~(__a-1);}
        -: 1595:    enum {__alignment = 16};
        -: 1596:    static _LIBCPP_INLINE_VISIBILITY
        -: 1597:    size_type __recommend(size_type __s) _NOEXCEPT
        -: 1598:        {
        -: 1599:        if (__s < __min_cap) return static_cast<size_type>(__min_cap) - 1;
        -: 1600:        size_type __guess = __align_it<sizeof(value_type) < __alignment ?
        -: 1601:                     __alignment/sizeof(value_type) : 1 > (__s+1) - 1;
        -: 1602:        if (__guess == __min_cap) ++__guess;
        -: 1603:        return __guess;
        -: 1604:        }
        -: 1605:
        -: 1606:    inline
        -: 1607:    void __init(const value_type* __s, size_type __sz, size_type __reserve);
        -: 1608:    inline
        -: 1609:    void __init(const value_type* __s, size_type __sz);
        -: 1610:    inline
        -: 1611:    void __init(size_type __n, value_type __c);
        -: 1612:
        -: 1613:    // Slow path for the (inlined) copy constructor for 'long' strings.
        -: 1614:    // Always externally instantiated and not inlined.
        -: 1615:    // Requires that __s is zero terminated.
        -: 1616:    // The main reason for this function to exist is because for unstable, we
        -: 1617:    // want to allow inlining of the copy constructor. However, we don't want
        -: 1618:    // to call the __init() functions as those are marked as inline which may
        -: 1619:    // result in over-aggressive inlining by the compiler, where our aim is
        -: 1620:    // to only inline the fast path code directly in the ctor.
        -: 1621:    void __init_copy_ctor_external(const value_type* __s, size_type __sz);
        -: 1622:
        -: 1623:    template <class _InputIterator>
        -: 1624:    inline
        -: 1625:    _EnableIf
        -: 1626:    <
        -: 1627:        __is_exactly_cpp17_input_iterator<_InputIterator>::value
        -: 1628:    >
        -: 1629:    __init(_InputIterator __first, _InputIterator __last);
        -: 1630:
        -: 1631:    template <class _ForwardIterator>
        -: 1632:    inline
        -: 1633:    _EnableIf
        -: 1634:    <
        -: 1635:        __is_cpp17_forward_iterator<_ForwardIterator>::value
        -: 1636:    >
        -: 1637:    __init(_ForwardIterator __first, _ForwardIterator __last);
        -: 1638:
        -: 1639:    void __grow_by(size_type __old_cap, size_type __delta_cap, size_type __old_sz,
        -: 1640:                   size_type __n_copy,  size_type __n_del,     size_type __n_add = 0);
        -: 1641:    void __grow_by_and_replace(size_type __old_cap, size_type __delta_cap, size_type __old_sz,
        -: 1642:                               size_type __n_copy,  size_type __n_del,
        -: 1643:                               size_type __n_add, const value_type* __p_new_stuff);
        -: 1644:
        -: 1645:    // __assign_no_alias is invoked for assignment operations where we
        -: 1646:    // have proof that the input does not alias the current instance.
        -: 1647:    // For example, operator=(basic_string) performs a 'self' check.
        -: 1648:    template <bool __is_short>
        -: 1649:    basic_string& __assign_no_alias(const value_type* __s, size_type __n);
        -: 1650:
        -: 1651:    _LIBCPP_INLINE_VISIBILITY
        -: 1652:    void __erase_to_end(size_type __pos);
        -: 1653:
        -: 1654:    // __erase_external_with_move is invoked for erase() invocations where
        -: 1655:    // `n ~= npos`, likely requiring memory moves on the string data.
        -: 1656:    void __erase_external_with_move(size_type __pos, size_type __n);
        -: 1657:
        -: 1658:    _LIBCPP_INLINE_VISIBILITY
        -: 1659:    void __copy_assign_alloc(const basic_string& __str)
        -: 1660:        {__copy_assign_alloc(__str, integral_constant<bool,
        -: 1661:                      __alloc_traits::propagate_on_container_copy_assignment::value>());}
        -: 1662:
        -: 1663:    _LIBCPP_INLINE_VISIBILITY
        -: 1664:    void __copy_assign_alloc(const basic_string& __str, true_type)
        -: 1665:        {
        -: 1666:            if (__alloc() == __str.__alloc())
        -: 1667:                __alloc() = __str.__alloc();
        -: 1668:            else
        -: 1669:            {
        -: 1670:                if (!__str.__is_long())
        -: 1671:                {
        -: 1672:                    __clear_and_shrink();
        -: 1673:                    __alloc() = __str.__alloc();
        -: 1674:                }
        -: 1675:                else
        -: 1676:                {
        -: 1677:                    allocator_type __a = __str.__alloc();
        -: 1678:                    pointer __p = __alloc_traits::allocate(__a, __str.__get_long_cap());
        -: 1679:                    __clear_and_shrink();
        -: 1680:                    __alloc() = _VSTD::move(__a);
        -: 1681:                    __set_long_pointer(__p);
        -: 1682:                    __set_long_cap(__str.__get_long_cap());
        -: 1683:                    __set_long_size(__str.size());
        -: 1684:                }
        -: 1685:            }
        -: 1686:        }
        -: 1687:
        -: 1688:    _LIBCPP_INLINE_VISIBILITY
        -: 1689:    void __copy_assign_alloc(const basic_string&, false_type) _NOEXCEPT
        -: 1690:        {}
        -: 1691:
        -: 1692:#ifndef _LIBCPP_CXX03_LANG
        -: 1693:    _LIBCPP_INLINE_VISIBILITY
        -: 1694:    void __move_assign(basic_string& __str, false_type)
        -: 1695:        _NOEXCEPT_(__alloc_traits::is_always_equal::value);
        -: 1696:    _LIBCPP_INLINE_VISIBILITY
        -: 1697:    void __move_assign(basic_string& __str, true_type)
        -: 1698:#if _LIBCPP_STD_VER > 14
        -: 1699:        _NOEXCEPT;
        -: 1700:#else
        -: 1701:        _NOEXCEPT_(is_nothrow_move_assignable<allocator_type>::value);
        -: 1702:#endif
        -: 1703:#endif
        -: 1704:
        -: 1705:    _LIBCPP_INLINE_VISIBILITY
        -: 1706:    void
        -: 1707:    __move_assign_alloc(basic_string& __str)
        -: 1708:        _NOEXCEPT_(
        -: 1709:            !__alloc_traits::propagate_on_container_move_assignment::value ||
        -: 1710:            is_nothrow_move_assignable<allocator_type>::value)
        -: 1711:    {__move_assign_alloc(__str, integral_constant<bool,
        -: 1712:                      __alloc_traits::propagate_on_container_move_assignment::value>());}
        -: 1713:
        -: 1714:    _LIBCPP_INLINE_VISIBILITY
        -: 1715:    void __move_assign_alloc(basic_string& __c, true_type)
        -: 1716:        _NOEXCEPT_(is_nothrow_move_assignable<allocator_type>::value)
        -: 1717:        {
        -: 1718:            __alloc() = _VSTD::move(__c.__alloc());
        -: 1719:        }
        -: 1720:
        -: 1721:    _LIBCPP_INLINE_VISIBILITY
        -: 1722:    void __move_assign_alloc(basic_string&, false_type)
        -: 1723:        _NOEXCEPT
        -: 1724:        {}
        -: 1725:
        -: 1726:    basic_string& __assign_external(const value_type* __s);
        -: 1727:    basic_string& __assign_external(const value_type* __s, size_type __n);
        -: 1728:
        -: 1729:    // Assigns the value in __s, guaranteed to be __n < __min_cap in length.
        -: 1730:    inline basic_string& __assign_short(const value_type* __s, size_type __n) {
        -: 1731:      pointer __p = __is_long()
        -: 1732:                        ? (__set_long_size(__n), __get_long_pointer())
        -: 1733:                        : (__set_short_size(__n), __get_short_pointer());
        -: 1734:      traits_type::move(_VSTD::__to_address(__p), __s, __n);
        -: 1735:      traits_type::assign(__p[__n], value_type());
        -: 1736:      return *this;
        -: 1737:    }
        -: 1738:
        -: 1739:    _LIBCPP_INLINE_VISIBILITY void __invalidate_all_iterators();
        -: 1740:    _LIBCPP_INLINE_VISIBILITY void __invalidate_iterators_past(size_type);
        -: 1741:
        -: 1742:    template<class _Tp>
        -: 1743:    _LIBCPP_INLINE_VISIBILITY
        -: 1744:    bool __addr_in_range(_Tp&& __t) const {
        -: 1745:        const volatile void *__p = _VSTD::addressof(__t);
        -: 1746:        return data() <= __p && __p <= data() + size();
        -: 1747:    }
        -: 1748:
        -: 1749:    _LIBCPP_NORETURN _LIBCPP_HIDE_FROM_ABI
        -: 1750:    void __throw_length_error() const {
        -: 1751:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 1752:        __basic_string_common<true>::__throw_length_error();
        -: 1753:#else
        -: 1754:        _VSTD::abort();
        -: 1755:#endif
        -: 1756:    }
        -: 1757:
        -: 1758:    _LIBCPP_NORETURN _LIBCPP_HIDE_FROM_ABI
        -: 1759:    void __throw_out_of_range() const {
        -: 1760:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 1761:        __basic_string_common<true>::__throw_out_of_range();
        -: 1762:#else
        -: 1763:        _VSTD::abort();
        -: 1764:#endif
        -: 1765:    }
        -: 1766:
        -: 1767:    friend basic_string operator+<>(const basic_string&, const basic_string&);
        -: 1768:    friend basic_string operator+<>(const value_type*, const basic_string&);
        -: 1769:    friend basic_string operator+<>(value_type, const basic_string&);
        -: 1770:    friend basic_string operator+<>(const basic_string&, const value_type*);
        -: 1771:    friend basic_string operator+<>(const basic_string&, value_type);
        -: 1772:};
        -: 1773:
        -: 1774:// These declarations must appear before any functions are implicitly used
        -: 1775:// so that they have the correct visibility specifier.
        -: 1776:#ifdef _LIBCPP_ABI_STRING_OPTIMIZED_EXTERNAL_INSTANTIATION
        -: 1777:    _LIBCPP_STRING_UNSTABLE_EXTERN_TEMPLATE_LIST(_LIBCPP_EXTERN_TEMPLATE, char)
        -: 1778:#   ifndef _LIBCPP_HAS_NO_WIDE_CHARACTERS
        -: 1779:        _LIBCPP_STRING_UNSTABLE_EXTERN_TEMPLATE_LIST(_LIBCPP_EXTERN_TEMPLATE, wchar_t)
        -: 1780:#   endif
        -: 1781:#else
        -: 1782:    _LIBCPP_STRING_V1_EXTERN_TEMPLATE_LIST(_LIBCPP_EXTERN_TEMPLATE, char)
        -: 1783:#   ifndef _LIBCPP_HAS_NO_WIDE_CHARACTERS
        -: 1784:        _LIBCPP_STRING_V1_EXTERN_TEMPLATE_LIST(_LIBCPP_EXTERN_TEMPLATE, wchar_t)
        -: 1785:#   endif
        -: 1786:#endif
        -: 1787:
        -: 1788:
        -: 1789:#ifndef _LIBCPP_HAS_NO_DEDUCTION_GUIDES
        -: 1790:template<class _InputIterator,
        -: 1791:         class _CharT = __iter_value_type<_InputIterator>,
        -: 1792:         class _Allocator = allocator<_CharT>,
        -: 1793:         class = _EnableIf<__is_cpp17_input_iterator<_InputIterator>::value>,
        -: 1794:         class = _EnableIf<__is_allocator<_Allocator>::value>
        -: 1795:         >
        -: 1796:basic_string(_InputIterator, _InputIterator, _Allocator = _Allocator())
        -: 1797:  -> basic_string<_CharT, char_traits<_CharT>, _Allocator>;
        -: 1798:
        -: 1799:template<class _CharT,
        -: 1800:         class _Traits,
        -: 1801:         class _Allocator = allocator<_CharT>,
        -: 1802:         class = _EnableIf<__is_allocator<_Allocator>::value>
        -: 1803:         >
        -: 1804:explicit basic_string(basic_string_view<_CharT, _Traits>, const _Allocator& = _Allocator())
        -: 1805:  -> basic_string<_CharT, _Traits, _Allocator>;
        -: 1806:
        -: 1807:template<class _CharT,
        -: 1808:         class _Traits,
        -: 1809:         class _Allocator = allocator<_CharT>,
        -: 1810:         class = _EnableIf<__is_allocator<_Allocator>::value>,
        -: 1811:         class _Sz = typename allocator_traits<_Allocator>::size_type
        -: 1812:         >
        -: 1813:basic_string(basic_string_view<_CharT, _Traits>, _Sz, _Sz, const _Allocator& = _Allocator())
        -: 1814:  -> basic_string<_CharT, _Traits, _Allocator>;
        -: 1815:#endif
        -: 1816:
        -: 1817:template <class _CharT, class _Traits, class _Allocator>
        -: 1818:inline
        -: 1819:void
        -: 1820:basic_string<_CharT, _Traits, _Allocator>::__invalidate_all_iterators()
        -: 1821:{
        -: 1822:#if _LIBCPP_DEBUG_LEVEL == 2
        -: 1823:    __get_db()->__invalidate_all(this);
        -: 1824:#endif
        -: 1825:}
        -: 1826:
        -: 1827:template <class _CharT, class _Traits, class _Allocator>
        -: 1828:inline
        -: 1829:void
        -: 1830:basic_string<_CharT, _Traits, _Allocator>::__invalidate_iterators_past(size_type __pos)
        -: 1831:{
        -: 1832:#if _LIBCPP_DEBUG_LEVEL == 2
        -: 1833:    __c_node* __c = __get_db()->__find_c_and_lock(this);
        -: 1834:    if (__c)
        -: 1835:    {
        -: 1836:        const_pointer __new_last = __get_pointer() + __pos;
        -: 1837:        for (__i_node** __p = __c->end_; __p != __c->beg_; )
        -: 1838:        {
        -: 1839:            --__p;
        -: 1840:            const_iterator* __i = static_cast<const_iterator*>((*__p)->__i_);
        -: 1841:            if (__i->base() > __new_last)
        -: 1842:            {
        -: 1843:                (*__p)->__c_ = nullptr;
        -: 1844:                if (--__c->end_ != __p)
        -: 1845:                    _VSTD::memmove(__p, __p+1, (__c->end_ - __p)*sizeof(__i_node*));
        -: 1846:            }
        -: 1847:        }
        -: 1848:        __get_db()->unlock();
        -: 1849:    }
        -: 1850:#else
        -: 1851:    (void)__pos;
        -: 1852:#endif // _LIBCPP_DEBUG_LEVEL == 2
        -: 1853:}
        -: 1854:
        -: 1855:template <class _CharT, class _Traits, class _Allocator>
        -: 1856:inline
function _ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2Ev called 0 returned 0% blocks executed 0%
    #####: 1857:basic_string<_CharT, _Traits, _Allocator>::basic_string()
        -: 1858:    _NOEXCEPT_(is_nothrow_default_constructible<allocator_type>::value)
    #####: 1859:     : __r_(__default_init_tag(), __default_init_tag())
    $$$$$: 1859-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1859-block  1
    #####: 1860:{
        -: 1861:#if _LIBCPP_DEBUG_LEVEL == 2
        -: 1862:    __get_db()->__insert_c(this);
        -: 1863:#endif
    #####: 1864:    __zero();
    #####: 1865:}
    $$$$$: 1865-block  0
    $$$$$: 1865-block  1
        -: 1866:
        -: 1867:template <class _CharT, class _Traits, class _Allocator>
        -: 1868:inline
        -: 1869:basic_string<_CharT, _Traits, _Allocator>::basic_string(const allocator_type& __a)
        -: 1870:#if _LIBCPP_STD_VER <= 14
        -: 1871:        _NOEXCEPT_(is_nothrow_copy_constructible<allocator_type>::value)
        -: 1872:#else
        -: 1873:        _NOEXCEPT
        -: 1874:#endif
        -: 1875:: __r_(__default_init_tag(), __a)
        -: 1876:{
        -: 1877:#if _LIBCPP_DEBUG_LEVEL == 2
        -: 1878:    __get_db()->__insert_c(this);
        -: 1879:#endif
        -: 1880:    __zero();
        -: 1881:}
        -: 1882:
        -: 1883:template <class _CharT, class _Traits, class _Allocator>
        -: 1884:void basic_string<_CharT, _Traits, _Allocator>::__init(const value_type* __s,
        -: 1885:                                                       size_type __sz,
        -: 1886:                                                       size_type __reserve)
        -: 1887:{
        -: 1888:    if (__reserve > max_size())
        -: 1889:        this->__throw_length_error();
        -: 1890:    pointer __p;
        -: 1891:    if (__reserve < __min_cap)
        -: 1892:    {
        -: 1893:        __set_short_size(__sz);
        -: 1894:        __p = __get_short_pointer();
        -: 1895:    }
        -: 1896:    else
        -: 1897:    {
        -: 1898:        size_type __cap = __recommend(__reserve);
        -: 1899:        __p = __alloc_traits::allocate(__alloc(), __cap+1);
        -: 1900:        __set_long_pointer(__p);
        -: 1901:        __set_long_cap(__cap+1);
        -: 1902:        __set_long_size(__sz);
        -: 1903:    }
        -: 1904:    traits_type::copy(_VSTD::__to_address(__p), __s, __sz);
        -: 1905:    traits_type::assign(__p[__sz], value_type());
        -: 1906:}
        -: 1907:
        -: 1908:template <class _CharT, class _Traits, class _Allocator>
        -: 1909:void
        -: 1910:basic_string<_CharT, _Traits, _Allocator>::__init(const value_type* __s, size_type __sz)
        -: 1911:{
        -: 1912:    if (__sz > max_size())
        -: 1913:        this->__throw_length_error();
        -: 1914:    pointer __p;
        -: 1915:    if (__sz < __min_cap)
        -: 1916:    {
        -: 1917:        __set_short_size(__sz);
        -: 1918:        __p = __get_short_pointer();
        -: 1919:    }
        -: 1920:    else
        -: 1921:    {
        -: 1922:        size_type __cap = __recommend(__sz);
        -: 1923:        __p = __alloc_traits::allocate(__alloc(), __cap+1);
        -: 1924:        __set_long_pointer(__p);
        -: 1925:        __set_long_cap(__cap+1);
        -: 1926:        __set_long_size(__sz);
        -: 1927:    }
        -: 1928:    traits_type::copy(_VSTD::__to_address(__p), __s, __sz);
        -: 1929:    traits_type::assign(__p[__sz], value_type());
        -: 1930:}
        -: 1931:
        -: 1932:template <class _CharT, class _Traits, class _Allocator>
        -: 1933:template <class>
        -: 1934:basic_string<_CharT, _Traits, _Allocator>::basic_string(const _CharT* __s, const _Allocator& __a)
        -: 1935:    : __r_(__default_init_tag(), __a)
        -: 1936:{
        -: 1937:    _LIBCPP_ASSERT(__s != nullptr, "basic_string(const char*, allocator) detected nullptr");
        -: 1938:    __init(__s, traits_type::length(__s));
        -: 1939:#if _LIBCPP_DEBUG_LEVEL == 2
        -: 1940:    __get_db()->__insert_c(this);
        -: 1941:#endif
        -: 1942:}
        -: 1943:
        -: 1944:template <class _CharT, class _Traits, class _Allocator>
        -: 1945:inline
        -: 1946:basic_string<_CharT, _Traits, _Allocator>::basic_string(const _CharT* __s, size_type __n)
        -: 1947:     : __r_(__default_init_tag(), __default_init_tag())
        -: 1948:{
        -: 1949:    _LIBCPP_ASSERT(__n == 0 || __s != nullptr, "basic_string(const char*, n) detected nullptr");
        -: 1950:    __init(__s, __n);
        -: 1951:#if _LIBCPP_DEBUG_LEVEL == 2
        -: 1952:    __get_db()->__insert_c(this);
        -: 1953:#endif
        -: 1954:}
        -: 1955:
        -: 1956:template <class _CharT, class _Traits, class _Allocator>
        -: 1957:inline
        -: 1958:basic_string<_CharT, _Traits, _Allocator>::basic_string(const _CharT* __s, size_type __n, const _Allocator& __a)
        -: 1959:    : __r_(__default_init_tag(), __a)
        -: 1960:{
        -: 1961:    _LIBCPP_ASSERT(__n == 0 || __s != nullptr, "basic_string(const char*, n, allocator) detected nullptr");
        -: 1962:    __init(__s, __n);
        -: 1963:#if _LIBCPP_DEBUG_LEVEL == 2
        -: 1964:    __get_db()->__insert_c(this);
        -: 1965:#endif
        -: 1966:}
        -: 1967:
        -: 1968:template <class _CharT, class _Traits, class _Allocator>
        -: 1969:basic_string<_CharT, _Traits, _Allocator>::basic_string(const basic_string& __str)
        -: 1970:    : __r_(__default_init_tag(), __alloc_traits::select_on_container_copy_construction(__str.__alloc()))
        -: 1971:{
        -: 1972:    if (!__str.__is_long())
        -: 1973:        __r_.first().__r = __str.__r_.first().__r;
        -: 1974:    else
        -: 1975:        __init_copy_ctor_external(_VSTD::__to_address(__str.__get_long_pointer()),
        -: 1976:                                  __str.__get_long_size());
        -: 1977:
        -: 1978:#if _LIBCPP_DEBUG_LEVEL == 2
        -: 1979:    __get_db()->__insert_c(this);
        -: 1980:#endif
        -: 1981:}
        -: 1982:
        -: 1983:template <class _CharT, class _Traits, class _Allocator>
        -: 1984:basic_string<_CharT, _Traits, _Allocator>::basic_string(
        -: 1985:    const basic_string& __str, const allocator_type& __a)
        -: 1986:    : __r_(__default_init_tag(), __a)
        -: 1987:{
        -: 1988:    if (!__str.__is_long())
        -: 1989:        __r_.first().__r = __str.__r_.first().__r;
        -: 1990:    else
        -: 1991:        __init_copy_ctor_external(_VSTD::__to_address(__str.__get_long_pointer()),
        -: 1992:                                  __str.__get_long_size());
        -: 1993:#if _LIBCPP_DEBUG_LEVEL == 2
        -: 1994:    __get_db()->__insert_c(this);
        -: 1995:#endif
        -: 1996:}
        -: 1997:
        -: 1998:template <class _CharT, class _Traits, class _Allocator>
        -: 1999:void basic_string<_CharT, _Traits, _Allocator>::__init_copy_ctor_external(
        -: 2000:    const value_type* __s, size_type __sz) {
        -: 2001:  pointer __p;
        -: 2002:  if (__sz < __min_cap) {
        -: 2003:    __p = __get_short_pointer();
        -: 2004:    __set_short_size(__sz);
        -: 2005:  } else {
        -: 2006:    if (__sz > max_size())
        -: 2007:      this->__throw_length_error();
        -: 2008:    size_t __cap = __recommend(__sz);
        -: 2009:    __p = __alloc_traits::allocate(__alloc(), __cap + 1);
        -: 2010:    __set_long_pointer(__p);
        -: 2011:    __set_long_cap(__cap + 1);
        -: 2012:    __set_long_size(__sz);
        -: 2013:  }
        -: 2014:  traits_type::copy(_VSTD::__to_address(__p), __s, __sz + 1);
        -: 2015:}
        -: 2016:
        -: 2017:#ifndef _LIBCPP_CXX03_LANG
        -: 2018:
        -: 2019:template <class _CharT, class _Traits, class _Allocator>
        -: 2020:inline
        -: 2021:basic_string<_CharT, _Traits, _Allocator>::basic_string(basic_string&& __str)
        -: 2022:#if _LIBCPP_STD_VER <= 14
        -: 2023:        _NOEXCEPT_(is_nothrow_move_constructible<allocator_type>::value)
        -: 2024:#else
        -: 2025:        _NOEXCEPT
        -: 2026:#endif
        -: 2027:    : __r_(_VSTD::move(__str.__r_))
        -: 2028:{
        -: 2029:    __str.__zero();
        -: 2030:#if _LIBCPP_DEBUG_LEVEL == 2
        -: 2031:    __get_db()->__insert_c(this);
        -: 2032:    if (__is_long())
        -: 2033:        __get_db()->swap(this, &__str);
        -: 2034:#endif
        -: 2035:}
        -: 2036:
        -: 2037:template <class _CharT, class _Traits, class _Allocator>
        -: 2038:inline
        -: 2039:basic_string<_CharT, _Traits, _Allocator>::basic_string(basic_string&& __str, const allocator_type& __a)
        -: 2040:    : __r_(__default_init_tag(), __a)
        -: 2041:{
        -: 2042:    if (__str.__is_long() && __a != __str.__alloc()) // copy, not move
        -: 2043:        __init(_VSTD::__to_address(__str.__get_long_pointer()), __str.__get_long_size());
        -: 2044:    else
        -: 2045:    {
        -: 2046:        __r_.first().__r = __str.__r_.first().__r;
        -: 2047:        __str.__zero();
        -: 2048:    }
        -: 2049:#if _LIBCPP_DEBUG_LEVEL == 2
        -: 2050:    __get_db()->__insert_c(this);
        -: 2051:    if (__is_long())
        -: 2052:        __get_db()->swap(this, &__str);
        -: 2053:#endif
        -: 2054:}
        -: 2055:
        -: 2056:#endif // _LIBCPP_CXX03_LANG
        -: 2057:
        -: 2058:template <class _CharT, class _Traits, class _Allocator>
        -: 2059:void
        -: 2060:basic_string<_CharT, _Traits, _Allocator>::__init(size_type __n, value_type __c)
        -: 2061:{
        -: 2062:    if (__n > max_size())
        -: 2063:        this->__throw_length_error();
        -: 2064:    pointer __p;
        -: 2065:    if (__n < __min_cap)
        -: 2066:    {
        -: 2067:        __set_short_size(__n);
        -: 2068:        __p = __get_short_pointer();
        -: 2069:    }
        -: 2070:    else
        -: 2071:    {
        -: 2072:        size_type __cap = __recommend(__n);
        -: 2073:        __p = __alloc_traits::allocate(__alloc(), __cap+1);
        -: 2074:        __set_long_pointer(__p);
        -: 2075:        __set_long_cap(__cap+1);
        -: 2076:        __set_long_size(__n);
        -: 2077:    }
        -: 2078:    traits_type::assign(_VSTD::__to_address(__p), __n, __c);
        -: 2079:    traits_type::assign(__p[__n], value_type());
        -: 2080:}
        -: 2081:
        -: 2082:template <class _CharT, class _Traits, class _Allocator>
        -: 2083:inline
        -: 2084:basic_string<_CharT, _Traits, _Allocator>::basic_string(size_type __n, _CharT __c)
        -: 2085:     : __r_(__default_init_tag(), __default_init_tag())
        -: 2086:{
        -: 2087:    __init(__n, __c);
        -: 2088:#if _LIBCPP_DEBUG_LEVEL == 2
        -: 2089:    __get_db()->__insert_c(this);
        -: 2090:#endif
        -: 2091:}
        -: 2092:
        -: 2093:template <class _CharT, class _Traits, class _Allocator>
        -: 2094:template <class>
        -: 2095:basic_string<_CharT, _Traits, _Allocator>::basic_string(size_type __n, _CharT __c, const _Allocator& __a)
        -: 2096:    : __r_(__default_init_tag(), __a)
        -: 2097:{
        -: 2098:    __init(__n, __c);
        -: 2099:#if _LIBCPP_DEBUG_LEVEL == 2
        -: 2100:    __get_db()->__insert_c(this);
        -: 2101:#endif
        -: 2102:}
        -: 2103:
        -: 2104:template <class _CharT, class _Traits, class _Allocator>
        -: 2105:basic_string<_CharT, _Traits, _Allocator>::basic_string(const basic_string& __str,
        -: 2106:                                                        size_type __pos, size_type __n,
        -: 2107:                                                        const _Allocator& __a)
        -: 2108:    : __r_(__default_init_tag(), __a)
        -: 2109:{
        -: 2110:    size_type __str_sz = __str.size();
        -: 2111:    if (__pos > __str_sz)
        -: 2112:        this->__throw_out_of_range();
        -: 2113:    __init(__str.data() + __pos, _VSTD::min(__n, __str_sz - __pos));
        -: 2114:#if _LIBCPP_DEBUG_LEVEL == 2
        -: 2115:    __get_db()->__insert_c(this);
        -: 2116:#endif
        -: 2117:}
        -: 2118:
        -: 2119:template <class _CharT, class _Traits, class _Allocator>
        -: 2120:inline
        -: 2121:basic_string<_CharT, _Traits, _Allocator>::basic_string(const basic_string& __str, size_type __pos,
        -: 2122:                                                        const _Allocator& __a)
        -: 2123:    : __r_(__default_init_tag(), __a)
        -: 2124:{
        -: 2125:    size_type __str_sz = __str.size();
        -: 2126:    if (__pos > __str_sz)
        -: 2127:        this->__throw_out_of_range();
        -: 2128:    __init(__str.data() + __pos, __str_sz - __pos);
        -: 2129:#if _LIBCPP_DEBUG_LEVEL == 2
        -: 2130:    __get_db()->__insert_c(this);
        -: 2131:#endif
        -: 2132:}
        -: 2133:
        -: 2134:template <class _CharT, class _Traits, class _Allocator>
        -: 2135:template <class _Tp, class>
        -: 2136:basic_string<_CharT, _Traits, _Allocator>::basic_string(
        -: 2137:             const _Tp& __t, size_type __pos, size_type __n, const allocator_type& __a)
        -: 2138:    : __r_(__default_init_tag(), __a)
        -: 2139:{
        -: 2140:    __self_view __sv0 = __t;
        -: 2141:    __self_view __sv = __sv0.substr(__pos, __n);
        -: 2142:    __init(__sv.data(), __sv.size());
        -: 2143:#if _LIBCPP_DEBUG_LEVEL == 2
        -: 2144:    __get_db()->__insert_c(this);
        -: 2145:#endif
        -: 2146:}
        -: 2147:
        -: 2148:template <class _CharT, class _Traits, class _Allocator>
        -: 2149:template <class _Tp, class>
        -: 2150:basic_string<_CharT, _Traits, _Allocator>::basic_string(const _Tp & __t)
        -: 2151:     : __r_(__default_init_tag(), __default_init_tag())
        -: 2152:{
        -: 2153:    __self_view __sv = __t;
        -: 2154:    __init(__sv.data(), __sv.size());
        -: 2155:#if _LIBCPP_DEBUG_LEVEL == 2
        -: 2156:    __get_db()->__insert_c(this);
        -: 2157:#endif
        -: 2158:}
        -: 2159:
        -: 2160:template <class _CharT, class _Traits, class _Allocator>
        -: 2161:template <class _Tp, class>
        -: 2162:basic_string<_CharT, _Traits, _Allocator>::basic_string(const _Tp & __t, const _Allocator& __a)
        -: 2163:    : __r_(__default_init_tag(), __a)
        -: 2164:{
        -: 2165:    __self_view __sv = __t;
        -: 2166:    __init(__sv.data(), __sv.size());
        -: 2167:#if _LIBCPP_DEBUG_LEVEL == 2
        -: 2168:    __get_db()->__insert_c(this);
        -: 2169:#endif
        -: 2170:}
        -: 2171:
        -: 2172:template <class _CharT, class _Traits, class _Allocator>
        -: 2173:template <class _InputIterator>
        -: 2174:_EnableIf
        -: 2175:<
        -: 2176:    __is_exactly_cpp17_input_iterator<_InputIterator>::value
        -: 2177:>
        -: 2178:basic_string<_CharT, _Traits, _Allocator>::__init(_InputIterator __first, _InputIterator __last)
        -: 2179:{
        -: 2180:    __zero();
        -: 2181:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 2182:    try
        -: 2183:    {
        -: 2184:#endif // _LIBCPP_NO_EXCEPTIONS
        -: 2185:    for (; __first != __last; ++__first)
        -: 2186:        push_back(*__first);
        -: 2187:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 2188:    }
        -: 2189:    catch (...)
        -: 2190:    {
        -: 2191:        if (__is_long())
        -: 2192:            __alloc_traits::deallocate(__alloc(), __get_long_pointer(), __get_long_cap());
        -: 2193:        throw;
        -: 2194:    }
        -: 2195:#endif // _LIBCPP_NO_EXCEPTIONS
        -: 2196:}
        -: 2197:
        -: 2198:template <class _CharT, class _Traits, class _Allocator>
        -: 2199:template <class _ForwardIterator>
        -: 2200:_EnableIf
        -: 2201:<
        -: 2202:    __is_cpp17_forward_iterator<_ForwardIterator>::value
        -: 2203:>
        -: 2204:basic_string<_CharT, _Traits, _Allocator>::__init(_ForwardIterator __first, _ForwardIterator __last)
        -: 2205:{
        -: 2206:    size_type __sz = static_cast<size_type>(_VSTD::distance(__first, __last));
        -: 2207:    if (__sz > max_size())
        -: 2208:        this->__throw_length_error();
        -: 2209:    pointer __p;
        -: 2210:    if (__sz < __min_cap)
        -: 2211:    {
        -: 2212:        __set_short_size(__sz);
        -: 2213:        __p = __get_short_pointer();
        -: 2214:    }
        -: 2215:    else
        -: 2216:    {
        -: 2217:        size_type __cap = __recommend(__sz);
        -: 2218:        __p = __alloc_traits::allocate(__alloc(), __cap+1);
        -: 2219:        __set_long_pointer(__p);
        -: 2220:        __set_long_cap(__cap+1);
        -: 2221:        __set_long_size(__sz);
        -: 2222:    }
        -: 2223:
        -: 2224:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 2225:    try
        -: 2226:    {
        -: 2227:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 2228:    for (; __first != __last; ++__first, (void) ++__p)
        -: 2229:        traits_type::assign(*__p, *__first);
        -: 2230:    traits_type::assign(*__p, value_type());
        -: 2231:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 2232:    }
        -: 2233:    catch (...)
        -: 2234:    {
        -: 2235:        if (__is_long())
        -: 2236:            __alloc_traits::deallocate(__alloc(), __get_long_pointer(), __get_long_cap());
        -: 2237:        throw;
        -: 2238:    }
        -: 2239:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 2240:}
        -: 2241:
        -: 2242:template <class _CharT, class _Traits, class _Allocator>
        -: 2243:template<class _InputIterator, class>
        -: 2244:inline
        -: 2245:basic_string<_CharT, _Traits, _Allocator>::basic_string(_InputIterator __first, _InputIterator __last)
        -: 2246:     : __r_(__default_init_tag(), __default_init_tag())
        -: 2247:{
        -: 2248:    __init(__first, __last);
        -: 2249:#if _LIBCPP_DEBUG_LEVEL == 2
        -: 2250:    __get_db()->__insert_c(this);
        -: 2251:#endif
        -: 2252:}
        -: 2253:
        -: 2254:template <class _CharT, class _Traits, class _Allocator>
        -: 2255:template<class _InputIterator, class>
        -: 2256:inline
        -: 2257:basic_string<_CharT, _Traits, _Allocator>::basic_string(_InputIterator __first, _InputIterator __last,
        -: 2258:                                                        const allocator_type& __a)
        -: 2259:    : __r_(__default_init_tag(), __a)
        -: 2260:{
        -: 2261:    __init(__first, __last);
        -: 2262:#if _LIBCPP_DEBUG_LEVEL == 2
        -: 2263:    __get_db()->__insert_c(this);
        -: 2264:#endif
        -: 2265:}
        -: 2266:
        -: 2267:#ifndef _LIBCPP_CXX03_LANG
        -: 2268:
        -: 2269:template <class _CharT, class _Traits, class _Allocator>
        -: 2270:inline
        -: 2271:basic_string<_CharT, _Traits, _Allocator>::basic_string(
        -: 2272:    initializer_list<_CharT> __il)
        -: 2273:     : __r_(__default_init_tag(), __default_init_tag())
        -: 2274:{
        -: 2275:    __init(__il.begin(), __il.end());
        -: 2276:#if _LIBCPP_DEBUG_LEVEL == 2
        -: 2277:    __get_db()->__insert_c(this);
        -: 2278:#endif
        -: 2279:}
        -: 2280:
        -: 2281:template <class _CharT, class _Traits, class _Allocator>
        -: 2282:inline
        -: 2283:
        -: 2284:basic_string<_CharT, _Traits, _Allocator>::basic_string(
        -: 2285:    initializer_list<_CharT> __il, const _Allocator& __a)
        -: 2286:    : __r_(__default_init_tag(), __a)
        -: 2287:{
        -: 2288:    __init(__il.begin(), __il.end());
        -: 2289:#if _LIBCPP_DEBUG_LEVEL == 2
        -: 2290:    __get_db()->__insert_c(this);
        -: 2291:#endif
        -: 2292:}
        -: 2293:
        -: 2294:#endif // _LIBCPP_CXX03_LANG
        -: 2295:
        -: 2296:template <class _CharT, class _Traits, class _Allocator>
        -: 2297:basic_string<_CharT, _Traits, _Allocator>::~basic_string()
        -: 2298:{
        -: 2299:#if _LIBCPP_DEBUG_LEVEL == 2
        -: 2300:    __get_db()->__erase_c(this);
        -: 2301:#endif
        -: 2302:    if (__is_long())
        -: 2303:        __alloc_traits::deallocate(__alloc(), __get_long_pointer(), __get_long_cap());
        -: 2304:}
        -: 2305:
        -: 2306:template <class _CharT, class _Traits, class _Allocator>
        -: 2307:void
        -: 2308:basic_string<_CharT, _Traits, _Allocator>::__grow_by_and_replace
        -: 2309:    (size_type __old_cap, size_type __delta_cap, size_type __old_sz,
        -: 2310:     size_type __n_copy,  size_type __n_del,     size_type __n_add, const value_type* __p_new_stuff)
        -: 2311:{
        -: 2312:    size_type __ms = max_size();
        -: 2313:    if (__delta_cap > __ms - __old_cap - 1)
        -: 2314:        this->__throw_length_error();
        -: 2315:    pointer __old_p = __get_pointer();
        -: 2316:    size_type __cap = __old_cap < __ms / 2 - __alignment ?
        -: 2317:                          __recommend(_VSTD::max(__old_cap + __delta_cap, 2 * __old_cap)) :
        -: 2318:                          __ms - 1;
        -: 2319:    pointer __p = __alloc_traits::allocate(__alloc(), __cap+1);
        -: 2320:    __invalidate_all_iterators();
        -: 2321:    if (__n_copy != 0)
        -: 2322:        traits_type::copy(_VSTD::__to_address(__p),
        -: 2323:                          _VSTD::__to_address(__old_p), __n_copy);
        -: 2324:    if (__n_add != 0)
        -: 2325:        traits_type::copy(_VSTD::__to_address(__p) + __n_copy, __p_new_stuff, __n_add);
        -: 2326:    size_type __sec_cp_sz = __old_sz - __n_del - __n_copy;
        -: 2327:    if (__sec_cp_sz != 0)
        -: 2328:        traits_type::copy(_VSTD::__to_address(__p) + __n_copy + __n_add,
        -: 2329:                          _VSTD::__to_address(__old_p) + __n_copy + __n_del, __sec_cp_sz);
        -: 2330:    if (__old_cap+1 != __min_cap)
        -: 2331:        __alloc_traits::deallocate(__alloc(), __old_p, __old_cap+1);
        -: 2332:    __set_long_pointer(__p);
        -: 2333:    __set_long_cap(__cap+1);
        -: 2334:    __old_sz = __n_copy + __n_add + __sec_cp_sz;
        -: 2335:    __set_long_size(__old_sz);
        -: 2336:    traits_type::assign(__p[__old_sz], value_type());
        -: 2337:}
        -: 2338:
        -: 2339:template <class _CharT, class _Traits, class _Allocator>
        -: 2340:void
        -: 2341:basic_string<_CharT, _Traits, _Allocator>::__grow_by(size_type __old_cap, size_type __delta_cap, size_type __old_sz,
        -: 2342:                                                     size_type __n_copy,  size_type __n_del,     size_type __n_add)
        -: 2343:{
        -: 2344:    size_type __ms = max_size();
        -: 2345:    if (__delta_cap > __ms - __old_cap)
        -: 2346:        this->__throw_length_error();
        -: 2347:    pointer __old_p = __get_pointer();
        -: 2348:    size_type __cap = __old_cap < __ms / 2 - __alignment ?
        -: 2349:                          __recommend(_VSTD::max(__old_cap + __delta_cap, 2 * __old_cap)) :
        -: 2350:                          __ms - 1;
        -: 2351:    pointer __p = __alloc_traits::allocate(__alloc(), __cap+1);
        -: 2352:    __invalidate_all_iterators();
        -: 2353:    if (__n_copy != 0)
        -: 2354:        traits_type::copy(_VSTD::__to_address(__p),
        -: 2355:                          _VSTD::__to_address(__old_p), __n_copy);
        -: 2356:    size_type __sec_cp_sz = __old_sz - __n_del - __n_copy;
        -: 2357:    if (__sec_cp_sz != 0)
        -: 2358:        traits_type::copy(_VSTD::__to_address(__p) + __n_copy + __n_add,
        -: 2359:                          _VSTD::__to_address(__old_p) + __n_copy + __n_del,
        -: 2360:                          __sec_cp_sz);
        -: 2361:    if (__old_cap+1 != __min_cap)
        -: 2362:        __alloc_traits::deallocate(__alloc(), __old_p, __old_cap+1);
        -: 2363:    __set_long_pointer(__p);
        -: 2364:    __set_long_cap(__cap+1);
        -: 2365:}
        -: 2366:
        -: 2367:// assign
        -: 2368:
        -: 2369:template <class _CharT, class _Traits, class _Allocator>
        -: 2370:template <bool __is_short>
        -: 2371:basic_string<_CharT, _Traits, _Allocator>&
        -: 2372:basic_string<_CharT, _Traits, _Allocator>::__assign_no_alias(
        -: 2373:    const value_type* __s, size_type __n) {
        -: 2374:  size_type __cap = __is_short ? __min_cap : __get_long_cap();
        -: 2375:  if (__n < __cap) {
        -: 2376:    pointer __p = __is_short ? __get_short_pointer() : __get_long_pointer();
        -: 2377:    __is_short ? __set_short_size(__n) : __set_long_size(__n);
        -: 2378:    traits_type::copy(_VSTD::__to_address(__p), __s, __n);
        -: 2379:    traits_type::assign(__p[__n], value_type());
        -: 2380:    __invalidate_iterators_past(__n);
        -: 2381:  } else {
        -: 2382:    size_type __sz = __is_short ? __get_short_size() : __get_long_size();
        -: 2383:    __grow_by_and_replace(__cap - 1, __n - __cap + 1, __sz, 0, __sz, __n, __s);
        -: 2384:  }
        -: 2385:  return *this;
        -: 2386:}
        -: 2387:
        -: 2388:template <class _CharT, class _Traits, class _Allocator>
        -: 2389:basic_string<_CharT, _Traits, _Allocator>&
        -: 2390:basic_string<_CharT, _Traits, _Allocator>::__assign_external(
        -: 2391:    const value_type* __s, size_type __n) {
        -: 2392:  size_type __cap = capacity();
        -: 2393:  if (__cap >= __n) {
        -: 2394:    value_type* __p = _VSTD::__to_address(__get_pointer());
        -: 2395:    traits_type::move(__p, __s, __n);
        -: 2396:    traits_type::assign(__p[__n], value_type());
        -: 2397:    __set_size(__n);
        -: 2398:    __invalidate_iterators_past(__n);
        -: 2399:  } else {
        -: 2400:    size_type __sz = size();
        -: 2401:    __grow_by_and_replace(__cap, __n - __cap, __sz, 0, __sz, __n, __s);
        -: 2402:  }
        -: 2403:  return *this;
        -: 2404:}
        -: 2405:
        -: 2406:template <class _CharT, class _Traits, class _Allocator>
        -: 2407:basic_string<_CharT, _Traits, _Allocator>&
        -: 2408:basic_string<_CharT, _Traits, _Allocator>::assign(const value_type* __s, size_type __n)
        -: 2409:{
        -: 2410:    _LIBCPP_ASSERT(__n == 0 || __s != nullptr, "string::assign received nullptr");
        -: 2411:    return (_LIBCPP_BUILTIN_CONSTANT_P(__n) && __n < __min_cap)
        -: 2412:               ? __assign_short(__s, __n)
        -: 2413:               : __assign_external(__s, __n);
        -: 2414:}
        -: 2415:
        -: 2416:template <class _CharT, class _Traits, class _Allocator>
        -: 2417:basic_string<_CharT, _Traits, _Allocator>&
        -: 2418:basic_string<_CharT, _Traits, _Allocator>::assign(size_type __n, value_type __c)
        -: 2419:{
        -: 2420:    size_type __cap = capacity();
        -: 2421:    if (__cap < __n)
        -: 2422:    {
        -: 2423:        size_type __sz = size();
        -: 2424:        __grow_by(__cap, __n - __cap, __sz, 0, __sz);
        -: 2425:    }
        -: 2426:    value_type* __p = _VSTD::__to_address(__get_pointer());
        -: 2427:    traits_type::assign(__p, __n, __c);
        -: 2428:    traits_type::assign(__p[__n], value_type());
        -: 2429:    __set_size(__n);
        -: 2430:    __invalidate_iterators_past(__n);
        -: 2431:    return *this;
        -: 2432:}
        -: 2433:
        -: 2434:template <class _CharT, class _Traits, class _Allocator>
        -: 2435:basic_string<_CharT, _Traits, _Allocator>&
        -: 2436:basic_string<_CharT, _Traits, _Allocator>::operator=(value_type __c)
        -: 2437:{
        -: 2438:    pointer __p;
        -: 2439:    if (__is_long())
        -: 2440:    {
        -: 2441:        __p = __get_long_pointer();
        -: 2442:        __set_long_size(1);
        -: 2443:    }
        -: 2444:    else
        -: 2445:    {
        -: 2446:        __p = __get_short_pointer();
        -: 2447:        __set_short_size(1);
        -: 2448:    }
        -: 2449:    traits_type::assign(*__p, __c);
        -: 2450:    traits_type::assign(*++__p, value_type());
        -: 2451:    __invalidate_iterators_past(1);
        -: 2452:    return *this;
        -: 2453:}
        -: 2454:
        -: 2455:template <class _CharT, class _Traits, class _Allocator>
        -: 2456:basic_string<_CharT, _Traits, _Allocator>&
        -: 2457:basic_string<_CharT, _Traits, _Allocator>::operator=(const basic_string& __str)
        -: 2458:{
        -: 2459:  if (this != &__str) {
        -: 2460:    __copy_assign_alloc(__str);
        -: 2461:    if (!__is_long()) {
        -: 2462:      if (!__str.__is_long()) {
        -: 2463:        __r_.first().__r = __str.__r_.first().__r;
        -: 2464:      } else {
        -: 2465:        return __assign_no_alias<true>(__str.data(), __str.size());
        -: 2466:      }
        -: 2467:    } else {
        -: 2468:      return __assign_no_alias<false>(__str.data(), __str.size());
        -: 2469:    }
        -: 2470:  }
        -: 2471:  return *this;
        -: 2472:}
        -: 2473:
        -: 2474:#ifndef _LIBCPP_CXX03_LANG
        -: 2475:
        -: 2476:template <class _CharT, class _Traits, class _Allocator>
        -: 2477:inline
        -: 2478:void
        -: 2479:basic_string<_CharT, _Traits, _Allocator>::__move_assign(basic_string& __str, false_type)
        -: 2480:    _NOEXCEPT_(__alloc_traits::is_always_equal::value)
        -: 2481:{
        -: 2482:    if (__alloc() != __str.__alloc())
        -: 2483:        assign(__str);
        -: 2484:    else
        -: 2485:        __move_assign(__str, true_type());
        -: 2486:}
        -: 2487:
        -: 2488:template <class _CharT, class _Traits, class _Allocator>
        -: 2489:inline
        -: 2490:void
        -: 2491:basic_string<_CharT, _Traits, _Allocator>::__move_assign(basic_string& __str, true_type)
        -: 2492:#if _LIBCPP_STD_VER > 14
        -: 2493:    _NOEXCEPT
        -: 2494:#else
        -: 2495:    _NOEXCEPT_(is_nothrow_move_assignable<allocator_type>::value)
        -: 2496:#endif
        -: 2497:{
        -: 2498:  if (__is_long()) {
        -: 2499:    __alloc_traits::deallocate(__alloc(), __get_long_pointer(),
        -: 2500:                               __get_long_cap());
        -: 2501:#if _LIBCPP_STD_VER <= 14
        -: 2502:    if (!is_nothrow_move_assignable<allocator_type>::value) {
        -: 2503:      __set_short_size(0);
        -: 2504:      traits_type::assign(__get_short_pointer()[0], value_type());
        -: 2505:    }
        -: 2506:#endif
        -: 2507:  }
        -: 2508:  __move_assign_alloc(__str);
        -: 2509:  __r_.first() = __str.__r_.first();
        -: 2510:  __str.__set_short_size(0);
        -: 2511:  traits_type::assign(__str.__get_short_pointer()[0], value_type());
        -: 2512:}
        -: 2513:
        -: 2514:template <class _CharT, class _Traits, class _Allocator>
        -: 2515:inline
        -: 2516:basic_string<_CharT, _Traits, _Allocator>&
        -: 2517:basic_string<_CharT, _Traits, _Allocator>::operator=(basic_string&& __str)
        -: 2518:    _NOEXCEPT_((__noexcept_move_assign_container<_Allocator, __alloc_traits>::value))
        -: 2519:{
        -: 2520:    __move_assign(__str, integral_constant<bool,
        -: 2521:          __alloc_traits::propagate_on_container_move_assignment::value>());
        -: 2522:    return *this;
        -: 2523:}
        -: 2524:
        -: 2525:#endif
        -: 2526:
        -: 2527:template <class _CharT, class _Traits, class _Allocator>
        -: 2528:template<class _InputIterator>
        -: 2529:_EnableIf
        -: 2530:<
        -: 2531:     __is_exactly_cpp17_input_iterator<_InputIterator>::value,
        -: 2532:    basic_string<_CharT, _Traits, _Allocator>&
        -: 2533:>
        -: 2534:basic_string<_CharT, _Traits, _Allocator>::assign(_InputIterator __first, _InputIterator __last)
        -: 2535:{
        -: 2536:    const basic_string __temp(__first, __last, __alloc());
        -: 2537:    assign(__temp.data(), __temp.size());
        -: 2538:    return *this;
        -: 2539:}
        -: 2540:
        -: 2541:template <class _CharT, class _Traits, class _Allocator>
        -: 2542:template<class _ForwardIterator>
        -: 2543:_EnableIf
        -: 2544:<
        -: 2545:    __is_cpp17_forward_iterator<_ForwardIterator>::value,
        -: 2546:    basic_string<_CharT, _Traits, _Allocator>&
        -: 2547:>
        -: 2548:basic_string<_CharT, _Traits, _Allocator>::assign(_ForwardIterator __first, _ForwardIterator __last)
        -: 2549:{
        -: 2550:    size_type __cap = capacity();
        -: 2551:    size_type __n = __string_is_trivial_iterator<_ForwardIterator>::value ?
        -: 2552:        static_cast<size_type>(_VSTD::distance(__first, __last)) : 0;
        -: 2553:
        -: 2554:    if (__string_is_trivial_iterator<_ForwardIterator>::value &&
        -: 2555:        (__cap >= __n || !__addr_in_range(*__first)))
        -: 2556:    {
        -: 2557:        if (__cap < __n)
        -: 2558:        {
        -: 2559:            size_type __sz = size();
        -: 2560:            __grow_by(__cap, __n - __cap, __sz, 0, __sz);
        -: 2561:        }
        -: 2562:        pointer __p = __get_pointer();
        -: 2563:        for (; __first != __last; ++__first, ++__p)
        -: 2564:            traits_type::assign(*__p, *__first);
        -: 2565:        traits_type::assign(*__p, value_type());
        -: 2566:        __set_size(__n);
        -: 2567:        __invalidate_iterators_past(__n);
        -: 2568:    }
        -: 2569:    else
        -: 2570:    {
        -: 2571:        const basic_string __temp(__first, __last, __alloc());
        -: 2572:        assign(__temp.data(), __temp.size());
        -: 2573:    }
        -: 2574:    return *this;
        -: 2575:}
        -: 2576:
        -: 2577:template <class _CharT, class _Traits, class _Allocator>
        -: 2578:basic_string<_CharT, _Traits, _Allocator>&
        -: 2579:basic_string<_CharT, _Traits, _Allocator>::assign(const basic_string& __str, size_type __pos, size_type __n)
        -: 2580:{
        -: 2581:    size_type __sz = __str.size();
        -: 2582:    if (__pos > __sz)
        -: 2583:        this->__throw_out_of_range();
        -: 2584:    return assign(__str.data() + __pos, _VSTD::min(__n, __sz - __pos));
        -: 2585:}
        -: 2586:
        -: 2587:template <class _CharT, class _Traits, class _Allocator>
        -: 2588:template <class _Tp>
        -: 2589:_EnableIf
        -: 2590:<
        -: 2591:    __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value
        -: 2592:    && !__is_same_uncvref<_Tp, basic_string<_CharT, _Traits, _Allocator> >::value,
        -: 2593:    basic_string<_CharT, _Traits, _Allocator>&
        -: 2594:>
        -: 2595:basic_string<_CharT, _Traits, _Allocator>::assign(const _Tp & __t, size_type __pos, size_type __n)
        -: 2596:{
        -: 2597:    __self_view __sv = __t;
        -: 2598:    size_type __sz = __sv.size();
        -: 2599:    if (__pos > __sz)
        -: 2600:        this->__throw_out_of_range();
        -: 2601:    return assign(__sv.data() + __pos, _VSTD::min(__n, __sz - __pos));
        -: 2602:}
        -: 2603:
        -: 2604:
        -: 2605:template <class _CharT, class _Traits, class _Allocator>
        -: 2606:basic_string<_CharT, _Traits, _Allocator>&
        -: 2607:basic_string<_CharT, _Traits, _Allocator>::__assign_external(const value_type* __s) {
        -: 2608:  return __assign_external(__s, traits_type::length(__s));
        -: 2609:}
        -: 2610:
        -: 2611:template <class _CharT, class _Traits, class _Allocator>
        -: 2612:basic_string<_CharT, _Traits, _Allocator>&
        -: 2613:basic_string<_CharT, _Traits, _Allocator>::assign(const value_type* __s)
        -: 2614:{
        -: 2615:    _LIBCPP_ASSERT(__s != nullptr, "string::assign received nullptr");
        -: 2616:    return _LIBCPP_BUILTIN_CONSTANT_P(*__s)
        -: 2617:               ? (traits_type::length(__s) < __min_cap
        -: 2618:                      ? __assign_short(__s, traits_type::length(__s))
        -: 2619:                      : __assign_external(__s, traits_type::length(__s)))
        -: 2620:               : __assign_external(__s);
        -: 2621:}
        -: 2622:// append
        -: 2623:
        -: 2624:template <class _CharT, class _Traits, class _Allocator>
        -: 2625:basic_string<_CharT, _Traits, _Allocator>&
        -: 2626:basic_string<_CharT, _Traits, _Allocator>::append(const value_type* __s, size_type __n)
        -: 2627:{
        -: 2628:    _LIBCPP_ASSERT(__n == 0 || __s != nullptr, "string::append received nullptr");
        -: 2629:    size_type __cap = capacity();
        -: 2630:    size_type __sz = size();
        -: 2631:    if (__cap - __sz >= __n)
        -: 2632:    {
        -: 2633:        if (__n)
        -: 2634:        {
        -: 2635:            value_type* __p = _VSTD::__to_address(__get_pointer());
        -: 2636:            traits_type::copy(__p + __sz, __s, __n);
        -: 2637:            __sz += __n;
        -: 2638:            __set_size(__sz);
        -: 2639:            traits_type::assign(__p[__sz], value_type());
        -: 2640:        }
        -: 2641:    }
        -: 2642:    else
        -: 2643:        __grow_by_and_replace(__cap, __sz + __n - __cap, __sz, __sz, 0, __n, __s);
        -: 2644:    return *this;
        -: 2645:}
        -: 2646:
        -: 2647:template <class _CharT, class _Traits, class _Allocator>
        -: 2648:basic_string<_CharT, _Traits, _Allocator>&
        -: 2649:basic_string<_CharT, _Traits, _Allocator>::append(size_type __n, value_type __c)
        -: 2650:{
        -: 2651:    if (__n)
        -: 2652:    {
        -: 2653:        size_type __cap = capacity();
        -: 2654:        size_type __sz = size();
        -: 2655:        if (__cap - __sz < __n)
        -: 2656:            __grow_by(__cap, __sz + __n - __cap, __sz, __sz, 0);
        -: 2657:        pointer __p = __get_pointer();
        -: 2658:        traits_type::assign(_VSTD::__to_address(__p) + __sz, __n, __c);
        -: 2659:        __sz += __n;
        -: 2660:        __set_size(__sz);
        -: 2661:        traits_type::assign(__p[__sz], value_type());
        -: 2662:    }
        -: 2663:    return *this;
        -: 2664:}
        -: 2665:
        -: 2666:template <class _CharT, class _Traits, class _Allocator>
        -: 2667:inline void
        -: 2668:basic_string<_CharT, _Traits, _Allocator>::__append_default_init(size_type __n)
        -: 2669:{
        -: 2670:    if (__n)
        -: 2671:    {
        -: 2672:        size_type __cap = capacity();
        -: 2673:        size_type __sz = size();
        -: 2674:        if (__cap - __sz < __n)
        -: 2675:            __grow_by(__cap, __sz + __n - __cap, __sz, __sz, 0);
        -: 2676:        pointer __p = __get_pointer();
        -: 2677:        __sz += __n;
        -: 2678:        __set_size(__sz);
        -: 2679:        traits_type::assign(__p[__sz], value_type());
        -: 2680:    }
        -: 2681:}
        -: 2682:
        -: 2683:template <class _CharT, class _Traits, class _Allocator>
        -: 2684:void
        -: 2685:basic_string<_CharT, _Traits, _Allocator>::push_back(value_type __c)
        -: 2686:{
        -: 2687:    bool __is_short = !__is_long();
        -: 2688:    size_type __cap;
        -: 2689:    size_type __sz;
        -: 2690:    if (__is_short)
        -: 2691:    {
        -: 2692:        __cap = __min_cap - 1;
        -: 2693:        __sz = __get_short_size();
        -: 2694:    }
        -: 2695:    else
        -: 2696:    {
        -: 2697:        __cap = __get_long_cap() - 1;
        -: 2698:        __sz = __get_long_size();
        -: 2699:    }
        -: 2700:    if (__sz == __cap)
        -: 2701:    {
        -: 2702:        __grow_by(__cap, 1, __sz, __sz, 0);
        -: 2703:        __is_short = !__is_long();
        -: 2704:    }
        -: 2705:    pointer __p;
        -: 2706:    if (__is_short)
        -: 2707:    {
        -: 2708:        __p = __get_short_pointer() + __sz;
        -: 2709:        __set_short_size(__sz+1);
        -: 2710:    }
        -: 2711:    else
        -: 2712:    {
        -: 2713:        __p = __get_long_pointer() + __sz;
        -: 2714:        __set_long_size(__sz+1);
        -: 2715:    }
        -: 2716:    traits_type::assign(*__p, __c);
        -: 2717:    traits_type::assign(*++__p, value_type());
        -: 2718:}
        -: 2719:
        -: 2720:template <class _CharT, class _Traits, class _Allocator>
        -: 2721:template<class _ForwardIterator>
        -: 2722:_EnableIf
        -: 2723:<
        -: 2724:    __is_cpp17_forward_iterator<_ForwardIterator>::value,
        -: 2725:    basic_string<_CharT, _Traits, _Allocator>&
        -: 2726:>
        -: 2727:basic_string<_CharT, _Traits, _Allocator>::append(
        -: 2728:    _ForwardIterator __first, _ForwardIterator __last)
        -: 2729:{
        -: 2730:    size_type __sz = size();
        -: 2731:    size_type __cap = capacity();
        -: 2732:    size_type __n = static_cast<size_type>(_VSTD::distance(__first, __last));
        -: 2733:    if (__n)
        -: 2734:    {
        -: 2735:        if (__string_is_trivial_iterator<_ForwardIterator>::value &&
        -: 2736:            !__addr_in_range(*__first))
        -: 2737:        {
        -: 2738:            if (__cap - __sz < __n)
        -: 2739:                __grow_by(__cap, __sz + __n - __cap, __sz, __sz, 0);
        -: 2740:            pointer __p = __get_pointer() + __sz;
        -: 2741:            for (; __first != __last; ++__p, ++__first)
        -: 2742:                traits_type::assign(*__p, *__first);
        -: 2743:            traits_type::assign(*__p, value_type());
        -: 2744:            __set_size(__sz + __n);
        -: 2745:        }
        -: 2746:        else
        -: 2747:        {
        -: 2748:            const basic_string __temp(__first, __last, __alloc());
        -: 2749:            append(__temp.data(), __temp.size());
        -: 2750:        }
        -: 2751:    }
        -: 2752:    return *this;
        -: 2753:}
        -: 2754:
        -: 2755:template <class _CharT, class _Traits, class _Allocator>
        -: 2756:inline
        -: 2757:basic_string<_CharT, _Traits, _Allocator>&
        -: 2758:basic_string<_CharT, _Traits, _Allocator>::append(const basic_string& __str)
        -: 2759:{
        -: 2760:    return append(__str.data(), __str.size());
        -: 2761:}
        -: 2762:
        -: 2763:template <class _CharT, class _Traits, class _Allocator>
        -: 2764:basic_string<_CharT, _Traits, _Allocator>&
        -: 2765:basic_string<_CharT, _Traits, _Allocator>::append(const basic_string& __str, size_type __pos, size_type __n)
        -: 2766:{
        -: 2767:    size_type __sz = __str.size();
        -: 2768:    if (__pos > __sz)
        -: 2769:        this->__throw_out_of_range();
        -: 2770:    return append(__str.data() + __pos, _VSTD::min(__n, __sz - __pos));
        -: 2771:}
        -: 2772:
        -: 2773:template <class _CharT, class _Traits, class _Allocator>
        -: 2774:template <class _Tp>
        -: 2775:    _EnableIf
        -: 2776:    <
        -: 2777:        __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value  && !__is_same_uncvref<_Tp, basic_string<_CharT, _Traits, _Allocator> >::value,
        -: 2778:        basic_string<_CharT, _Traits, _Allocator>&
        -: 2779:    >
        -: 2780:basic_string<_CharT, _Traits, _Allocator>::append(const _Tp & __t, size_type __pos, size_type __n)
        -: 2781:{
        -: 2782:    __self_view __sv = __t;
        -: 2783:    size_type __sz = __sv.size();
        -: 2784:    if (__pos > __sz)
        -: 2785:        this->__throw_out_of_range();
        -: 2786:    return append(__sv.data() + __pos, _VSTD::min(__n, __sz - __pos));
        -: 2787:}
        -: 2788:
        -: 2789:template <class _CharT, class _Traits, class _Allocator>
        -: 2790:basic_string<_CharT, _Traits, _Allocator>&
        -: 2791:basic_string<_CharT, _Traits, _Allocator>::append(const value_type* __s)
        -: 2792:{
        -: 2793:    _LIBCPP_ASSERT(__s != nullptr, "string::append received nullptr");
        -: 2794:    return append(__s, traits_type::length(__s));
        -: 2795:}
        -: 2796:
        -: 2797:// insert
        -: 2798:
        -: 2799:template <class _CharT, class _Traits, class _Allocator>
        -: 2800:basic_string<_CharT, _Traits, _Allocator>&
        -: 2801:basic_string<_CharT, _Traits, _Allocator>::insert(size_type __pos, const value_type* __s, size_type __n)
        -: 2802:{
        -: 2803:    _LIBCPP_ASSERT(__n == 0 || __s != nullptr, "string::insert received nullptr");
        -: 2804:    size_type __sz = size();
        -: 2805:    if (__pos > __sz)
        -: 2806:        this->__throw_out_of_range();
        -: 2807:    size_type __cap = capacity();
        -: 2808:    if (__cap - __sz >= __n)
        -: 2809:    {
        -: 2810:        if (__n)
        -: 2811:        {
        -: 2812:            value_type* __p = _VSTD::__to_address(__get_pointer());
        -: 2813:            size_type __n_move = __sz - __pos;
        -: 2814:            if (__n_move != 0)
        -: 2815:            {
        -: 2816:                if (__p + __pos <= __s && __s < __p + __sz)
        -: 2817:                    __s += __n;
        -: 2818:                traits_type::move(__p + __pos + __n, __p + __pos, __n_move);
        -: 2819:            }
        -: 2820:            traits_type::move(__p + __pos, __s, __n);
        -: 2821:            __sz += __n;
        -: 2822:            __set_size(__sz);
        -: 2823:            traits_type::assign(__p[__sz], value_type());
        -: 2824:        }
        -: 2825:    }
        -: 2826:    else
        -: 2827:        __grow_by_and_replace(__cap, __sz + __n - __cap, __sz, __pos, 0, __n, __s);
        -: 2828:    return *this;
        -: 2829:}
        -: 2830:
        -: 2831:template <class _CharT, class _Traits, class _Allocator>
        -: 2832:basic_string<_CharT, _Traits, _Allocator>&
        -: 2833:basic_string<_CharT, _Traits, _Allocator>::insert(size_type __pos, size_type __n, value_type __c)
        -: 2834:{
        -: 2835:    size_type __sz = size();
        -: 2836:    if (__pos > __sz)
        -: 2837:        this->__throw_out_of_range();
        -: 2838:    if (__n)
        -: 2839:    {
        -: 2840:        size_type __cap = capacity();
        -: 2841:        value_type* __p;
        -: 2842:        if (__cap - __sz >= __n)
        -: 2843:        {
        -: 2844:            __p = _VSTD::__to_address(__get_pointer());
        -: 2845:            size_type __n_move = __sz - __pos;
        -: 2846:            if (__n_move != 0)
        -: 2847:                traits_type::move(__p + __pos + __n, __p + __pos, __n_move);
        -: 2848:        }
        -: 2849:        else
        -: 2850:        {
        -: 2851:            __grow_by(__cap, __sz + __n - __cap, __sz, __pos, 0, __n);
        -: 2852:            __p = _VSTD::__to_address(__get_long_pointer());
        -: 2853:        }
        -: 2854:        traits_type::assign(__p + __pos, __n, __c);
        -: 2855:        __sz += __n;
        -: 2856:        __set_size(__sz);
        -: 2857:        traits_type::assign(__p[__sz], value_type());
        -: 2858:    }
        -: 2859:    return *this;
        -: 2860:}
        -: 2861:
        -: 2862:template <class _CharT, class _Traits, class _Allocator>
        -: 2863:template<class _InputIterator>
        -: 2864:_EnableIf
        -: 2865:<
        -: 2866:   __is_exactly_cpp17_input_iterator<_InputIterator>::value,
        -: 2867:   typename basic_string<_CharT, _Traits, _Allocator>::iterator
        -: 2868:>
        -: 2869:basic_string<_CharT, _Traits, _Allocator>::insert(const_iterator __pos, _InputIterator __first, _InputIterator __last)
        -: 2870:{
        -: 2871:#if _LIBCPP_DEBUG_LEVEL == 2
        -: 2872:    _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__pos) == this,
        -: 2873:        "string::insert(iterator, range) called with an iterator not"
        -: 2874:        " referring to this string");
        -: 2875:#endif
        -: 2876:    const basic_string __temp(__first, __last, __alloc());
        -: 2877:    return insert(__pos, __temp.data(), __temp.data() + __temp.size());
        -: 2878:}
        -: 2879:
        -: 2880:template <class _CharT, class _Traits, class _Allocator>
        -: 2881:template<class _ForwardIterator>
        -: 2882:_EnableIf
        -: 2883:<
        -: 2884:    __is_cpp17_forward_iterator<_ForwardIterator>::value,
        -: 2885:    typename basic_string<_CharT, _Traits, _Allocator>::iterator
        -: 2886:>
        -: 2887:basic_string<_CharT, _Traits, _Allocator>::insert(const_iterator __pos, _ForwardIterator __first, _ForwardIterator __last)
        -: 2888:{
        -: 2889:    _LIBCPP_DEBUG_ASSERT(__get_const_db()->__find_c_from_i(&__pos) == this,
        -: 2890:                         "string::insert(iterator, range) called with an iterator not referring to this string");
        -: 2891:
        -: 2892:    size_type __ip = static_cast<size_type>(__pos - begin());
        -: 2893:    size_type __n = static_cast<size_type>(std::distance(__first, __last));
        -: 2894:    if (__n == 0)
        -: 2895:        return begin() + __ip;
        -: 2896:
        -: 2897:    if (__string_is_trivial_iterator<_ForwardIterator>::value && !__addr_in_range(*__first))
        -: 2898:    {
        -: 2899:        return __insert_from_safe_copy(__n, __ip, __first, __last);
        -: 2900:    }
        -: 2901:    else
        -: 2902:    {
        -: 2903:        const basic_string __temp(__first, __last, __alloc());
        -: 2904:        return __insert_from_safe_copy(__n, __ip, __temp.begin(), __temp.end());
        -: 2905:    }
        -: 2906:}
        -: 2907:
        -: 2908:template <class _CharT, class _Traits, class _Allocator>
        -: 2909:inline
        -: 2910:basic_string<_CharT, _Traits, _Allocator>&
        -: 2911:basic_string<_CharT, _Traits, _Allocator>::insert(size_type __pos1, const basic_string& __str)
        -: 2912:{
        -: 2913:    return insert(__pos1, __str.data(), __str.size());
        -: 2914:}
        -: 2915:
        -: 2916:template <class _CharT, class _Traits, class _Allocator>
        -: 2917:basic_string<_CharT, _Traits, _Allocator>&
        -: 2918:basic_string<_CharT, _Traits, _Allocator>::insert(size_type __pos1, const basic_string& __str,
        -: 2919:                                                  size_type __pos2, size_type __n)
        -: 2920:{
        -: 2921:    size_type __str_sz = __str.size();
        -: 2922:    if (__pos2 > __str_sz)
        -: 2923:        this->__throw_out_of_range();
        -: 2924:    return insert(__pos1, __str.data() + __pos2, _VSTD::min(__n, __str_sz - __pos2));
        -: 2925:}
        -: 2926:
        -: 2927:template <class _CharT, class _Traits, class _Allocator>
        -: 2928:template <class _Tp>
        -: 2929:_EnableIf
        -: 2930:<
        -: 2931:    __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value  && !__is_same_uncvref<_Tp, basic_string<_CharT, _Traits, _Allocator> >::value,
        -: 2932:    basic_string<_CharT, _Traits, _Allocator>&
        -: 2933:>
        -: 2934:basic_string<_CharT, _Traits, _Allocator>::insert(size_type __pos1, const _Tp& __t,
        -: 2935:                                                  size_type __pos2, size_type __n)
        -: 2936:{
        -: 2937:    __self_view __sv = __t;
        -: 2938:    size_type __str_sz = __sv.size();
        -: 2939:    if (__pos2 > __str_sz)
        -: 2940:        this->__throw_out_of_range();
        -: 2941:    return insert(__pos1, __sv.data() + __pos2, _VSTD::min(__n, __str_sz - __pos2));
        -: 2942:}
        -: 2943:
        -: 2944:template <class _CharT, class _Traits, class _Allocator>
        -: 2945:basic_string<_CharT, _Traits, _Allocator>&
        -: 2946:basic_string<_CharT, _Traits, _Allocator>::insert(size_type __pos, const value_type* __s)
        -: 2947:{
        -: 2948:    _LIBCPP_ASSERT(__s != nullptr, "string::insert received nullptr");
        -: 2949:    return insert(__pos, __s, traits_type::length(__s));
        -: 2950:}
        -: 2951:
        -: 2952:template <class _CharT, class _Traits, class _Allocator>
        -: 2953:typename basic_string<_CharT, _Traits, _Allocator>::iterator
        -: 2954:basic_string<_CharT, _Traits, _Allocator>::insert(const_iterator __pos, value_type __c)
        -: 2955:{
        -: 2956:    size_type __ip = static_cast<size_type>(__pos - begin());
        -: 2957:    size_type __sz = size();
        -: 2958:    size_type __cap = capacity();
        -: 2959:    value_type* __p;
        -: 2960:    if (__cap == __sz)
        -: 2961:    {
        -: 2962:        __grow_by(__cap, 1, __sz, __ip, 0, 1);
        -: 2963:        __p = _VSTD::__to_address(__get_long_pointer());
        -: 2964:    }
        -: 2965:    else
        -: 2966:    {
        -: 2967:        __p = _VSTD::__to_address(__get_pointer());
        -: 2968:        size_type __n_move = __sz - __ip;
        -: 2969:        if (__n_move != 0)
        -: 2970:            traits_type::move(__p + __ip + 1, __p + __ip, __n_move);
        -: 2971:    }
        -: 2972:    traits_type::assign(__p[__ip], __c);
        -: 2973:    traits_type::assign(__p[++__sz], value_type());
        -: 2974:    __set_size(__sz);
        -: 2975:    return begin() + static_cast<difference_type>(__ip);
        -: 2976:}
        -: 2977:
        -: 2978:template <class _CharT, class _Traits, class _Allocator>
        -: 2979:inline
        -: 2980:typename basic_string<_CharT, _Traits, _Allocator>::iterator
        -: 2981:basic_string<_CharT, _Traits, _Allocator>::insert(const_iterator __pos, size_type __n, value_type __c)
        -: 2982:{
        -: 2983:#if _LIBCPP_DEBUG_LEVEL == 2
        -: 2984:    _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__pos) == this,
        -: 2985:        "string::insert(iterator, n, value) called with an iterator not"
        -: 2986:        " referring to this string");
        -: 2987:#endif
        -: 2988:    difference_type __p = __pos - begin();
        -: 2989:    insert(static_cast<size_type>(__p), __n, __c);
        -: 2990:    return begin() + __p;
        -: 2991:}
        -: 2992:
        -: 2993:// replace
        -: 2994:
        -: 2995:template <class _CharT, class _Traits, class _Allocator>
        -: 2996:basic_string<_CharT, _Traits, _Allocator>&
        -: 2997:basic_string<_CharT, _Traits, _Allocator>::replace(size_type __pos, size_type __n1, const value_type* __s, size_type __n2)
        -: 2998:    _LIBCPP_DISABLE_UBSAN_UNSIGNED_INTEGER_CHECK
        -: 2999:{
        -: 3000:    _LIBCPP_ASSERT(__n2 == 0 || __s != nullptr, "string::replace received nullptr");
        -: 3001:    size_type __sz = size();
        -: 3002:    if (__pos > __sz)
        -: 3003:        this->__throw_out_of_range();
        -: 3004:    __n1 = _VSTD::min(__n1, __sz - __pos);
        -: 3005:    size_type __cap = capacity();
        -: 3006:    if (__cap - __sz + __n1 >= __n2)
        -: 3007:    {
        -: 3008:        value_type* __p = _VSTD::__to_address(__get_pointer());
        -: 3009:        if (__n1 != __n2)
        -: 3010:        {
        -: 3011:            size_type __n_move = __sz - __pos - __n1;
        -: 3012:            if (__n_move != 0)
        -: 3013:            {
        -: 3014:                if (__n1 > __n2)
        -: 3015:                {
        -: 3016:                    traits_type::move(__p + __pos, __s, __n2);
        -: 3017:                    traits_type::move(__p + __pos + __n2, __p + __pos + __n1, __n_move);
        -: 3018:                    goto __finish;
        -: 3019:                }
        -: 3020:                if (__p + __pos < __s && __s < __p + __sz)
        -: 3021:                {
        -: 3022:                    if (__p + __pos + __n1 <= __s)
        -: 3023:                        __s += __n2 - __n1;
        -: 3024:                    else // __p + __pos < __s < __p + __pos + __n1
        -: 3025:                    {
        -: 3026:                        traits_type::move(__p + __pos, __s, __n1);
        -: 3027:                        __pos += __n1;
        -: 3028:                        __s += __n2;
        -: 3029:                        __n2 -= __n1;
        -: 3030:                        __n1 = 0;
        -: 3031:                    }
        -: 3032:                }
        -: 3033:                traits_type::move(__p + __pos + __n2, __p + __pos + __n1, __n_move);
        -: 3034:            }
        -: 3035:        }
        -: 3036:        traits_type::move(__p + __pos, __s, __n2);
        -: 3037:__finish:
        -: 3038:// __sz += __n2 - __n1; in this and the below function below can cause unsigned
        -: 3039:// integer overflow, but this is a safe operation, so we disable the check.
        -: 3040:        __sz += __n2 - __n1;
        -: 3041:        __set_size(__sz);
        -: 3042:        __invalidate_iterators_past(__sz);
        -: 3043:        traits_type::assign(__p[__sz], value_type());
        -: 3044:    }
        -: 3045:    else
        -: 3046:        __grow_by_and_replace(__cap, __sz - __n1 + __n2 - __cap, __sz, __pos, __n1, __n2, __s);
        -: 3047:    return *this;
        -: 3048:}
        -: 3049:
        -: 3050:template <class _CharT, class _Traits, class _Allocator>
        -: 3051:basic_string<_CharT, _Traits, _Allocator>&
        -: 3052:basic_string<_CharT, _Traits, _Allocator>::replace(size_type __pos, size_type __n1, size_type __n2, value_type __c)
        -: 3053:    _LIBCPP_DISABLE_UBSAN_UNSIGNED_INTEGER_CHECK
        -: 3054:{
        -: 3055:    size_type __sz = size();
        -: 3056:    if (__pos > __sz)
        -: 3057:        this->__throw_out_of_range();
        -: 3058:    __n1 = _VSTD::min(__n1, __sz - __pos);
        -: 3059:    size_type __cap = capacity();
        -: 3060:    value_type* __p;
        -: 3061:    if (__cap - __sz + __n1 >= __n2)
        -: 3062:    {
        -: 3063:        __p = _VSTD::__to_address(__get_pointer());
        -: 3064:        if (__n1 != __n2)
        -: 3065:        {
        -: 3066:            size_type __n_move = __sz - __pos - __n1;
        -: 3067:            if (__n_move != 0)
        -: 3068:                traits_type::move(__p + __pos + __n2, __p + __pos + __n1, __n_move);
        -: 3069:        }
        -: 3070:    }
        -: 3071:    else
        -: 3072:    {
        -: 3073:        __grow_by(__cap, __sz - __n1 + __n2 - __cap, __sz, __pos, __n1, __n2);
        -: 3074:        __p = _VSTD::__to_address(__get_long_pointer());
        -: 3075:    }
        -: 3076:    traits_type::assign(__p + __pos, __n2, __c);
        -: 3077:    __sz += __n2 - __n1;
        -: 3078:    __set_size(__sz);
        -: 3079:    __invalidate_iterators_past(__sz);
        -: 3080:    traits_type::assign(__p[__sz], value_type());
        -: 3081:    return *this;
        -: 3082:}
        -: 3083:
        -: 3084:template <class _CharT, class _Traits, class _Allocator>
        -: 3085:template<class _InputIterator>
        -: 3086:_EnableIf
        -: 3087:<
        -: 3088:    __is_cpp17_input_iterator<_InputIterator>::value,
        -: 3089:    basic_string<_CharT, _Traits, _Allocator>&
        -: 3090:>
        -: 3091:basic_string<_CharT, _Traits, _Allocator>::replace(const_iterator __i1, const_iterator __i2,
        -: 3092:                                                   _InputIterator __j1, _InputIterator __j2)
        -: 3093:{
        -: 3094:    const basic_string __temp(__j1, __j2, __alloc());
        -: 3095:    return this->replace(__i1, __i2, __temp);
        -: 3096:}
        -: 3097:
        -: 3098:template <class _CharT, class _Traits, class _Allocator>
        -: 3099:inline
        -: 3100:basic_string<_CharT, _Traits, _Allocator>&
        -: 3101:basic_string<_CharT, _Traits, _Allocator>::replace(size_type __pos1, size_type __n1, const basic_string& __str)
        -: 3102:{
        -: 3103:    return replace(__pos1, __n1, __str.data(), __str.size());
        -: 3104:}
        -: 3105:
        -: 3106:template <class _CharT, class _Traits, class _Allocator>
        -: 3107:basic_string<_CharT, _Traits, _Allocator>&
        -: 3108:basic_string<_CharT, _Traits, _Allocator>::replace(size_type __pos1, size_type __n1, const basic_string& __str,
        -: 3109:                                                   size_type __pos2, size_type __n2)
        -: 3110:{
        -: 3111:    size_type __str_sz = __str.size();
        -: 3112:    if (__pos2 > __str_sz)
        -: 3113:        this->__throw_out_of_range();
        -: 3114:    return replace(__pos1, __n1, __str.data() + __pos2, _VSTD::min(__n2, __str_sz - __pos2));
        -: 3115:}
        -: 3116:
        -: 3117:template <class _CharT, class _Traits, class _Allocator>
        -: 3118:template <class _Tp>
        -: 3119:_EnableIf
        -: 3120:<
        -: 3121:    __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value && !__is_same_uncvref<_Tp, basic_string<_CharT, _Traits, _Allocator> >::value,
        -: 3122:    basic_string<_CharT, _Traits, _Allocator>&
        -: 3123:>
        -: 3124:basic_string<_CharT, _Traits, _Allocator>::replace(size_type __pos1, size_type __n1, const _Tp& __t,
        -: 3125:                                                   size_type __pos2, size_type __n2)
        -: 3126:{
        -: 3127:    __self_view __sv = __t;
        -: 3128:    size_type __str_sz = __sv.size();
        -: 3129:    if (__pos2 > __str_sz)
        -: 3130:        this->__throw_out_of_range();
        -: 3131:    return replace(__pos1, __n1, __sv.data() + __pos2, _VSTD::min(__n2, __str_sz - __pos2));
        -: 3132:}
        -: 3133:
        -: 3134:template <class _CharT, class _Traits, class _Allocator>
        -: 3135:basic_string<_CharT, _Traits, _Allocator>&
        -: 3136:basic_string<_CharT, _Traits, _Allocator>::replace(size_type __pos, size_type __n1, const value_type* __s)
        -: 3137:{
        -: 3138:    _LIBCPP_ASSERT(__s != nullptr, "string::replace received nullptr");
        -: 3139:    return replace(__pos, __n1, __s, traits_type::length(__s));
        -: 3140:}
        -: 3141:
        -: 3142:template <class _CharT, class _Traits, class _Allocator>
        -: 3143:inline
        -: 3144:basic_string<_CharT, _Traits, _Allocator>&
        -: 3145:basic_string<_CharT, _Traits, _Allocator>::replace(const_iterator __i1, const_iterator __i2, const basic_string& __str)
        -: 3146:{
        -: 3147:    return replace(static_cast<size_type>(__i1 - begin()), static_cast<size_type>(__i2 - __i1),
        -: 3148:                   __str.data(), __str.size());
        -: 3149:}
        -: 3150:
        -: 3151:template <class _CharT, class _Traits, class _Allocator>
        -: 3152:inline
        -: 3153:basic_string<_CharT, _Traits, _Allocator>&
        -: 3154:basic_string<_CharT, _Traits, _Allocator>::replace(const_iterator __i1, const_iterator __i2, const value_type* __s, size_type __n)
        -: 3155:{
        -: 3156:    return replace(static_cast<size_type>(__i1 - begin()), static_cast<size_type>(__i2 - __i1), __s, __n);
        -: 3157:}
        -: 3158:
        -: 3159:template <class _CharT, class _Traits, class _Allocator>
        -: 3160:inline
        -: 3161:basic_string<_CharT, _Traits, _Allocator>&
        -: 3162:basic_string<_CharT, _Traits, _Allocator>::replace(const_iterator __i1, const_iterator __i2, const value_type* __s)
        -: 3163:{
        -: 3164:    return replace(static_cast<size_type>(__i1 - begin()), static_cast<size_type>(__i2 - __i1), __s);
        -: 3165:}
        -: 3166:
        -: 3167:template <class _CharT, class _Traits, class _Allocator>
        -: 3168:inline
        -: 3169:basic_string<_CharT, _Traits, _Allocator>&
        -: 3170:basic_string<_CharT, _Traits, _Allocator>::replace(const_iterator __i1, const_iterator __i2, size_type __n, value_type __c)
        -: 3171:{
        -: 3172:    return replace(static_cast<size_type>(__i1 - begin()), static_cast<size_type>(__i2 - __i1), __n, __c);
        -: 3173:}
        -: 3174:
        -: 3175:// erase
        -: 3176:
        -: 3177:// 'externally instantiated' erase() implementation, called when __n != npos.
        -: 3178:// Does not check __pos against size()
        -: 3179:template <class _CharT, class _Traits, class _Allocator>
        -: 3180:void
        -: 3181:basic_string<_CharT, _Traits, _Allocator>::__erase_external_with_move(
        -: 3182:    size_type __pos, size_type __n)
        -: 3183:{
        -: 3184:    if (__n)
        -: 3185:    {
        -: 3186:        size_type __sz = size();
        -: 3187:        value_type* __p = _VSTD::__to_address(__get_pointer());
        -: 3188:        __n = _VSTD::min(__n, __sz - __pos);
        -: 3189:        size_type __n_move = __sz - __pos - __n;
        -: 3190:        if (__n_move != 0)
        -: 3191:            traits_type::move(__p + __pos, __p + __pos + __n, __n_move);
        -: 3192:        __sz -= __n;
        -: 3193:        __set_size(__sz);
        -: 3194:        __invalidate_iterators_past(__sz);
        -: 3195:        traits_type::assign(__p[__sz], value_type());
        -: 3196:    }
        -: 3197:}
        -: 3198:
        -: 3199:template <class _CharT, class _Traits, class _Allocator>
        -: 3200:basic_string<_CharT, _Traits, _Allocator>&
        -: 3201:basic_string<_CharT, _Traits, _Allocator>::erase(size_type __pos,
        -: 3202:                                                 size_type __n) {
        -: 3203:  if (__pos > size()) this->__throw_out_of_range();
        -: 3204:  if (__n == npos) {
        -: 3205:    __erase_to_end(__pos);
        -: 3206:  } else {
        -: 3207:    __erase_external_with_move(__pos, __n);
        -: 3208:  }
        -: 3209:  return *this;
        -: 3210:}
        -: 3211:
        -: 3212:template <class _CharT, class _Traits, class _Allocator>
        -: 3213:inline
        -: 3214:typename basic_string<_CharT, _Traits, _Allocator>::iterator
        -: 3215:basic_string<_CharT, _Traits, _Allocator>::erase(const_iterator __pos)
        -: 3216:{
        -: 3217:#if _LIBCPP_DEBUG_LEVEL == 2
        -: 3218:    _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__pos) == this,
        -: 3219:        "string::erase(iterator) called with an iterator not"
        -: 3220:        " referring to this string");
        -: 3221:#endif
        -: 3222:    _LIBCPP_ASSERT(__pos != end(),
        -: 3223:        "string::erase(iterator) called with a non-dereferenceable iterator");
        -: 3224:    iterator __b = begin();
        -: 3225:    size_type __r = static_cast<size_type>(__pos - __b);
        -: 3226:    erase(__r, 1);
        -: 3227:    return __b + static_cast<difference_type>(__r);
        -: 3228:}
        -: 3229:
        -: 3230:template <class _CharT, class _Traits, class _Allocator>
        -: 3231:inline
        -: 3232:typename basic_string<_CharT, _Traits, _Allocator>::iterator
        -: 3233:basic_string<_CharT, _Traits, _Allocator>::erase(const_iterator __first, const_iterator __last)
        -: 3234:{
        -: 3235:#if _LIBCPP_DEBUG_LEVEL == 2
        -: 3236:    _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__first) == this,
        -: 3237:        "string::erase(iterator,  iterator) called with an iterator not"
        -: 3238:        " referring to this string");
        -: 3239:#endif
        -: 3240:    _LIBCPP_ASSERT(__first <= __last, "string::erase(first, last) called with invalid range");
        -: 3241:    iterator __b = begin();
        -: 3242:    size_type __r = static_cast<size_type>(__first - __b);
        -: 3243:    erase(__r, static_cast<size_type>(__last - __first));
        -: 3244:    return __b + static_cast<difference_type>(__r);
        -: 3245:}
        -: 3246:
        -: 3247:template <class _CharT, class _Traits, class _Allocator>
        -: 3248:inline
        -: 3249:void
        -: 3250:basic_string<_CharT, _Traits, _Allocator>::pop_back()
        -: 3251:{
        -: 3252:    _LIBCPP_ASSERT(!empty(), "string::pop_back(): string is already empty");
        -: 3253:    size_type __sz;
        -: 3254:    if (__is_long())
        -: 3255:    {
        -: 3256:        __sz = __get_long_size() - 1;
        -: 3257:        __set_long_size(__sz);
        -: 3258:        traits_type::assign(*(__get_long_pointer() + __sz), value_type());
        -: 3259:    }
        -: 3260:    else
        -: 3261:    {
        -: 3262:        __sz = __get_short_size() - 1;
        -: 3263:        __set_short_size(__sz);
        -: 3264:        traits_type::assign(*(__get_short_pointer() + __sz), value_type());
        -: 3265:    }
        -: 3266:    __invalidate_iterators_past(__sz);
        -: 3267:}
        -: 3268:
        -: 3269:template <class _CharT, class _Traits, class _Allocator>
        -: 3270:inline
        -: 3271:void
        -: 3272:basic_string<_CharT, _Traits, _Allocator>::clear() _NOEXCEPT
        -: 3273:{
        -: 3274:    __invalidate_all_iterators();
        -: 3275:    if (__is_long())
        -: 3276:    {
        -: 3277:        traits_type::assign(*__get_long_pointer(), value_type());
        -: 3278:        __set_long_size(0);
        -: 3279:    }
        -: 3280:    else
        -: 3281:    {
        -: 3282:        traits_type::assign(*__get_short_pointer(), value_type());
        -: 3283:        __set_short_size(0);
        -: 3284:    }
        -: 3285:}
        -: 3286:
        -: 3287:template <class _CharT, class _Traits, class _Allocator>
        -: 3288:inline
        -: 3289:void
        -: 3290:basic_string<_CharT, _Traits, _Allocator>::__erase_to_end(size_type __pos)
        -: 3291:{
        -: 3292:    if (__is_long())
        -: 3293:    {
        -: 3294:        traits_type::assign(*(__get_long_pointer() + __pos), value_type());
        -: 3295:        __set_long_size(__pos);
        -: 3296:    }
        -: 3297:    else
        -: 3298:    {
        -: 3299:        traits_type::assign(*(__get_short_pointer() + __pos), value_type());
        -: 3300:        __set_short_size(__pos);
        -: 3301:    }
        -: 3302:    __invalidate_iterators_past(__pos);
        -: 3303:}
        -: 3304:
        -: 3305:template <class _CharT, class _Traits, class _Allocator>
        -: 3306:void
        -: 3307:basic_string<_CharT, _Traits, _Allocator>::resize(size_type __n, value_type __c)
        -: 3308:{
        -: 3309:    size_type __sz = size();
        -: 3310:    if (__n > __sz)
        -: 3311:        append(__n - __sz, __c);
        -: 3312:    else
        -: 3313:        __erase_to_end(__n);
        -: 3314:}
        -: 3315:
        -: 3316:template <class _CharT, class _Traits, class _Allocator>
        -: 3317:inline void
        -: 3318:basic_string<_CharT, _Traits, _Allocator>::__resize_default_init(size_type __n)
        -: 3319:{
        -: 3320:    size_type __sz = size();
        -: 3321:    if (__n > __sz) {
        -: 3322:       __append_default_init(__n - __sz);
        -: 3323:    } else
        -: 3324:        __erase_to_end(__n);
        -: 3325:}
        -: 3326:
        -: 3327:template <class _CharT, class _Traits, class _Allocator>
        -: 3328:inline
        -: 3329:typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3330:basic_string<_CharT, _Traits, _Allocator>::max_size() const _NOEXCEPT
        -: 3331:{
        -: 3332:    size_type __m = __alloc_traits::max_size(__alloc());
        -: 3333:#ifdef _LIBCPP_BIG_ENDIAN
        -: 3334:    return (__m <= ~__long_mask ? __m : __m/2) - __alignment;
        -: 3335:#else
        -: 3336:    return __m - __alignment;
        -: 3337:#endif
        -: 3338:}
        -: 3339:
        -: 3340:template <class _CharT, class _Traits, class _Allocator>
        -: 3341:void
        -: 3342:basic_string<_CharT, _Traits, _Allocator>::reserve(size_type __requested_capacity)
        -: 3343:{
        -: 3344:    if (__requested_capacity > max_size())
        -: 3345:        this->__throw_length_error();
        -: 3346:
        -: 3347:#if _LIBCPP_STD_VER > 17
        -: 3348:    // Reserve never shrinks as of C++20.
        -: 3349:    if (__requested_capacity <= capacity()) return;
        -: 3350:#endif
        -: 3351:
        -: 3352:    size_type __target_capacity = _VSTD::max(__requested_capacity, size());
        -: 3353:    __target_capacity = __recommend(__target_capacity);
        -: 3354:    if (__target_capacity == capacity()) return;
        -: 3355:
        -: 3356:    __shrink_or_extend(__target_capacity);
        -: 3357:}
        -: 3358:
        -: 3359:template <class _CharT, class _Traits, class _Allocator>
        -: 3360:inline
        -: 3361:void
        -: 3362:basic_string<_CharT, _Traits, _Allocator>::shrink_to_fit() _NOEXCEPT
        -: 3363:{
        -: 3364:    size_type __target_capacity = __recommend(size());
        -: 3365:    if (__target_capacity == capacity()) return;
        -: 3366:
        -: 3367:    __shrink_or_extend(__target_capacity);
        -: 3368:}
        -: 3369:
        -: 3370:template <class _CharT, class _Traits, class _Allocator>
        -: 3371:inline
        -: 3372:void
        -: 3373:basic_string<_CharT, _Traits, _Allocator>::__shrink_or_extend(size_type __target_capacity)
        -: 3374:{
        -: 3375:    size_type __cap = capacity();
        -: 3376:    size_type __sz = size();
        -: 3377:
        -: 3378:    pointer __new_data, __p;
        -: 3379:    bool __was_long, __now_long;
        -: 3380:    if (__target_capacity == __min_cap - 1)
        -: 3381:    {
        -: 3382:        __was_long = true;
        -: 3383:        __now_long = false;
        -: 3384:        __new_data = __get_short_pointer();
        -: 3385:        __p = __get_long_pointer();
        -: 3386:    }
        -: 3387:    else
        -: 3388:    {
        -: 3389:        if (__target_capacity > __cap)
        -: 3390:            __new_data = __alloc_traits::allocate(__alloc(), __target_capacity+1);
        -: 3391:        else
        -: 3392:        {
        -: 3393:        #ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3394:            try
        -: 3395:            {
        -: 3396:        #endif // _LIBCPP_NO_EXCEPTIONS
        -: 3397:                __new_data = __alloc_traits::allocate(__alloc(), __target_capacity+1);
        -: 3398:        #ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3399:            }
        -: 3400:            catch (...)
        -: 3401:            {
        -: 3402:                return;
        -: 3403:            }
        -: 3404:        #else  // _LIBCPP_NO_EXCEPTIONS
        -: 3405:            if (__new_data == nullptr)
        -: 3406:                return;
        -: 3407:        #endif // _LIBCPP_NO_EXCEPTIONS
        -: 3408:        }
        -: 3409:        __now_long = true;
        -: 3410:        __was_long = __is_long();
        -: 3411:        __p = __get_pointer();
        -: 3412:    }
        -: 3413:    traits_type::copy(_VSTD::__to_address(__new_data),
        -: 3414:                        _VSTD::__to_address(__p), size()+1);
        -: 3415:    if (__was_long)
        -: 3416:        __alloc_traits::deallocate(__alloc(), __p, __cap+1);
        -: 3417:    if (__now_long)
        -: 3418:    {
        -: 3419:        __set_long_cap(__target_capacity+1);
        -: 3420:        __set_long_size(__sz);
        -: 3421:        __set_long_pointer(__new_data);
        -: 3422:    }
        -: 3423:    else
        -: 3424:        __set_short_size(__sz);
        -: 3425:    __invalidate_all_iterators();
        -: 3426:}
        -: 3427:
        -: 3428:template <class _CharT, class _Traits, class _Allocator>
        -: 3429:inline
        -: 3430:typename basic_string<_CharT, _Traits, _Allocator>::const_reference
        -: 3431:basic_string<_CharT, _Traits, _Allocator>::operator[](size_type __pos) const _NOEXCEPT
        -: 3432:{
        -: 3433:    _LIBCPP_ASSERT(__pos <= size(), "string index out of bounds");
        -: 3434:    return *(data() + __pos);
        -: 3435:}
        -: 3436:
        -: 3437:template <class _CharT, class _Traits, class _Allocator>
        -: 3438:inline
        -: 3439:typename basic_string<_CharT, _Traits, _Allocator>::reference
        -: 3440:basic_string<_CharT, _Traits, _Allocator>::operator[](size_type __pos) _NOEXCEPT
        -: 3441:{
        -: 3442:    _LIBCPP_ASSERT(__pos <= size(), "string index out of bounds");
        -: 3443:    return *(__get_pointer() + __pos);
        -: 3444:}
        -: 3445:
        -: 3446:template <class _CharT, class _Traits, class _Allocator>
        -: 3447:typename basic_string<_CharT, _Traits, _Allocator>::const_reference
        -: 3448:basic_string<_CharT, _Traits, _Allocator>::at(size_type __n) const
        -: 3449:{
        -: 3450:    if (__n >= size())
        -: 3451:        this->__throw_out_of_range();
        -: 3452:    return (*this)[__n];
        -: 3453:}
        -: 3454:
        -: 3455:template <class _CharT, class _Traits, class _Allocator>
        -: 3456:typename basic_string<_CharT, _Traits, _Allocator>::reference
        -: 3457:basic_string<_CharT, _Traits, _Allocator>::at(size_type __n)
        -: 3458:{
        -: 3459:    if (__n >= size())
        -: 3460:        this->__throw_out_of_range();
        -: 3461:    return (*this)[__n];
        -: 3462:}
        -: 3463:
        -: 3464:template <class _CharT, class _Traits, class _Allocator>
        -: 3465:inline
        -: 3466:typename basic_string<_CharT, _Traits, _Allocator>::reference
        -: 3467:basic_string<_CharT, _Traits, _Allocator>::front() _NOEXCEPT
        -: 3468:{
        -: 3469:    _LIBCPP_ASSERT(!empty(), "string::front(): string is empty");
        -: 3470:    return *__get_pointer();
        -: 3471:}
        -: 3472:
        -: 3473:template <class _CharT, class _Traits, class _Allocator>
        -: 3474:inline
        -: 3475:typename basic_string<_CharT, _Traits, _Allocator>::const_reference
        -: 3476:basic_string<_CharT, _Traits, _Allocator>::front() const _NOEXCEPT
        -: 3477:{
        -: 3478:    _LIBCPP_ASSERT(!empty(), "string::front(): string is empty");
        -: 3479:    return *data();
        -: 3480:}
        -: 3481:
        -: 3482:template <class _CharT, class _Traits, class _Allocator>
        -: 3483:inline
        -: 3484:typename basic_string<_CharT, _Traits, _Allocator>::reference
        -: 3485:basic_string<_CharT, _Traits, _Allocator>::back() _NOEXCEPT
        -: 3486:{
        -: 3487:    _LIBCPP_ASSERT(!empty(), "string::back(): string is empty");
        -: 3488:    return *(__get_pointer() + size() - 1);
        -: 3489:}
        -: 3490:
        -: 3491:template <class _CharT, class _Traits, class _Allocator>
        -: 3492:inline
        -: 3493:typename basic_string<_CharT, _Traits, _Allocator>::const_reference
        -: 3494:basic_string<_CharT, _Traits, _Allocator>::back() const _NOEXCEPT
        -: 3495:{
        -: 3496:    _LIBCPP_ASSERT(!empty(), "string::back(): string is empty");
        -: 3497:    return *(data() + size() - 1);
        -: 3498:}
        -: 3499:
        -: 3500:template <class _CharT, class _Traits, class _Allocator>
        -: 3501:typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3502:basic_string<_CharT, _Traits, _Allocator>::copy(value_type* __s, size_type __n, size_type __pos) const
        -: 3503:{
        -: 3504:    size_type __sz = size();
        -: 3505:    if (__pos > __sz)
        -: 3506:        this->__throw_out_of_range();
        -: 3507:    size_type __rlen = _VSTD::min(__n, __sz - __pos);
        -: 3508:    traits_type::copy(__s, data() + __pos, __rlen);
        -: 3509:    return __rlen;
        -: 3510:}
        -: 3511:
        -: 3512:template <class _CharT, class _Traits, class _Allocator>
        -: 3513:inline
        -: 3514:basic_string<_CharT, _Traits, _Allocator>
        -: 3515:basic_string<_CharT, _Traits, _Allocator>::substr(size_type __pos, size_type __n) const
        -: 3516:{
        -: 3517:    return basic_string(*this, __pos, __n, __alloc());
        -: 3518:}
        -: 3519:
        -: 3520:template <class _CharT, class _Traits, class _Allocator>
        -: 3521:inline
        -: 3522:void
        -: 3523:basic_string<_CharT, _Traits, _Allocator>::swap(basic_string& __str)
        -: 3524:#if _LIBCPP_STD_VER >= 14
        -: 3525:        _NOEXCEPT
        -: 3526:#else
        -: 3527:        _NOEXCEPT_(!__alloc_traits::propagate_on_container_swap::value ||
        -: 3528:                    __is_nothrow_swappable<allocator_type>::value)
        -: 3529:#endif
        -: 3530:{
        -: 3531:#if _LIBCPP_DEBUG_LEVEL == 2
        -: 3532:    if (!__is_long())
        -: 3533:        __get_db()->__invalidate_all(this);
        -: 3534:    if (!__str.__is_long())
        -: 3535:        __get_db()->__invalidate_all(&__str);
        -: 3536:    __get_db()->swap(this, &__str);
        -: 3537:#endif
        -: 3538:    _LIBCPP_ASSERT(
        -: 3539:        __alloc_traits::propagate_on_container_swap::value ||
        -: 3540:        __alloc_traits::is_always_equal::value ||
        -: 3541:        __alloc() == __str.__alloc(), "swapping non-equal allocators");
        -: 3542:    _VSTD::swap(__r_.first(), __str.__r_.first());
        -: 3543:    _VSTD::__swap_allocator(__alloc(), __str.__alloc());
        -: 3544:}
        -: 3545:
        -: 3546:// find
        -: 3547:
        -: 3548:template <class _Traits>
        -: 3549:struct _LIBCPP_HIDDEN __traits_eq
        -: 3550:{
        -: 3551:    typedef typename _Traits::char_type char_type;
        -: 3552:    _LIBCPP_INLINE_VISIBILITY
        -: 3553:    bool operator()(const char_type& __x, const char_type& __y) _NOEXCEPT
        -: 3554:        {return _Traits::eq(__x, __y);}
        -: 3555:};
        -: 3556:
        -: 3557:template<class _CharT, class _Traits, class _Allocator>
        -: 3558:typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3559:basic_string<_CharT, _Traits, _Allocator>::find(const value_type* __s,
        -: 3560:                                                size_type __pos,
        -: 3561:                                                size_type __n) const _NOEXCEPT
        -: 3562:{
        -: 3563:    _LIBCPP_ASSERT(__n == 0 || __s != nullptr, "string::find(): received nullptr");
        -: 3564:    return __str_find<value_type, size_type, traits_type, npos>
        -: 3565:        (data(), size(), __s, __pos, __n);
        -: 3566:}
        -: 3567:
        -: 3568:template<class _CharT, class _Traits, class _Allocator>
        -: 3569:inline
        -: 3570:typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3571:basic_string<_CharT, _Traits, _Allocator>::find(const basic_string& __str,
        -: 3572:                                                size_type __pos) const _NOEXCEPT
        -: 3573:{
        -: 3574:    return __str_find<value_type, size_type, traits_type, npos>
        -: 3575:        (data(), size(), __str.data(), __pos, __str.size());
        -: 3576:}
        -: 3577:
        -: 3578:template<class _CharT, class _Traits, class _Allocator>
        -: 3579:template <class _Tp>
        -: 3580:_EnableIf
        -: 3581:<
        -: 3582:    __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value,
        -: 3583:    typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3584:>
        -: 3585:basic_string<_CharT, _Traits, _Allocator>::find(const _Tp &__t,
        -: 3586:                                                size_type __pos) const _NOEXCEPT
        -: 3587:{
        -: 3588:    __self_view __sv = __t;
        -: 3589:    return __str_find<value_type, size_type, traits_type, npos>
        -: 3590:        (data(), size(), __sv.data(), __pos, __sv.size());
        -: 3591:}
        -: 3592:
        -: 3593:template<class _CharT, class _Traits, class _Allocator>
        -: 3594:inline
        -: 3595:typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3596:basic_string<_CharT, _Traits, _Allocator>::find(const value_type* __s,
        -: 3597:                                                size_type __pos) const _NOEXCEPT
        -: 3598:{
        -: 3599:    _LIBCPP_ASSERT(__s != nullptr, "string::find(): received nullptr");
        -: 3600:    return __str_find<value_type, size_type, traits_type, npos>
        -: 3601:        (data(), size(), __s, __pos, traits_type::length(__s));
        -: 3602:}
        -: 3603:
        -: 3604:template<class _CharT, class _Traits, class _Allocator>
        -: 3605:typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3606:basic_string<_CharT, _Traits, _Allocator>::find(value_type __c,
        -: 3607:                                                size_type __pos) const _NOEXCEPT
        -: 3608:{
        -: 3609:    return __str_find<value_type, size_type, traits_type, npos>
        -: 3610:        (data(), size(), __c, __pos);
        -: 3611:}
        -: 3612:
        -: 3613:// rfind
        -: 3614:
        -: 3615:template<class _CharT, class _Traits, class _Allocator>
        -: 3616:typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3617:basic_string<_CharT, _Traits, _Allocator>::rfind(const value_type* __s,
        -: 3618:                                                 size_type __pos,
        -: 3619:                                                 size_type __n) const _NOEXCEPT
        -: 3620:{
        -: 3621:    _LIBCPP_ASSERT(__n == 0 || __s != nullptr, "string::rfind(): received nullptr");
        -: 3622:    return __str_rfind<value_type, size_type, traits_type, npos>
        -: 3623:        (data(), size(), __s, __pos, __n);
        -: 3624:}
        -: 3625:
        -: 3626:template<class _CharT, class _Traits, class _Allocator>
        -: 3627:inline
        -: 3628:typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3629:basic_string<_CharT, _Traits, _Allocator>::rfind(const basic_string& __str,
        -: 3630:                                                 size_type __pos) const _NOEXCEPT
        -: 3631:{
        -: 3632:    return __str_rfind<value_type, size_type, traits_type, npos>
        -: 3633:        (data(), size(), __str.data(), __pos, __str.size());
        -: 3634:}
        -: 3635:
        -: 3636:template<class _CharT, class _Traits, class _Allocator>
        -: 3637:template <class _Tp>
        -: 3638:_EnableIf
        -: 3639:<
        -: 3640:    __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value,
        -: 3641:    typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3642:>
        -: 3643:basic_string<_CharT, _Traits, _Allocator>::rfind(const _Tp& __t,
        -: 3644:                                                size_type __pos) const _NOEXCEPT
        -: 3645:{
        -: 3646:    __self_view __sv = __t;
        -: 3647:    return __str_rfind<value_type, size_type, traits_type, npos>
        -: 3648:        (data(), size(), __sv.data(), __pos, __sv.size());
        -: 3649:}
        -: 3650:
        -: 3651:template<class _CharT, class _Traits, class _Allocator>
        -: 3652:inline
        -: 3653:typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3654:basic_string<_CharT, _Traits, _Allocator>::rfind(const value_type* __s,
        -: 3655:                                                 size_type __pos) const _NOEXCEPT
        -: 3656:{
        -: 3657:    _LIBCPP_ASSERT(__s != nullptr, "string::rfind(): received nullptr");
        -: 3658:    return __str_rfind<value_type, size_type, traits_type, npos>
        -: 3659:        (data(), size(), __s, __pos, traits_type::length(__s));
        -: 3660:}
        -: 3661:
        -: 3662:template<class _CharT, class _Traits, class _Allocator>
        -: 3663:typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3664:basic_string<_CharT, _Traits, _Allocator>::rfind(value_type __c,
        -: 3665:                                                 size_type __pos) const _NOEXCEPT
        -: 3666:{
        -: 3667:    return __str_rfind<value_type, size_type, traits_type, npos>
        -: 3668:        (data(), size(), __c, __pos);
        -: 3669:}
        -: 3670:
        -: 3671:// find_first_of
        -: 3672:
        -: 3673:template<class _CharT, class _Traits, class _Allocator>
        -: 3674:typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3675:basic_string<_CharT, _Traits, _Allocator>::find_first_of(const value_type* __s,
        -: 3676:                                                         size_type __pos,
        -: 3677:                                                         size_type __n) const _NOEXCEPT
        -: 3678:{
        -: 3679:    _LIBCPP_ASSERT(__n == 0 || __s != nullptr, "string::find_first_of(): received nullptr");
        -: 3680:    return __str_find_first_of<value_type, size_type, traits_type, npos>
        -: 3681:        (data(), size(), __s, __pos, __n);
        -: 3682:}
        -: 3683:
        -: 3684:template<class _CharT, class _Traits, class _Allocator>
        -: 3685:inline
        -: 3686:typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3687:basic_string<_CharT, _Traits, _Allocator>::find_first_of(const basic_string& __str,
        -: 3688:                                                         size_type __pos) const _NOEXCEPT
        -: 3689:{
        -: 3690:    return __str_find_first_of<value_type, size_type, traits_type, npos>
        -: 3691:        (data(), size(), __str.data(), __pos, __str.size());
        -: 3692:}
        -: 3693:
        -: 3694:template<class _CharT, class _Traits, class _Allocator>
        -: 3695:template <class _Tp>
        -: 3696:_EnableIf
        -: 3697:<
        -: 3698:    __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value,
        -: 3699:    typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3700:>
        -: 3701:basic_string<_CharT, _Traits, _Allocator>::find_first_of(const _Tp& __t,
        -: 3702:                                                size_type __pos) const _NOEXCEPT
        -: 3703:{
        -: 3704:    __self_view __sv = __t;
        -: 3705:    return __str_find_first_of<value_type, size_type, traits_type, npos>
        -: 3706:        (data(), size(), __sv.data(), __pos, __sv.size());
        -: 3707:}
        -: 3708:
        -: 3709:template<class _CharT, class _Traits, class _Allocator>
        -: 3710:inline
        -: 3711:typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3712:basic_string<_CharT, _Traits, _Allocator>::find_first_of(const value_type* __s,
        -: 3713:                                                         size_type __pos) const _NOEXCEPT
        -: 3714:{
        -: 3715:    _LIBCPP_ASSERT(__s != nullptr, "string::find_first_of(): received nullptr");
        -: 3716:    return __str_find_first_of<value_type, size_type, traits_type, npos>
        -: 3717:        (data(), size(), __s, __pos, traits_type::length(__s));
        -: 3718:}
        -: 3719:
        -: 3720:template<class _CharT, class _Traits, class _Allocator>
        -: 3721:inline
        -: 3722:typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3723:basic_string<_CharT, _Traits, _Allocator>::find_first_of(value_type __c,
        -: 3724:                                                         size_type __pos) const _NOEXCEPT
        -: 3725:{
        -: 3726:    return find(__c, __pos);
        -: 3727:}
        -: 3728:
        -: 3729:// find_last_of
        -: 3730:
        -: 3731:template<class _CharT, class _Traits, class _Allocator>
        -: 3732:typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3733:basic_string<_CharT, _Traits, _Allocator>::find_last_of(const value_type* __s,
        -: 3734:                                                        size_type __pos,
        -: 3735:                                                        size_type __n) const _NOEXCEPT
        -: 3736:{
        -: 3737:    _LIBCPP_ASSERT(__n == 0 || __s != nullptr, "string::find_last_of(): received nullptr");
        -: 3738:    return __str_find_last_of<value_type, size_type, traits_type, npos>
        -: 3739:        (data(), size(), __s, __pos, __n);
        -: 3740:}
        -: 3741:
        -: 3742:template<class _CharT, class _Traits, class _Allocator>
        -: 3743:inline
        -: 3744:typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3745:basic_string<_CharT, _Traits, _Allocator>::find_last_of(const basic_string& __str,
        -: 3746:                                                        size_type __pos) const _NOEXCEPT
        -: 3747:{
        -: 3748:    return __str_find_last_of<value_type, size_type, traits_type, npos>
        -: 3749:        (data(), size(), __str.data(), __pos, __str.size());
        -: 3750:}
        -: 3751:
        -: 3752:template<class _CharT, class _Traits, class _Allocator>
        -: 3753:template <class _Tp>
        -: 3754:_EnableIf
        -: 3755:<
        -: 3756:    __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value,
        -: 3757:    typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3758:>
        -: 3759:basic_string<_CharT, _Traits, _Allocator>::find_last_of(const _Tp& __t,
        -: 3760:                                                size_type __pos) const _NOEXCEPT
        -: 3761:{
        -: 3762:    __self_view __sv = __t;
        -: 3763:    return __str_find_last_of<value_type, size_type, traits_type, npos>
        -: 3764:        (data(), size(), __sv.data(), __pos, __sv.size());
        -: 3765:}
        -: 3766:
        -: 3767:template<class _CharT, class _Traits, class _Allocator>
        -: 3768:inline
        -: 3769:typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3770:basic_string<_CharT, _Traits, _Allocator>::find_last_of(const value_type* __s,
        -: 3771:                                                        size_type __pos) const _NOEXCEPT
        -: 3772:{
        -: 3773:    _LIBCPP_ASSERT(__s != nullptr, "string::find_last_of(): received nullptr");
        -: 3774:    return __str_find_last_of<value_type, size_type, traits_type, npos>
        -: 3775:        (data(), size(), __s, __pos, traits_type::length(__s));
        -: 3776:}
        -: 3777:
        -: 3778:template<class _CharT, class _Traits, class _Allocator>
        -: 3779:inline
        -: 3780:typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3781:basic_string<_CharT, _Traits, _Allocator>::find_last_of(value_type __c,
        -: 3782:                                                        size_type __pos) const _NOEXCEPT
        -: 3783:{
        -: 3784:    return rfind(__c, __pos);
        -: 3785:}
        -: 3786:
        -: 3787:// find_first_not_of
        -: 3788:
        -: 3789:template<class _CharT, class _Traits, class _Allocator>
        -: 3790:typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3791:basic_string<_CharT, _Traits, _Allocator>::find_first_not_of(const value_type* __s,
        -: 3792:                                                             size_type __pos,
        -: 3793:                                                             size_type __n) const _NOEXCEPT
        -: 3794:{
        -: 3795:    _LIBCPP_ASSERT(__n == 0 || __s != nullptr, "string::find_first_not_of(): received nullptr");
        -: 3796:    return __str_find_first_not_of<value_type, size_type, traits_type, npos>
        -: 3797:        (data(), size(), __s, __pos, __n);
        -: 3798:}
        -: 3799:
        -: 3800:template<class _CharT, class _Traits, class _Allocator>
        -: 3801:inline
        -: 3802:typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3803:basic_string<_CharT, _Traits, _Allocator>::find_first_not_of(const basic_string& __str,
        -: 3804:                                                             size_type __pos) const _NOEXCEPT
        -: 3805:{
        -: 3806:    return __str_find_first_not_of<value_type, size_type, traits_type, npos>
        -: 3807:        (data(), size(), __str.data(), __pos, __str.size());
        -: 3808:}
        -: 3809:
        -: 3810:template<class _CharT, class _Traits, class _Allocator>
        -: 3811:template <class _Tp>
        -: 3812:_EnableIf
        -: 3813:<
        -: 3814:    __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value,
        -: 3815:    typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3816:>
        -: 3817:basic_string<_CharT, _Traits, _Allocator>::find_first_not_of(const _Tp& __t,
        -: 3818:                                                size_type __pos) const _NOEXCEPT
        -: 3819:{
        -: 3820:    __self_view __sv = __t;
        -: 3821:    return __str_find_first_not_of<value_type, size_type, traits_type, npos>
        -: 3822:        (data(), size(), __sv.data(), __pos, __sv.size());
        -: 3823:}
        -: 3824:
        -: 3825:template<class _CharT, class _Traits, class _Allocator>
        -: 3826:inline
        -: 3827:typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3828:basic_string<_CharT, _Traits, _Allocator>::find_first_not_of(const value_type* __s,
        -: 3829:                                                             size_type __pos) const _NOEXCEPT
        -: 3830:{
        -: 3831:    _LIBCPP_ASSERT(__s != nullptr, "string::find_first_not_of(): received nullptr");
        -: 3832:    return __str_find_first_not_of<value_type, size_type, traits_type, npos>
        -: 3833:        (data(), size(), __s, __pos, traits_type::length(__s));
        -: 3834:}
        -: 3835:
        -: 3836:template<class _CharT, class _Traits, class _Allocator>
        -: 3837:inline
        -: 3838:typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3839:basic_string<_CharT, _Traits, _Allocator>::find_first_not_of(value_type __c,
        -: 3840:                                                             size_type __pos) const _NOEXCEPT
        -: 3841:{
        -: 3842:    return __str_find_first_not_of<value_type, size_type, traits_type, npos>
        -: 3843:        (data(), size(), __c, __pos);
        -: 3844:}
        -: 3845:
        -: 3846:// find_last_not_of
        -: 3847:
        -: 3848:template<class _CharT, class _Traits, class _Allocator>
        -: 3849:typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3850:basic_string<_CharT, _Traits, _Allocator>::find_last_not_of(const value_type* __s,
        -: 3851:                                                            size_type __pos,
        -: 3852:                                                            size_type __n) const _NOEXCEPT
        -: 3853:{
        -: 3854:    _LIBCPP_ASSERT(__n == 0 || __s != nullptr, "string::find_last_not_of(): received nullptr");
        -: 3855:    return __str_find_last_not_of<value_type, size_type, traits_type, npos>
        -: 3856:        (data(), size(), __s, __pos, __n);
        -: 3857:}
        -: 3858:
        -: 3859:template<class _CharT, class _Traits, class _Allocator>
        -: 3860:inline
        -: 3861:typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3862:basic_string<_CharT, _Traits, _Allocator>::find_last_not_of(const basic_string& __str,
        -: 3863:                                                            size_type __pos) const _NOEXCEPT
        -: 3864:{
        -: 3865:    return __str_find_last_not_of<value_type, size_type, traits_type, npos>
        -: 3866:        (data(), size(), __str.data(), __pos, __str.size());
        -: 3867:}
        -: 3868:
        -: 3869:template<class _CharT, class _Traits, class _Allocator>
        -: 3870:template <class _Tp>
        -: 3871:_EnableIf
        -: 3872:<
        -: 3873:    __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value,
        -: 3874:    typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3875:>
        -: 3876:basic_string<_CharT, _Traits, _Allocator>::find_last_not_of(const _Tp& __t,
        -: 3877:                                                size_type __pos) const _NOEXCEPT
        -: 3878:{
        -: 3879:    __self_view __sv = __t;
        -: 3880:    return __str_find_last_not_of<value_type, size_type, traits_type, npos>
        -: 3881:        (data(), size(), __sv.data(), __pos, __sv.size());
        -: 3882:}
        -: 3883:
        -: 3884:template<class _CharT, class _Traits, class _Allocator>
        -: 3885:inline
        -: 3886:typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3887:basic_string<_CharT, _Traits, _Allocator>::find_last_not_of(const value_type* __s,
        -: 3888:                                                            size_type __pos) const _NOEXCEPT
        -: 3889:{
        -: 3890:    _LIBCPP_ASSERT(__s != nullptr, "string::find_last_not_of(): received nullptr");
        -: 3891:    return __str_find_last_not_of<value_type, size_type, traits_type, npos>
        -: 3892:        (data(), size(), __s, __pos, traits_type::length(__s));
        -: 3893:}
        -: 3894:
        -: 3895:template<class _CharT, class _Traits, class _Allocator>
        -: 3896:inline
        -: 3897:typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3898:basic_string<_CharT, _Traits, _Allocator>::find_last_not_of(value_type __c,
        -: 3899:                                                            size_type __pos) const _NOEXCEPT
        -: 3900:{
        -: 3901:    return __str_find_last_not_of<value_type, size_type, traits_type, npos>
        -: 3902:        (data(), size(), __c, __pos);
        -: 3903:}
        -: 3904:
        -: 3905:// compare
        -: 3906:
        -: 3907:template <class _CharT, class _Traits, class _Allocator>
        -: 3908:template <class _Tp>
        -: 3909:_EnableIf
        -: 3910:<
        -: 3911:    __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value,
        -: 3912:    int
        -: 3913:>
        -: 3914:basic_string<_CharT, _Traits, _Allocator>::compare(const _Tp& __t) const _NOEXCEPT
        -: 3915:{
        -: 3916:    __self_view __sv = __t;
        -: 3917:    size_t __lhs_sz = size();
        -: 3918:    size_t __rhs_sz = __sv.size();
        -: 3919:    int __result = traits_type::compare(data(), __sv.data(),
        -: 3920:                                        _VSTD::min(__lhs_sz, __rhs_sz));
        -: 3921:    if (__result != 0)
        -: 3922:        return __result;
        -: 3923:    if (__lhs_sz < __rhs_sz)
        -: 3924:        return -1;
        -: 3925:    if (__lhs_sz > __rhs_sz)
        -: 3926:        return 1;
        -: 3927:    return 0;
        -: 3928:}
        -: 3929:
        -: 3930:template <class _CharT, class _Traits, class _Allocator>
        -: 3931:inline
        -: 3932:int
        -: 3933:basic_string<_CharT, _Traits, _Allocator>::compare(const basic_string& __str) const _NOEXCEPT
        -: 3934:{
        -: 3935:    return compare(__self_view(__str));
        -: 3936:}
        -: 3937:
        -: 3938:template <class _CharT, class _Traits, class _Allocator>
        -: 3939:int
        -: 3940:basic_string<_CharT, _Traits, _Allocator>::compare(size_type __pos1,
        -: 3941:                                                   size_type __n1,
        -: 3942:                                                   const value_type* __s,
        -: 3943:                                                   size_type __n2) const
        -: 3944:{
        -: 3945:    _LIBCPP_ASSERT(__n2 == 0 || __s != nullptr, "string::compare(): received nullptr");
        -: 3946:    size_type __sz = size();
        -: 3947:    if (__pos1 > __sz || __n2 == npos)
        -: 3948:        this->__throw_out_of_range();
        -: 3949:    size_type __rlen = _VSTD::min(__n1, __sz - __pos1);
        -: 3950:    int __r = traits_type::compare(data() + __pos1, __s, _VSTD::min(__rlen, __n2));
        -: 3951:    if (__r == 0)
        -: 3952:    {
        -: 3953:        if (__rlen < __n2)
        -: 3954:            __r = -1;
        -: 3955:        else if (__rlen > __n2)
        -: 3956:            __r = 1;
        -: 3957:    }
        -: 3958:    return __r;
        -: 3959:}
        -: 3960:
        -: 3961:template <class _CharT, class _Traits, class _Allocator>
        -: 3962:template <class _Tp>
        -: 3963:_EnableIf
        -: 3964:<
        -: 3965:    __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value,
        -: 3966:    int
        -: 3967:>
        -: 3968:basic_string<_CharT, _Traits, _Allocator>::compare(size_type __pos1,
        -: 3969:                                                   size_type __n1,
        -: 3970:                                                   const _Tp& __t) const
        -: 3971:{
        -: 3972:    __self_view __sv = __t;
        -: 3973:    return compare(__pos1, __n1, __sv.data(), __sv.size());
        -: 3974:}
        -: 3975:
        -: 3976:template <class _CharT, class _Traits, class _Allocator>
        -: 3977:inline
        -: 3978:int
        -: 3979:basic_string<_CharT, _Traits, _Allocator>::compare(size_type __pos1,
        -: 3980:                                                   size_type __n1,
        -: 3981:                                                   const basic_string& __str) const
        -: 3982:{
        -: 3983:    return compare(__pos1, __n1, __str.data(), __str.size());
        -: 3984:}
        -: 3985:
        -: 3986:template <class _CharT, class _Traits, class _Allocator>
        -: 3987:template <class _Tp>
        -: 3988:_EnableIf
        -: 3989:<
        -: 3990:    __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value
        -: 3991:    && !__is_same_uncvref<_Tp, basic_string<_CharT, _Traits, _Allocator> >::value,
        -: 3992:    int
        -: 3993:>
        -: 3994:basic_string<_CharT, _Traits, _Allocator>::compare(size_type __pos1,
        -: 3995:                                                   size_type __n1,
        -: 3996:                                                   const _Tp& __t,
        -: 3997:                                                   size_type __pos2,
        -: 3998:                                                   size_type __n2) const
        -: 3999:{
        -: 4000:    __self_view __sv = __t;
        -: 4001:    return __self_view(*this).substr(__pos1, __n1).compare(__sv.substr(__pos2, __n2));
        -: 4002:}
        -: 4003:
        -: 4004:template <class _CharT, class _Traits, class _Allocator>
        -: 4005:int
        -: 4006:basic_string<_CharT, _Traits, _Allocator>::compare(size_type __pos1,
        -: 4007:                                                   size_type __n1,
        -: 4008:                                                   const basic_string& __str,
        -: 4009:                                                   size_type __pos2,
        -: 4010:                                                   size_type __n2) const
        -: 4011:{
        -: 4012:        return compare(__pos1, __n1, __self_view(__str), __pos2, __n2);
        -: 4013:}
        -: 4014:
        -: 4015:template <class _CharT, class _Traits, class _Allocator>
        -: 4016:int
        -: 4017:basic_string<_CharT, _Traits, _Allocator>::compare(const value_type* __s) const _NOEXCEPT
        -: 4018:{
        -: 4019:    _LIBCPP_ASSERT(__s != nullptr, "string::compare(): received nullptr");
        -: 4020:    return compare(0, npos, __s, traits_type::length(__s));
        -: 4021:}
        -: 4022:
        -: 4023:template <class _CharT, class _Traits, class _Allocator>
        -: 4024:int
        -: 4025:basic_string<_CharT, _Traits, _Allocator>::compare(size_type __pos1,
        -: 4026:                                                   size_type __n1,
        -: 4027:                                                   const value_type* __s) const
        -: 4028:{
        -: 4029:    _LIBCPP_ASSERT(__s != nullptr, "string::compare(): received nullptr");
        -: 4030:    return compare(__pos1, __n1, __s, traits_type::length(__s));
        -: 4031:}
        -: 4032:
        -: 4033:// __invariants
        -: 4034:
        -: 4035:template<class _CharT, class _Traits, class _Allocator>
        -: 4036:inline
        -: 4037:bool
        -: 4038:basic_string<_CharT, _Traits, _Allocator>::__invariants() const
        -: 4039:{
        -: 4040:    if (size() > capacity())
        -: 4041:        return false;
        -: 4042:    if (capacity() < __min_cap - 1)
        -: 4043:        return false;
        -: 4044:    if (data() == nullptr)
        -: 4045:        return false;
        -: 4046:    if (data()[size()] != value_type())
        -: 4047:        return false;
        -: 4048:    return true;
        -: 4049:}
        -: 4050:
        -: 4051:// __clear_and_shrink
        -: 4052:
        -: 4053:template<class _CharT, class _Traits, class _Allocator>
        -: 4054:inline
        -: 4055:void
        -: 4056:basic_string<_CharT, _Traits, _Allocator>::__clear_and_shrink() _NOEXCEPT
        -: 4057:{
        -: 4058:    clear();
        -: 4059:    if(__is_long())
        -: 4060:    {
        -: 4061:        __alloc_traits::deallocate(__alloc(), __get_long_pointer(), capacity() + 1);
        -: 4062:        __set_long_cap(0);
        -: 4063:        __set_short_size(0);
        -: 4064:        traits_type::assign(*__get_short_pointer(), value_type());
        -: 4065:    }
        -: 4066:}
        -: 4067:
        -: 4068:// operator==
        -: 4069:
        -: 4070:template<class _CharT, class _Traits, class _Allocator>
        -: 4071:inline _LIBCPP_INLINE_VISIBILITY
        -: 4072:bool
        -: 4073:operator==(const basic_string<_CharT, _Traits, _Allocator>& __lhs,
        -: 4074:           const basic_string<_CharT, _Traits, _Allocator>& __rhs) _NOEXCEPT
        -: 4075:{
        -: 4076:    size_t __lhs_sz = __lhs.size();
        -: 4077:    return __lhs_sz == __rhs.size() && _Traits::compare(__lhs.data(),
        -: 4078:                                                        __rhs.data(),
        -: 4079:                                                        __lhs_sz) == 0;
        -: 4080:}
        -: 4081:
        -: 4082:template<class _Allocator>
        -: 4083:inline _LIBCPP_INLINE_VISIBILITY
        -: 4084:bool
        -: 4085:operator==(const basic_string<char, char_traits<char>, _Allocator>& __lhs,
        -: 4086:           const basic_string<char, char_traits<char>, _Allocator>& __rhs) _NOEXCEPT
        -: 4087:{
        -: 4088:    size_t __lhs_sz = __lhs.size();
        -: 4089:    if (__lhs_sz != __rhs.size())
        -: 4090:        return false;
        -: 4091:    const char* __lp = __lhs.data();
        -: 4092:    const char* __rp = __rhs.data();
        -: 4093:    if (__lhs.__is_long())
        -: 4094:        return char_traits<char>::compare(__lp, __rp, __lhs_sz) == 0;
        -: 4095:    for (; __lhs_sz != 0; --__lhs_sz, ++__lp, ++__rp)
        -: 4096:        if (*__lp != *__rp)
        -: 4097:            return false;
        -: 4098:    return true;
        -: 4099:}
        -: 4100:
        -: 4101:template<class _CharT, class _Traits, class _Allocator>
        -: 4102:inline _LIBCPP_INLINE_VISIBILITY
        -: 4103:bool
        -: 4104:operator==(const _CharT* __lhs,
        -: 4105:           const basic_string<_CharT, _Traits, _Allocator>& __rhs) _NOEXCEPT
        -: 4106:{
        -: 4107:    typedef basic_string<_CharT, _Traits, _Allocator> _String;
        -: 4108:    _LIBCPP_ASSERT(__lhs != nullptr, "operator==(char*, basic_string): received nullptr");
        -: 4109:    size_t __lhs_len = _Traits::length(__lhs);
        -: 4110:    if (__lhs_len != __rhs.size()) return false;
        -: 4111:    return __rhs.compare(0, _String::npos, __lhs, __lhs_len) == 0;
        -: 4112:}
        -: 4113:
        -: 4114:template<class _CharT, class _Traits, class _Allocator>
        -: 4115:inline _LIBCPP_INLINE_VISIBILITY
        -: 4116:bool
        -: 4117:operator==(const basic_string<_CharT,_Traits,_Allocator>& __lhs,
        -: 4118:           const _CharT* __rhs) _NOEXCEPT
        -: 4119:{
        -: 4120:    typedef basic_string<_CharT, _Traits, _Allocator> _String;
        -: 4121:    _LIBCPP_ASSERT(__rhs != nullptr, "operator==(basic_string, char*): received nullptr");
        -: 4122:    size_t __rhs_len = _Traits::length(__rhs);
        -: 4123:    if (__rhs_len != __lhs.size()) return false;
        -: 4124:    return __lhs.compare(0, _String::npos, __rhs, __rhs_len) == 0;
        -: 4125:}
        -: 4126:
        -: 4127:template<class _CharT, class _Traits, class _Allocator>
        -: 4128:inline _LIBCPP_INLINE_VISIBILITY
        -: 4129:bool
        -: 4130:operator!=(const basic_string<_CharT,_Traits,_Allocator>& __lhs,
        -: 4131:           const basic_string<_CharT, _Traits, _Allocator>& __rhs) _NOEXCEPT
        -: 4132:{
        -: 4133:    return !(__lhs == __rhs);
        -: 4134:}
        -: 4135:
        -: 4136:template<class _CharT, class _Traits, class _Allocator>
        -: 4137:inline _LIBCPP_INLINE_VISIBILITY
        -: 4138:bool
        -: 4139:operator!=(const _CharT* __lhs,
        -: 4140:           const basic_string<_CharT, _Traits, _Allocator>& __rhs) _NOEXCEPT
        -: 4141:{
        -: 4142:    return !(__lhs == __rhs);
        -: 4143:}
        -: 4144:
        -: 4145:template<class _CharT, class _Traits, class _Allocator>
        -: 4146:inline _LIBCPP_INLINE_VISIBILITY
        -: 4147:bool
        -: 4148:operator!=(const basic_string<_CharT, _Traits, _Allocator>& __lhs,
        -: 4149:           const _CharT* __rhs) _NOEXCEPT
        -: 4150:{
        -: 4151:    return !(__lhs == __rhs);
        -: 4152:}
        -: 4153:
        -: 4154:// operator<
        -: 4155:
        -: 4156:template<class _CharT, class _Traits, class _Allocator>
        -: 4157:inline _LIBCPP_INLINE_VISIBILITY
        -: 4158:bool
        -: 4159:operator< (const basic_string<_CharT, _Traits, _Allocator>& __lhs,
        -: 4160:           const basic_string<_CharT, _Traits, _Allocator>& __rhs) _NOEXCEPT
        -: 4161:{
        -: 4162:    return __lhs.compare(__rhs) < 0;
        -: 4163:}
        -: 4164:
        -: 4165:template<class _CharT, class _Traits, class _Allocator>
        -: 4166:inline _LIBCPP_INLINE_VISIBILITY
        -: 4167:bool
        -: 4168:operator< (const basic_string<_CharT, _Traits, _Allocator>& __lhs,
        -: 4169:           const _CharT* __rhs) _NOEXCEPT
        -: 4170:{
        -: 4171:    return __lhs.compare(__rhs) < 0;
        -: 4172:}
        -: 4173:
        -: 4174:template<class _CharT, class _Traits, class _Allocator>
        -: 4175:inline _LIBCPP_INLINE_VISIBILITY
        -: 4176:bool
        -: 4177:operator< (const _CharT* __lhs,
        -: 4178:           const basic_string<_CharT, _Traits, _Allocator>& __rhs) _NOEXCEPT
        -: 4179:{
        -: 4180:    return __rhs.compare(__lhs) > 0;
        -: 4181:}
        -: 4182:
        -: 4183:// operator>
        -: 4184:
        -: 4185:template<class _CharT, class _Traits, class _Allocator>
        -: 4186:inline _LIBCPP_INLINE_VISIBILITY
        -: 4187:bool
        -: 4188:operator> (const basic_string<_CharT, _Traits, _Allocator>& __lhs,
        -: 4189:           const basic_string<_CharT, _Traits, _Allocator>& __rhs) _NOEXCEPT
        -: 4190:{
        -: 4191:    return __rhs < __lhs;
        -: 4192:}
        -: 4193:
        -: 4194:template<class _CharT, class _Traits, class _Allocator>
        -: 4195:inline _LIBCPP_INLINE_VISIBILITY
        -: 4196:bool
        -: 4197:operator> (const basic_string<_CharT, _Traits, _Allocator>& __lhs,
        -: 4198:           const _CharT* __rhs) _NOEXCEPT
        -: 4199:{
        -: 4200:    return __rhs < __lhs;
        -: 4201:}
        -: 4202:
        -: 4203:template<class _CharT, class _Traits, class _Allocator>
        -: 4204:inline _LIBCPP_INLINE_VISIBILITY
        -: 4205:bool
        -: 4206:operator> (const _CharT* __lhs,
        -: 4207:           const basic_string<_CharT, _Traits, _Allocator>& __rhs) _NOEXCEPT
        -: 4208:{
        -: 4209:    return __rhs < __lhs;
        -: 4210:}
        -: 4211:
        -: 4212:// operator<=
        -: 4213:
        -: 4214:template<class _CharT, class _Traits, class _Allocator>
        -: 4215:inline _LIBCPP_INLINE_VISIBILITY
        -: 4216:bool
        -: 4217:operator<=(const basic_string<_CharT, _Traits, _Allocator>& __lhs,
        -: 4218:           const basic_string<_CharT, _Traits, _Allocator>& __rhs) _NOEXCEPT
        -: 4219:{
        -: 4220:    return !(__rhs < __lhs);
        -: 4221:}
        -: 4222:
        -: 4223:template<class _CharT, class _Traits, class _Allocator>
        -: 4224:inline _LIBCPP_INLINE_VISIBILITY
        -: 4225:bool
        -: 4226:operator<=(const basic_string<_CharT, _Traits, _Allocator>& __lhs,
        -: 4227:           const _CharT* __rhs) _NOEXCEPT
        -: 4228:{
        -: 4229:    return !(__rhs < __lhs);
        -: 4230:}
        -: 4231:
        -: 4232:template<class _CharT, class _Traits, class _Allocator>
        -: 4233:inline _LIBCPP_INLINE_VISIBILITY
        -: 4234:bool
        -: 4235:operator<=(const _CharT* __lhs,
        -: 4236:           const basic_string<_CharT, _Traits, _Allocator>& __rhs) _NOEXCEPT
        -: 4237:{
        -: 4238:    return !(__rhs < __lhs);
        -: 4239:}
        -: 4240:
        -: 4241:// operator>=
        -: 4242:
        -: 4243:template<class _CharT, class _Traits, class _Allocator>
        -: 4244:inline _LIBCPP_INLINE_VISIBILITY
        -: 4245:bool
        -: 4246:operator>=(const basic_string<_CharT, _Traits, _Allocator>& __lhs,
        -: 4247:           const basic_string<_CharT, _Traits, _Allocator>& __rhs) _NOEXCEPT
        -: 4248:{
        -: 4249:    return !(__lhs < __rhs);
        -: 4250:}
        -: 4251:
        -: 4252:template<class _CharT, class _Traits, class _Allocator>
        -: 4253:inline _LIBCPP_INLINE_VISIBILITY
        -: 4254:bool
        -: 4255:operator>=(const basic_string<_CharT, _Traits, _Allocator>& __lhs,
        -: 4256:           const _CharT* __rhs) _NOEXCEPT
        -: 4257:{
        -: 4258:    return !(__lhs < __rhs);
        -: 4259:}
        -: 4260:
        -: 4261:template<class _CharT, class _Traits, class _Allocator>
        -: 4262:inline _LIBCPP_INLINE_VISIBILITY
        -: 4263:bool
        -: 4264:operator>=(const _CharT* __lhs,
        -: 4265:           const basic_string<_CharT, _Traits, _Allocator>& __rhs) _NOEXCEPT
        -: 4266:{
        -: 4267:    return !(__lhs < __rhs);
        -: 4268:}
        -: 4269:
        -: 4270:// operator +
        -: 4271:
        -: 4272:template<class _CharT, class _Traits, class _Allocator>
        -: 4273:basic_string<_CharT, _Traits, _Allocator>
        -: 4274:operator+(const basic_string<_CharT, _Traits, _Allocator>& __lhs,
        -: 4275:          const basic_string<_CharT, _Traits, _Allocator>& __rhs)
        -: 4276:{
        -: 4277:    basic_string<_CharT, _Traits, _Allocator> __r(__lhs.get_allocator());
        -: 4278:    typename basic_string<_CharT, _Traits, _Allocator>::size_type __lhs_sz = __lhs.size();
        -: 4279:    typename basic_string<_CharT, _Traits, _Allocator>::size_type __rhs_sz = __rhs.size();
        -: 4280:    __r.__init(__lhs.data(), __lhs_sz, __lhs_sz + __rhs_sz);
        -: 4281:    __r.append(__rhs.data(), __rhs_sz);
        -: 4282:    return __r;
        -: 4283:}
        -: 4284:
        -: 4285:template<class _CharT, class _Traits, class _Allocator>
        -: 4286:basic_string<_CharT, _Traits, _Allocator>
        -: 4287:operator+(const _CharT* __lhs , const basic_string<_CharT,_Traits,_Allocator>& __rhs)
        -: 4288:{
        -: 4289:    basic_string<_CharT, _Traits, _Allocator> __r(__rhs.get_allocator());
        -: 4290:    typename basic_string<_CharT, _Traits, _Allocator>::size_type __lhs_sz = _Traits::length(__lhs);
        -: 4291:    typename basic_string<_CharT, _Traits, _Allocator>::size_type __rhs_sz = __rhs.size();
        -: 4292:    __r.__init(__lhs, __lhs_sz, __lhs_sz + __rhs_sz);
        -: 4293:    __r.append(__rhs.data(), __rhs_sz);
        -: 4294:    return __r;
        -: 4295:}
        -: 4296:
        -: 4297:template<class _CharT, class _Traits, class _Allocator>
        -: 4298:basic_string<_CharT, _Traits, _Allocator>
        -: 4299:operator+(_CharT __lhs, const basic_string<_CharT,_Traits,_Allocator>& __rhs)
        -: 4300:{
        -: 4301:    basic_string<_CharT, _Traits, _Allocator> __r(__rhs.get_allocator());
        -: 4302:    typename basic_string<_CharT, _Traits, _Allocator>::size_type __rhs_sz = __rhs.size();
        -: 4303:    __r.__init(&__lhs, 1, 1 + __rhs_sz);
        -: 4304:    __r.append(__rhs.data(), __rhs_sz);
        -: 4305:    return __r;
        -: 4306:}
        -: 4307:
        -: 4308:template<class _CharT, class _Traits, class _Allocator>
        -: 4309:inline
        -: 4310:basic_string<_CharT, _Traits, _Allocator>
        -: 4311:operator+(const basic_string<_CharT, _Traits, _Allocator>& __lhs, const _CharT* __rhs)
        -: 4312:{
        -: 4313:    basic_string<_CharT, _Traits, _Allocator> __r(__lhs.get_allocator());
        -: 4314:    typename basic_string<_CharT, _Traits, _Allocator>::size_type __lhs_sz = __lhs.size();
        -: 4315:    typename basic_string<_CharT, _Traits, _Allocator>::size_type __rhs_sz = _Traits::length(__rhs);
        -: 4316:    __r.__init(__lhs.data(), __lhs_sz, __lhs_sz + __rhs_sz);
        -: 4317:    __r.append(__rhs, __rhs_sz);
        -: 4318:    return __r;
        -: 4319:}
        -: 4320:
        -: 4321:template<class _CharT, class _Traits, class _Allocator>
        -: 4322:basic_string<_CharT, _Traits, _Allocator>
        -: 4323:operator+(const basic_string<_CharT, _Traits, _Allocator>& __lhs, _CharT __rhs)
        -: 4324:{
        -: 4325:    basic_string<_CharT, _Traits, _Allocator> __r(__lhs.get_allocator());
        -: 4326:    typename basic_string<_CharT, _Traits, _Allocator>::size_type __lhs_sz = __lhs.size();
        -: 4327:    __r.__init(__lhs.data(), __lhs_sz, __lhs_sz + 1);
        -: 4328:    __r.push_back(__rhs);
        -: 4329:    return __r;
        -: 4330:}
        -: 4331:
        -: 4332:#ifndef _LIBCPP_CXX03_LANG
        -: 4333:
        -: 4334:template<class _CharT, class _Traits, class _Allocator>
        -: 4335:inline _LIBCPP_INLINE_VISIBILITY
        -: 4336:basic_string<_CharT, _Traits, _Allocator>
        -: 4337:operator+(basic_string<_CharT, _Traits, _Allocator>&& __lhs, const basic_string<_CharT, _Traits, _Allocator>& __rhs)
        -: 4338:{
        -: 4339:    return _VSTD::move(__lhs.append(__rhs));
        -: 4340:}
        -: 4341:
        -: 4342:template<class _CharT, class _Traits, class _Allocator>
        -: 4343:inline _LIBCPP_INLINE_VISIBILITY
        -: 4344:basic_string<_CharT, _Traits, _Allocator>
        -: 4345:operator+(const basic_string<_CharT, _Traits, _Allocator>& __lhs, basic_string<_CharT, _Traits, _Allocator>&& __rhs)
        -: 4346:{
        -: 4347:    return _VSTD::move(__rhs.insert(0, __lhs));
        -: 4348:}
        -: 4349:
        -: 4350:template<class _CharT, class _Traits, class _Allocator>
        -: 4351:inline _LIBCPP_INLINE_VISIBILITY
        -: 4352:basic_string<_CharT, _Traits, _Allocator>
        -: 4353:operator+(basic_string<_CharT, _Traits, _Allocator>&& __lhs, basic_string<_CharT, _Traits, _Allocator>&& __rhs)
        -: 4354:{
        -: 4355:    return _VSTD::move(__lhs.append(__rhs));
        -: 4356:}
        -: 4357:
        -: 4358:template<class _CharT, class _Traits, class _Allocator>
        -: 4359:inline _LIBCPP_INLINE_VISIBILITY
        -: 4360:basic_string<_CharT, _Traits, _Allocator>
        -: 4361:operator+(const _CharT* __lhs , basic_string<_CharT,_Traits,_Allocator>&& __rhs)
        -: 4362:{
        -: 4363:    return _VSTD::move(__rhs.insert(0, __lhs));
        -: 4364:}
        -: 4365:
        -: 4366:template<class _CharT, class _Traits, class _Allocator>
        -: 4367:inline _LIBCPP_INLINE_VISIBILITY
        -: 4368:basic_string<_CharT, _Traits, _Allocator>
        -: 4369:operator+(_CharT __lhs, basic_string<_CharT,_Traits,_Allocator>&& __rhs)
        -: 4370:{
        -: 4371:    __rhs.insert(__rhs.begin(), __lhs);
        -: 4372:    return _VSTD::move(__rhs);
        -: 4373:}
        -: 4374:
        -: 4375:template<class _CharT, class _Traits, class _Allocator>
        -: 4376:inline _LIBCPP_INLINE_VISIBILITY
        -: 4377:basic_string<_CharT, _Traits, _Allocator>
        -: 4378:operator+(basic_string<_CharT, _Traits, _Allocator>&& __lhs, const _CharT* __rhs)
        -: 4379:{
        -: 4380:    return _VSTD::move(__lhs.append(__rhs));
        -: 4381:}
        -: 4382:
        -: 4383:template<class _CharT, class _Traits, class _Allocator>
        -: 4384:inline _LIBCPP_INLINE_VISIBILITY
        -: 4385:basic_string<_CharT, _Traits, _Allocator>
        -: 4386:operator+(basic_string<_CharT, _Traits, _Allocator>&& __lhs, _CharT __rhs)
        -: 4387:{
        -: 4388:    __lhs.push_back(__rhs);
        -: 4389:    return _VSTD::move(__lhs);
        -: 4390:}
        -: 4391:
        -: 4392:#endif // _LIBCPP_CXX03_LANG
        -: 4393:
        -: 4394:// swap
        -: 4395:
        -: 4396:template<class _CharT, class _Traits, class _Allocator>
        -: 4397:inline _LIBCPP_INLINE_VISIBILITY
        -: 4398:void
        -: 4399:swap(basic_string<_CharT, _Traits, _Allocator>& __lhs,
        -: 4400:     basic_string<_CharT, _Traits, _Allocator>& __rhs)
        -: 4401:     _NOEXCEPT_(_NOEXCEPT_(__lhs.swap(__rhs)))
        -: 4402:{
        -: 4403:    __lhs.swap(__rhs);
        -: 4404:}
        -: 4405:
        -: 4406:_LIBCPP_FUNC_VIS int                stoi  (const string& __str, size_t* __idx = nullptr, int __base = 10);
        -: 4407:_LIBCPP_FUNC_VIS long               stol  (const string& __str, size_t* __idx = nullptr, int __base = 10);
        -: 4408:_LIBCPP_FUNC_VIS unsigned long      stoul (const string& __str, size_t* __idx = nullptr, int __base = 10);
        -: 4409:_LIBCPP_FUNC_VIS long long          stoll (const string& __str, size_t* __idx = nullptr, int __base = 10);
        -: 4410:_LIBCPP_FUNC_VIS unsigned long long stoull(const string& __str, size_t* __idx = nullptr, int __base = 10);
        -: 4411:
        -: 4412:_LIBCPP_FUNC_VIS float       stof (const string& __str, size_t* __idx = nullptr);
        -: 4413:_LIBCPP_FUNC_VIS double      stod (const string& __str, size_t* __idx = nullptr);
        -: 4414:_LIBCPP_FUNC_VIS long double stold(const string& __str, size_t* __idx = nullptr);
        -: 4415:
        -: 4416:_LIBCPP_FUNC_VIS string to_string(int __val);
        -: 4417:_LIBCPP_FUNC_VIS string to_string(unsigned __val);
        -: 4418:_LIBCPP_FUNC_VIS string to_string(long __val);
        -: 4419:_LIBCPP_FUNC_VIS string to_string(unsigned long __val);
        -: 4420:_LIBCPP_FUNC_VIS string to_string(long long __val);
        -: 4421:_LIBCPP_FUNC_VIS string to_string(unsigned long long __val);
        -: 4422:_LIBCPP_FUNC_VIS string to_string(float __val);
        -: 4423:_LIBCPP_FUNC_VIS string to_string(double __val);
        -: 4424:_LIBCPP_FUNC_VIS string to_string(long double __val);
        -: 4425:
        -: 4426:#ifndef _LIBCPP_HAS_NO_WIDE_CHARACTERS
        -: 4427:_LIBCPP_FUNC_VIS int                stoi  (const wstring& __str, size_t* __idx = nullptr, int __base = 10);
        -: 4428:_LIBCPP_FUNC_VIS long               stol  (const wstring& __str, size_t* __idx = nullptr, int __base = 10);
        -: 4429:_LIBCPP_FUNC_VIS unsigned long      stoul (const wstring& __str, size_t* __idx = nullptr, int __base = 10);
        -: 4430:_LIBCPP_FUNC_VIS long long          stoll (const wstring& __str, size_t* __idx = nullptr, int __base = 10);
        -: 4431:_LIBCPP_FUNC_VIS unsigned long long stoull(const wstring& __str, size_t* __idx = nullptr, int __base = 10);
        -: 4432:
        -: 4433:_LIBCPP_FUNC_VIS float       stof (const wstring& __str, size_t* __idx = nullptr);
        -: 4434:_LIBCPP_FUNC_VIS double      stod (const wstring& __str, size_t* __idx = nullptr);
        -: 4435:_LIBCPP_FUNC_VIS long double stold(const wstring& __str, size_t* __idx = nullptr);
        -: 4436:
        -: 4437:_LIBCPP_FUNC_VIS wstring to_wstring(int __val);
        -: 4438:_LIBCPP_FUNC_VIS wstring to_wstring(unsigned __val);
        -: 4439:_LIBCPP_FUNC_VIS wstring to_wstring(long __val);
        -: 4440:_LIBCPP_FUNC_VIS wstring to_wstring(unsigned long __val);
        -: 4441:_LIBCPP_FUNC_VIS wstring to_wstring(long long __val);
        -: 4442:_LIBCPP_FUNC_VIS wstring to_wstring(unsigned long long __val);
        -: 4443:_LIBCPP_FUNC_VIS wstring to_wstring(float __val);
        -: 4444:_LIBCPP_FUNC_VIS wstring to_wstring(double __val);
        -: 4445:_LIBCPP_FUNC_VIS wstring to_wstring(long double __val);
        -: 4446:#endif // _LIBCPP_HAS_NO_WIDE_CHARACTERS
        -: 4447:
        -: 4448:template<class _CharT, class _Traits, class _Allocator>
        -: 4449:_LIBCPP_TEMPLATE_DATA_VIS
        -: 4450:const typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 4451:               basic_string<_CharT, _Traits, _Allocator>::npos;
        -: 4452:
        -: 4453:template <class _CharT, class _Allocator>
        -: 4454:struct _LIBCPP_TEMPLATE_VIS
        -: 4455:    hash<basic_string<_CharT, char_traits<_CharT>, _Allocator> >
        -: 4456:    : public unary_function<
        -: 4457:          basic_string<_CharT, char_traits<_CharT>, _Allocator>, size_t>
        -: 4458:{
        -: 4459:    size_t
        -: 4460:    operator()(const basic_string<_CharT, char_traits<_CharT>, _Allocator>& __val) const _NOEXCEPT
        -: 4461:    { return __do_string_hash(__val.data(), __val.data() + __val.size()); }
        -: 4462:};
        -: 4463:
        -: 4464:
        -: 4465:template<class _CharT, class _Traits, class _Allocator>
        -: 4466:basic_ostream<_CharT, _Traits>&
        -: 4467:operator<<(basic_ostream<_CharT, _Traits>& __os,
        -: 4468:           const basic_string<_CharT, _Traits, _Allocator>& __str);
        -: 4469:
        -: 4470:template<class _CharT, class _Traits, class _Allocator>
        -: 4471:basic_istream<_CharT, _Traits>&
        -: 4472:operator>>(basic_istream<_CharT, _Traits>& __is,
        -: 4473:           basic_string<_CharT, _Traits, _Allocator>& __str);
        -: 4474:
        -: 4475:template<class _CharT, class _Traits, class _Allocator>
        -: 4476:basic_istream<_CharT, _Traits>&
        -: 4477:getline(basic_istream<_CharT, _Traits>& __is,
        -: 4478:        basic_string<_CharT, _Traits, _Allocator>& __str, _CharT __dlm);
        -: 4479:
        -: 4480:template<class _CharT, class _Traits, class _Allocator>
        -: 4481:inline _LIBCPP_INLINE_VISIBILITY
        -: 4482:basic_istream<_CharT, _Traits>&
        -: 4483:getline(basic_istream<_CharT, _Traits>& __is,
        -: 4484:        basic_string<_CharT, _Traits, _Allocator>& __str);
        -: 4485:
        -: 4486:template<class _CharT, class _Traits, class _Allocator>
        -: 4487:inline _LIBCPP_INLINE_VISIBILITY
        -: 4488:basic_istream<_CharT, _Traits>&
        -: 4489:getline(basic_istream<_CharT, _Traits>&& __is,
        -: 4490:        basic_string<_CharT, _Traits, _Allocator>& __str, _CharT __dlm);
        -: 4491:
        -: 4492:template<class _CharT, class _Traits, class _Allocator>
        -: 4493:inline _LIBCPP_INLINE_VISIBILITY
        -: 4494:basic_istream<_CharT, _Traits>&
        -: 4495:getline(basic_istream<_CharT, _Traits>&& __is,
        -: 4496:        basic_string<_CharT, _Traits, _Allocator>& __str);
        -: 4497:
        -: 4498:#if _LIBCPP_STD_VER > 17
        -: 4499:template <class _CharT, class _Traits, class _Allocator, class _Up>
        -: 4500:inline _LIBCPP_INLINE_VISIBILITY
        -: 4501:    typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 4502:    erase(basic_string<_CharT, _Traits, _Allocator>& __str, const _Up& __v) {
        -: 4503:  auto __old_size = __str.size();
        -: 4504:  __str.erase(_VSTD::remove(__str.begin(), __str.end(), __v), __str.end());
        -: 4505:  return __old_size - __str.size();
        -: 4506:}
        -: 4507:
        -: 4508:template <class _CharT, class _Traits, class _Allocator, class _Predicate>
        -: 4509:inline _LIBCPP_INLINE_VISIBILITY
        -: 4510:    typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 4511:    erase_if(basic_string<_CharT, _Traits, _Allocator>& __str,
        -: 4512:             _Predicate __pred) {
        -: 4513:  auto __old_size = __str.size();
        -: 4514:  __str.erase(_VSTD::remove_if(__str.begin(), __str.end(), __pred),
        -: 4515:              __str.end());
        -: 4516:  return __old_size - __str.size();
        -: 4517:}
        -: 4518:#endif
        -: 4519:
        -: 4520:#if _LIBCPP_DEBUG_LEVEL == 2
        -: 4521:
        -: 4522:template<class _CharT, class _Traits, class _Allocator>
        -: 4523:bool
        -: 4524:basic_string<_CharT, _Traits, _Allocator>::__dereferenceable(const const_iterator* __i) const
        -: 4525:{
        -: 4526:    return this->data() <= _VSTD::__to_address(__i->base()) &&
        -: 4527:           _VSTD::__to_address(__i->base()) < this->data() + this->size();
        -: 4528:}
        -: 4529:
        -: 4530:template<class _CharT, class _Traits, class _Allocator>
        -: 4531:bool
        -: 4532:basic_string<_CharT, _Traits, _Allocator>::__decrementable(const const_iterator* __i) const
        -: 4533:{
        -: 4534:    return this->data() < _VSTD::__to_address(__i->base()) &&
        -: 4535:           _VSTD::__to_address(__i->base()) <= this->data() + this->size();
        -: 4536:}
        -: 4537:
        -: 4538:template<class _CharT, class _Traits, class _Allocator>
        -: 4539:bool
        -: 4540:basic_string<_CharT, _Traits, _Allocator>::__addable(const const_iterator* __i, ptrdiff_t __n) const
        -: 4541:{
        -: 4542:    const value_type* __p = _VSTD::__to_address(__i->base()) + __n;
        -: 4543:    return this->data() <= __p && __p <= this->data() + this->size();
        -: 4544:}
        -: 4545:
        -: 4546:template<class _CharT, class _Traits, class _Allocator>
        -: 4547:bool
        -: 4548:basic_string<_CharT, _Traits, _Allocator>::__subscriptable(const const_iterator* __i, ptrdiff_t __n) const
        -: 4549:{
        -: 4550:    const value_type* __p = _VSTD::__to_address(__i->base()) + __n;
        -: 4551:    return this->data() <= __p && __p < this->data() + this->size();
        -: 4552:}
        -: 4553:
        -: 4554:#endif // _LIBCPP_DEBUG_LEVEL == 2
        -: 4555:
        -: 4556:#if _LIBCPP_STD_VER > 11
        -: 4557:// Literal suffixes for basic_string [basic.string.literals]
        -: 4558:inline namespace literals
        -: 4559:{
        -: 4560:  inline namespace string_literals
        -: 4561:  {
        -: 4562:    inline _LIBCPP_INLINE_VISIBILITY
        -: 4563:    basic_string<char> operator "" s( const char *__str, size_t __len )
        -: 4564:    {
        -: 4565:        return basic_string<char> (__str, __len);
        -: 4566:    }
        -: 4567:
        -: 4568:#ifndef _LIBCPP_HAS_NO_WIDE_CHARACTERS
        -: 4569:    inline _LIBCPP_INLINE_VISIBILITY
        -: 4570:    basic_string<wchar_t> operator "" s( const wchar_t *__str, size_t __len )
        -: 4571:    {
        -: 4572:        return basic_string<wchar_t> (__str, __len);
        -: 4573:    }
        -: 4574:#endif
        -: 4575:
        -: 4576:#ifndef _LIBCPP_HAS_NO_CHAR8_T
        -: 4577:    inline _LIBCPP_INLINE_VISIBILITY
        -: 4578:    basic_string<char8_t> operator "" s(const char8_t *__str, size_t __len) _NOEXCEPT
        -: 4579:    {
        -: 4580:        return basic_string<char8_t> (__str, __len);
        -: 4581:    }
        -: 4582:#endif
        -: 4583:
        -: 4584:    inline _LIBCPP_INLINE_VISIBILITY
        -: 4585:    basic_string<char16_t> operator "" s( const char16_t *__str, size_t __len )
        -: 4586:    {
        -: 4587:        return basic_string<char16_t> (__str, __len);
        -: 4588:    }
        -: 4589:
        -: 4590:    inline _LIBCPP_INLINE_VISIBILITY
        -: 4591:    basic_string<char32_t> operator "" s( const char32_t *__str, size_t __len )
        -: 4592:    {
        -: 4593:        return basic_string<char32_t> (__str, __len);
        -: 4594:    }
        -: 4595:  }
        -: 4596:}
        -: 4597:#endif
        -: 4598:
        -: 4599:_LIBCPP_END_NAMESPACE_STD
        -: 4600:
        -: 4601:_LIBCPP_POP_MACROS
        -: 4602:
        -: 4603:#endif // _LIBCPP_STRING
